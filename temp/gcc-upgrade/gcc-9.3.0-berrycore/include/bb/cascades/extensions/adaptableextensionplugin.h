/* Copyright (C) 2013 Research In Motion Limited.  */

#ifndef cascades_adaptableextensionplugin_h
#define cascades_adaptableextensionplugin_h

#include <QtDeclarative/QDeclarativeExtensionPlugin>

#include <bb/cascades/bbcascades_global.h>

class QDeclarativeEngine;

namespace bb {
    namespace cascades {

        /*!
         * @brief A base class for asset-selection aware QML extension plugins.
         *
         * @c AdaptableExtensionPlugin is an addition to the @c QDeclarativeExtensionPlugin
         * interface that lets you create dynamically-loaded QML extensions. The QML extensions
         * support asset selection and custom QML types.
         *
         * To create a QML extension plugin:
         *
         * 1. Subclass @c %AdaptableExtensionPlugin.
         * 2. Implement @c registerExtensionTypes and register the types using @c qmlRegisterType().
         * 3. Export the class using the @c Q_EXPORT_PLUGIN2() macro.
         * 4. Create a qmldir file to export the plugin. For example:
         * @code
         * plugin exampleplugin
         * @endcode
         * 5. Create QML assets inside a sub-folder called assets.
         * 6. Create a qml-api.manifest file in the assets folder.
         *
         * @note Don't export QML components in the qmldir file.
         *
         * In QML, you can reference a QML type by either importing it from a registered namespace or
         * referencing it through an asset URI. For example, if the @c %ExampleType extension is registered at
         * @c %com.example.extensions.example, the import statement is:
         *
         * @code
         * import com.example.extensions.example.ExampleType 1.0
         * @endcode
         *
         * In C++, if @c %ExampleType is defined in ExampleType.qml, this is referenced as:
         *
         * @code
         * QmlDocument *qml = QmlDocument::create
         *                       ("asset://com.example.extensions.example/ExampleType.qml");
         * @endcode
         *
         * @xmlonly
         * <apigrouping group="User interface/Resources"/>
         * @endxmlonly
         */
        class BBCASCADES_EXPORT AdaptableExtensionPlugin : public QDeclarativeExtensionPlugin
        {
            Q_OBJECT

        public:

            AdaptableExtensionPlugin(QObject *parent = 0);
            virtual ~AdaptableExtensionPlugin();

            /*!
             * @brief Registers QML types so they are asset-selection aware.
             * Calls @c registerExtensionTypes to register native types with QML.
             *
             * @warning If this method is overridden, it must be called.
             * Alternatively, use @c registerExtensionTypes instead.
             *
             * @param uri An identifier generated by the QML engine using
             * the name and path of the extension's plugin library.
             */
            virtual void registerTypes(const char *uri);

            /*!
             * @brief Registers QML types in the given uri. Subclasses
             * should implement this to call @c qmlRegisterType() for all types
             * which are provided by the extension plugin.
             *
             * @param uri An identifier generated by the QML engine using
             * the name and path of the extension's plugin library.
             */
            virtual void registerExtensionTypes(const char *uri) = 0;
        };

    }
}

#endif // cascades_adaptableextensionplugin_h
