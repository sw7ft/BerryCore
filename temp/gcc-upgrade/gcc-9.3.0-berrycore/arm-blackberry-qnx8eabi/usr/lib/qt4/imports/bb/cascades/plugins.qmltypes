import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.

Module {
    Component {
        name: "QCoreApplication"
        prototype: "QObject"
        Property { name: "applicationName"; type: "string" }
        Property { name: "applicationVersion"; type: "string" }
        Property { name: "organizationName"; type: "string" }
        Property { name: "organizationDomain"; type: "string" }
        Signal { name: "aboutToQuit" }
        Signal {
            name: "unixSignal"
            Parameter { type: "int" }
        }
        Method { name: "quit" }
    }
    Component {
        name: "bb::Application"
        prototype: "QCoreApplication"
        Property { name: "autoExit"; type: "bool" }
        Signal { name: "thumbnail" }
        Signal {
            name: "windowGroupThumbnailed"
            Parameter { name: "windowGroupID"; type: "string" }
        }
        Signal { name: "fullscreen" }
        Signal {
            name: "windowGroupFullscreen"
            Parameter { name: "windowGroupID"; type: "string" }
        }
        Signal { name: "invisible" }
        Signal {
            name: "windowGroupInvisible"
            Parameter { name: "windowGroupID"; type: "string" }
        }
        Signal { name: "swipeDown" }
        Signal { name: "asleep" }
        Signal {
            name: "windowGroupAsleep"
            Parameter { name: "windowGroupID"; type: "string" }
        }
        Signal { name: "awake" }
        Signal {
            name: "windowGroupAwake"
            Parameter { name: "windowGroupID"; type: "string" }
        }
        Signal { name: "manualExit" }
        Signal {
            name: "autoExitChanged"
            Parameter { name: "newAutoExit"; type: "bool" }
        }
        Signal {
            name: "processStateChanged"
            Parameter { name: "processState"; type: "bb::ProcessState::Type" }
        }
        Signal {
            name: "pooling"
            Parameter { name: "poolRequestID"; type: "string" }
        }
        Signal {
            name: "processStateChanged"
            Parameter { name: "processState"; type: "int" }
        }
        Method {
            name: "setAutoExit"
            Parameter { name: "autoExit"; type: "bool" }
        }
        Method { name: "autoExit"; type: "bool" }
        Method { name: "extendTerminationTimeout"; type: "bool" }
        Method {
            name: "setIconBadge"
            type: "bool"
            Parameter { name: "badge"; type: "bb::IconBadge::Type" }
        }
        Method { name: "minimize"; type: "bool" }
        Method { name: "requestExit"; type: "bool" }
        Method {
            name: "poolingComplete"
            Parameter { name: "poolRequestID"; type: "string" }
        }
        Method {
            name: "setClosePrompt"
            type: "bool"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "clearClosePrompt"; type: "bool" }
        Method { name: "isAwake"; type: "bool" }
        Method { name: "isAsleep"; type: "bool" }
        Method { name: "isThumbnailed"; type: "bool" }
        Method { name: "isInvisible"; type: "bool" }
        Method { name: "isFullscreen"; type: "bool" }
        Method {
            name: "isWindowGroupAwake"
            type: "bool"
            Parameter { name: "windowGroupID"; type: "string" }
        }
        Method {
            name: "isWindowGroupAsleep"
            type: "bool"
            Parameter { name: "windowGroupID"; type: "string" }
        }
        Method {
            name: "isWindowGroupThumbnailed"
            type: "bool"
            Parameter { name: "windowGroupID"; type: "string" }
        }
        Method {
            name: "isWindowGroupInvisible"
            type: "bool"
            Parameter { name: "windowGroupID"; type: "string" }
        }
        Method {
            name: "isWindowGroupFullscreen"
            type: "bool"
            Parameter { name: "windowGroupID"; type: "string" }
        }
    }
    Component {
        name: "bb::cascades::A11yComponentActivationEvent"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/A11yComponentActivationEvent 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property {
            name: "type"
            type: "bb::cascades::A11yComponentActivationType::Type"
            isReadonly: true
        }
        Property { name: "consumed"; type: "bool"; isReadonly: true }
        Method { name: "consume" }
    }
    Component {
        name: "bb::cascades::A11yComponentActivationType"
        exports: [
            "bb.cascades/A11yComponentActivationType 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Tap": 1,
                "LongPress": 2,
                "SwipeUp": 3,
                "SwipeLeft": 4,
                "SwipeDown": 5,
                "SwipeRight": 6,
                "DoubleTap": 7,
                "Release": 8,
                "PageUp": 9,
                "PageDown": 10,
                "PageLeft": 11,
                "PageRight": 12,
                "Home": 13,
                "End": 14,
                "Forward": 15,
                "Backward": 16,
                "ZoomIn": 17,
                "ZoomOut": 18
            }
        }
    }
    Component {
        name: "bb::cascades::A11yMode"
        exports: [
            "bb.cascades/A11yMode 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Collapsed": 1
            }
        }
    }
    Component {
        name: "bb::cascades::A11yRole"
        exports: [
            "bb.cascades/A11yRole 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "ActivityIndicator": 0,
                "Alert": 1,
                "AlertDialog": 2,
                "Article": 4,
                "Banner": 5,
                "Button": 6,
                "CheckBox": 7,
                "ColumnHeader": 8,
                "ComboBox": 9,
                "Complementary": 10,
                "Container": 11,
                "ContentInfo": 12,
                "DateTimePicker": 13,
                "Definition": 14,
                "Dialog": 15,
                "Directory": 16,
                "Document": 17,
                "DropDown": 18,
                "Form": 19,
                "Grid": 20,
                "GridCell": 21,
                "Group": 22,
                "Heading": 23,
                "Img": 24,
                "Label": 25,
                "Link": 26,
                "List": 27,
                "ListBox": 28,
                "ListItem": 29,
                "Log": 30,
                "Main": 31,
                "Marquee": 32,
                "Math": 33,
                "Menu": 34,
                "MenuBar": 35,
                "MenuItem": 36,
                "MenuItemCheckBox": 37,
                "MenuItemRadio": 38,
                "Navigation": 39,
                "NavigationPane": 40,
                "Note": 41,
                "Option": 42,
                "Page": 43,
                "Presentation": 44,
                "ProgressBar": 45,
                "Radio": 46,
                "RadioGroup": 47,
                "Region": 48,
                "Row": 49,
                "RowGroup": 50,
                "RowHeader": 51,
                "ScrollBar": 52,
                "ScrollView": 53,
                "Search": 54,
                "Separator": 55,
                "Slider": 56,
                "SpinButton": 57,
                "Status": 58,
                "Tab": 59,
                "TabList": 60,
                "TabPanel": 61,
                "TextBox": 62,
                "Timer": 63,
                "ToggleButton": 64,
                "ToolBar": 65,
                "ToolTip": 66,
                "Tree": 67,
                "TreeGrid": 68,
                "TreeItem": 69,
                "WebView": 70,
                "Unknown": 71,
                "Socket": 72,
                "Plug": 73,
                "StaticText": 74,
                "Extended": 75
            }
        }
    }
    Component {
        name: "bb::cascades::A11yState"
        exports: [
            "bb.cascades/A11yState 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Active": 0,
                "Animated": 1,
                "Busy": 2,
                "Checkable": 3,
                "Checked": 4,
                "DefaultControl": 5,
                "Defunct": 6,
                "Disabled": 7,
                "Expandable": 8,
                "Expanded": 9,
                "Focusable": 10,
                "Focused": 11,
                "HasPopup": 12,
                "Hidden": 13,
                "Invalid": 14,
                "Iconified": 15,
                "Mixed": 16,
                "ManagesDescendants": 17,
                "Modal": 18,
                "MultiLine": 19,
                "MultiSelectable": 20,
                "OffScreen": 21,
                "OrientationHorizontal": 22,
                "OrientationVertical": 23,
                "Pinned": 24,
                "ReadOnly": 25,
                "Required": 26,
                "Selectable": 27,
                "SelectableText": 28,
                "Selected": 29,
                "SupportsAutocompletion": 30,
                "ManagedChild": 31,
                "Truncated": 32,
                "Visited": 33,
                "PasswordProtected": 34
            }
        }
    }
    Component {
        name: "bb::cascades::A11yStateHolder"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/A11yStateHolder 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "active"; type: "bool" }
        Property { name: "animated"; type: "bool" }
        Property { name: "busy"; type: "bool" }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "defaultControl"; type: "bool" }
        Property { name: "defunct"; type: "bool" }
        Property { name: "disabled"; type: "bool" }
        Property { name: "expandable"; type: "bool" }
        Property { name: "expanded"; type: "bool" }
        Property { name: "focusable"; type: "bool" }
        Property { name: "focused"; type: "bool" }
        Property { name: "hasPopup"; type: "bool" }
        Property { name: "hidden"; type: "bool" }
        Property { name: "invalid"; type: "bool" }
        Property { name: "iconified"; type: "bool" }
        Property { name: "mixed"; type: "bool" }
        Property { name: "managesDescendants"; type: "bool" }
        Property { name: "modal"; type: "bool" }
        Property { name: "multiLine"; type: "bool" }
        Property { name: "multiSelectable"; type: "bool" }
        Property { name: "offScreen"; type: "bool" }
        Property { name: "orientationHorizontal"; type: "bool" }
        Property { name: "orientationVertical"; type: "bool" }
        Property { name: "pinned"; type: "bool" }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "required"; type: "bool" }
        Property { name: "selectable"; type: "bool" }
        Property { name: "selectableText"; type: "bool" }
        Property { name: "selected"; type: "bool" }
        Property { name: "supportsAutocompletion"; type: "bool" }
        Property { name: "managedChild"; type: "bool" }
        Property { name: "truncated"; type: "bool" }
        Property { name: "visited"; type: "bool" }
        Property { name: "passwordProtected"; type: "bool" }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "bb::cascades::A11yState::Type" }
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "activeChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "animatedChanged"
            Parameter { name: "animated"; type: "bool" }
        }
        Signal {
            name: "busyChanged"
            Parameter { name: "busy"; type: "bool" }
        }
        Signal {
            name: "checkableChanged"
            Parameter { name: "checkable"; type: "bool" }
        }
        Signal {
            name: "checkedChanged"
            Parameter { name: "checked"; type: "bool" }
        }
        Signal {
            name: "defaultControlChanged"
            Parameter { name: "defaultControl"; type: "bool" }
        }
        Signal {
            name: "defunctChanged"
            Parameter { name: "defunct"; type: "bool" }
        }
        Signal {
            name: "disabledChanged"
            Parameter { name: "disabled"; type: "bool" }
        }
        Signal {
            name: "expandableChanged"
            Parameter { name: "expandable"; type: "bool" }
        }
        Signal {
            name: "expandedChanged"
            Parameter { name: "expanded"; type: "bool" }
        }
        Signal {
            name: "focusableChanged"
            Parameter { name: "focusable"; type: "bool" }
        }
        Signal {
            name: "focusedChanged"
            Parameter { name: "focused"; type: "bool" }
        }
        Signal {
            name: "hasPopupChanged"
            Parameter { name: "hasPopup"; type: "bool" }
        }
        Signal {
            name: "hiddenChanged"
            Parameter { name: "hidden"; type: "bool" }
        }
        Signal {
            name: "invalidChanged"
            Parameter { name: "invalid"; type: "bool" }
        }
        Signal {
            name: "iconifiedChanged"
            Parameter { name: "iconified"; type: "bool" }
        }
        Signal {
            name: "mixedChanged"
            Parameter { name: "mixed"; type: "bool" }
        }
        Signal {
            name: "managesDescendantsChanged"
            Parameter { name: "managesDescendants"; type: "bool" }
        }
        Signal {
            name: "modalChanged"
            Parameter { name: "modal"; type: "bool" }
        }
        Signal {
            name: "multiLineChanged"
            Parameter { name: "multiLine"; type: "bool" }
        }
        Signal {
            name: "multiSelectableChanged"
            Parameter { name: "multiSelectable"; type: "bool" }
        }
        Signal {
            name: "offScreenChanged"
            Parameter { name: "offScreen"; type: "bool" }
        }
        Signal {
            name: "orientationHorizontalChanged"
            Parameter { name: "orientationHorizontal"; type: "bool" }
        }
        Signal {
            name: "orientationVerticalChanged"
            Parameter { name: "orientationVertical"; type: "bool" }
        }
        Signal {
            name: "pinnedChanged"
            Parameter { name: "pinned"; type: "bool" }
        }
        Signal {
            name: "readOnlyChanged"
            Parameter { name: "readOnly"; type: "bool" }
        }
        Signal {
            name: "requiredChanged"
            Parameter { name: "required"; type: "bool" }
        }
        Signal {
            name: "selectableChanged"
            Parameter { name: "selectable"; type: "bool" }
        }
        Signal {
            name: "selectableTextChanged"
            Parameter { name: "selectableText"; type: "bool" }
        }
        Signal {
            name: "selectedChanged"
            Parameter { name: "selected"; type: "bool" }
        }
        Signal {
            name: "supportsAutocompletionChanged"
            Parameter { name: "supportsAutocompletion"; type: "bool" }
        }
        Signal {
            name: "managedChildChanged"
            Parameter { name: "managedChild"; type: "bool" }
        }
        Signal {
            name: "truncatedChanged"
            Parameter { name: "truncated"; type: "bool" }
        }
        Signal {
            name: "visitedChanged"
            Parameter { name: "visited"; type: "bool" }
        }
        Signal {
            name: "passwordProtectedChanged"
            Parameter { name: "passwordProtected"; type: "bool" }
        }
        Method {
            name: "setActive"
            Parameter { name: "active"; type: "bool" }
        }
        Method { name: "resetActive" }
        Method {
            name: "setAnimated"
            Parameter { name: "animated"; type: "bool" }
        }
        Method { name: "resetAnimated" }
        Method {
            name: "setBusy"
            Parameter { name: "busy"; type: "bool" }
        }
        Method { name: "resetBusy" }
        Method {
            name: "setCheckable"
            Parameter { name: "checkable"; type: "bool" }
        }
        Method { name: "resetCheckable" }
        Method {
            name: "setChecked"
            Parameter { name: "checked"; type: "bool" }
        }
        Method { name: "resetChecked" }
        Method {
            name: "setDefaultControl"
            Parameter { name: "defaultControl"; type: "bool" }
        }
        Method { name: "resetDefaultControl" }
        Method {
            name: "setDefunct"
            Parameter { name: "defunct"; type: "bool" }
        }
        Method { name: "resetDefunct" }
        Method {
            name: "setDisabled"
            Parameter { name: "disabled"; type: "bool" }
        }
        Method { name: "resetDisabled" }
        Method {
            name: "setExpandable"
            Parameter { name: "expandable"; type: "bool" }
        }
        Method { name: "resetExpandable" }
        Method {
            name: "setExpanded"
            Parameter { name: "expanded"; type: "bool" }
        }
        Method { name: "resetExpanded" }
        Method {
            name: "setFocusable"
            Parameter { name: "focusable"; type: "bool" }
        }
        Method { name: "resetFocusable" }
        Method {
            name: "setFocused"
            Parameter { name: "focused"; type: "bool" }
        }
        Method { name: "resetFocused" }
        Method {
            name: "setHasPopup"
            Parameter { name: "hasPopup"; type: "bool" }
        }
        Method { name: "resetHasPopup" }
        Method {
            name: "setHidden"
            Parameter { name: "hidden"; type: "bool" }
        }
        Method { name: "resetHidden" }
        Method {
            name: "setInvalid"
            Parameter { name: "invalid"; type: "bool" }
        }
        Method { name: "resetInvalid" }
        Method {
            name: "setIconified"
            Parameter { name: "iconified"; type: "bool" }
        }
        Method { name: "resetIconified" }
        Method {
            name: "setMixed"
            Parameter { name: "mixed"; type: "bool" }
        }
        Method { name: "resetMixed" }
        Method {
            name: "setManagesDescendants"
            Parameter { name: "managesDescendants"; type: "bool" }
        }
        Method { name: "resetManagesDescendants" }
        Method {
            name: "setModal"
            Parameter { name: "modal"; type: "bool" }
        }
        Method { name: "resetModal" }
        Method {
            name: "setMultiLine"
            Parameter { name: "multiLine"; type: "bool" }
        }
        Method { name: "resetMultiLine" }
        Method {
            name: "setMultiSelectable"
            Parameter { name: "multiSelectable"; type: "bool" }
        }
        Method { name: "resetMultiSelectable" }
        Method {
            name: "setOffScreen"
            Parameter { name: "offScreen"; type: "bool" }
        }
        Method { name: "resetOffScreen" }
        Method {
            name: "setOrientationHorizontal"
            Parameter { name: "orientationHorizontal"; type: "bool" }
        }
        Method { name: "resetOrientationHorizontal" }
        Method {
            name: "setOrientationVertical"
            Parameter { name: "orientationVertical"; type: "bool" }
        }
        Method { name: "resetOrientationVertical" }
        Method {
            name: "setPinned"
            Parameter { name: "pinned"; type: "bool" }
        }
        Method { name: "resetPinned" }
        Method {
            name: "setReadOnly"
            Parameter { name: "readOnly"; type: "bool" }
        }
        Method { name: "resetReadOnly" }
        Method {
            name: "setRequired"
            Parameter { name: "required"; type: "bool" }
        }
        Method { name: "resetRequired" }
        Method {
            name: "setSelectable"
            Parameter { name: "selectable"; type: "bool" }
        }
        Method { name: "resetSelectable" }
        Method {
            name: "setSelectableText"
            Parameter { name: "selectableText"; type: "bool" }
        }
        Method { name: "resetSelectableText" }
        Method {
            name: "setSelected"
            Parameter { name: "selected"; type: "bool" }
        }
        Method { name: "resetSelected" }
        Method {
            name: "setSupportsAutocompletion"
            Parameter { name: "supportsAutocompletion"; type: "bool" }
        }
        Method { name: "resetSupportsAutocompletion" }
        Method {
            name: "setManagedChild"
            Parameter { name: "managedChild"; type: "bool" }
        }
        Method { name: "resetManagedChild" }
        Method {
            name: "setTruncated"
            Parameter { name: "truncated"; type: "bool" }
        }
        Method { name: "resetTruncated" }
        Method {
            name: "setVisited"
            Parameter { name: "visited"; type: "bool" }
        }
        Method { name: "resetVisited" }
        Method {
            name: "setPasswordProtected"
            Parameter { name: "passwordProtected"; type: "bool" }
        }
        Method { name: "resetPasswordProtected" }
        Method {
            name: "setState"
            Parameter { name: "state"; type: "bb::cascades::A11yState::Type" }
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "isStateSet"
            type: "bool"
            Parameter { name: "state"; type: "bb::cascades::A11yState::Type" }
        }
    }
    Component {
        name: "bb::cascades::A11yValueAdjustmentType"
        exports: [
            "bb.cascades/A11yValueAdjustmentType 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Minimum": 0,
                "Current": 1,
                "Maximum": 2,
                "SingleStepAdd": 3,
                "SingleStepSubtract": 4,
                "PageStepAdd": 5,
                "PageStepSubtract": 6
            }
        }
    }
    Component {
        name: "bb::cascades::AbsoluteLayout"
        prototype: "bb::cascades::Layout"
        exports: [
            "bb.cascades/AbsoluteLayout 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::AbsoluteLayoutProperties"
        prototype: "bb::cascades::LayoutProperties"
        exports: [
            "bb.cascades/AbsoluteLayoutProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "positionX"; type: "float" }
        Property { name: "positionY"; type: "float" }
        Signal {
            name: "positionXChanged"
            Parameter { name: "positionX"; type: "float" }
        }
        Signal {
            name: "positionYChanged"
            Parameter { name: "positionY"; type: "float" }
        }
        Method {
            name: "setPositionX"
            Parameter { name: "posX"; type: "float" }
        }
        Method { name: "resetPositionX" }
        Method {
            name: "setPositionY"
            Parameter { name: "posY"; type: "float" }
        }
        Method { name: "resetPositionY" }
    }
    Component {
        name: "bb::cascades::AbstractA11yObject"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractA11yObject 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "name"; type: "string" }
        Property { name: "role"; type: "bb::cascades::A11yRole::Type"; isReadonly: true }
        Property { name: "description"; type: "string" }
        Property { name: "labelledBy"; type: "bb::cascades::UIObject"; isList: true; isReadonly: true }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "descriptionChanged"
            Parameter { name: "description"; type: "string" }
        }
        Signal {
            name: "labelAdded"
            Parameter { name: "label"; type: "bb::cascades::UIObject"; isPointer: true }
        }
        Signal {
            name: "labelRemoved"
            Parameter { name: "label"; type: "bb::cascades::UIObject"; isPointer: true }
        }
        Method {
            name: "setName"
            Parameter { name: "name"; type: "string" }
        }
        Method { name: "resetName" }
        Method {
            name: "setDescription"
            Parameter { name: "description"; type: "string" }
        }
        Method { name: "resetDescription" }
        Method {
            name: "addLabel"
            Parameter { name: "label"; type: "bb::cascades::UIObject"; isPointer: true }
        }
        Method {
            name: "removeLabel"
            Parameter { name: "label"; type: "bb::cascades::UIObject"; isPointer: true }
        }
        Method { name: "removeAllLabels" }
        Method {
            name: "labelAt"
            type: "bb::cascades::UIObject*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOfLabel"
            type: "int"
            Parameter { name: "label"; type: "bb::cascades::UIObject"; isPointer: true }
        }
        Method { name: "labelCount"; type: "int" }
    }
    Component {
        name: "bb::cascades::AbstractA11ySpecialization"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractA11ySpecialization 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::AbstractActionItem"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractActionItem 1.0",
            "bb.cascades/AbstractActionItem 1.2",
            "bb.cascades/AbstractActionItem 1.3",
            "bb.cascades/AbstractActionItem 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            2,
            3,
            4
        ]
        isCreatable: false
        Property { name: "title"; type: "string" }
        Property { name: "image"; type: "QVariant" }
        Property { name: "imageSource"; type: "QUrl" }
        Property { name: "enabled"; type: "bool" }
        Property {
            name: "accessibility"
            revision: 2
            type: "bb::cascades::AbstractA11yObject"
            isReadonly: true
            isPointer: true
        }
        Property { name: "builtInShortcutsEnabled"; revision: 2; type: "bool" }
        Property { name: "backgroundColor"; revision: 3; type: "QVariant" }
        Property { name: "defaultAction"; revision: 4; type: "bool" }
        Property {
            name: "shortcuts"
            type: "bb::cascades::AbstractShortcut"
            isList: true
            isReadonly: true
        }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal { name: "triggered" }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourceChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "backgroundColorChanged"
            revision: 3
            Parameter { name: "backgroundColor"; type: "ColorPaint" }
        }
        Signal {
            name: "backgroundColorChanged"
            revision: 3
            Parameter { name: "backgroundColor"; type: "QVariant" }
        }
        Signal {
            name: "builtInShortcutsEnabledChanged"
            revision: 2
            Parameter { name: "builtInShortcutsEnabled"; type: "bool" }
        }
        Signal {
            name: "defaultActionChanged"
            revision: 4
            Parameter { name: "defaultAction"; type: "bool" }
        }
        Method {
            name: "setBuiltInShortcutsEnabled"
            revision: 2
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "string" }
        }
        Method { name: "resetTitle" }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetEnabled" }
        Method {
            name: "setImage"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetImage" }
        Method {
            name: "setImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSource" }
        Method {
            name: "setBackgroundColor"
            revision: 3
            Parameter { name: "backgroundColor"; type: "ColorPaint" }
        }
        Method { name: "resetBackgroundColor"; revision: 3 }
        Method {
            name: "setDefaultAction"
            revision: 4
            Parameter { name: "defaultAction"; type: "bool" }
        }
        Method { name: "resetDefaultAction"; revision: 4 }
        Method {
            name: "addShortcut"
            Parameter { name: "shortcut"; type: "bb::cascades::AbstractShortcut"; isPointer: true }
        }
        Method {
            name: "removeShortcut"
            type: "bool"
            Parameter { name: "shortcut"; type: "bb::cascades::AbstractShortcut"; isPointer: true }
        }
        Method { name: "removeAllShortcuts" }
        Method { name: "shortcutCount"; type: "int" }
        Method {
            name: "shortcutAt"
            type: "bb::cascades::AbstractShortcut*"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "enableAllShortcuts" }
        Method { name: "disableAllShortcuts" }
        Method { name: "builtInShortcutsEnabled"; revision: 2; type: "bool" }
        Method { name: "resetBuiltInShortcutsEnabled"; revision: 2 }
        Method {
            name: "setBuiltInShortcutEnabled"
            revision: 2
            Parameter { name: "type"; type: "bb::cascades::SystemShortcuts::Type" }
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setBuiltInShortcutEnabled"
            Parameter { name: "type"; type: "int" }
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        name: "bb::cascades::AbstractAnimation"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractAnimation 1.0",
            "bb.cascades/GroupAnimation 1.0",
            "bb.cascades/TransitionAnimation 1.0"
        ]
        exportMetaObjectRevisions: [
            0,
            0,
            0
        ]
        isCreatable: false
        Property { name: "target"; type: "bb::cascades::VisualNode"; isPointer: true }
        Property { name: "delay"; type: "int" }
        Property { name: "repeatCount"; type: "int" }
        Property { name: "state"; type: "bb::cascades::AnimationState::Type"; isReadonly: true }
        Signal { name: "started" }
        Signal { name: "stopped" }
        Signal { name: "ended" }
        Signal {
            name: "targetChanged"
            Parameter { name: "target"; type: "bb::cascades::VisualNode"; isPointer: true }
        }
        Signal {
            name: "delayChanged"
            Parameter { name: "delay"; type: "int" }
        }
        Signal {
            name: "repeatCountChanged"
            Parameter { name: "repeatCount"; type: "int" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "newState"; type: "bb::cascades::AnimationState::Type" }
        }
        Method {
            name: "setTarget"
            Parameter { name: "target"; type: "bb::cascades::VisualNode"; isPointer: true }
        }
        Method { name: "resetTarget" }
        Method { name: "resetDelay" }
        Method { name: "resetRepeatCount" }
        Method { name: "play" }
        Method { name: "stop" }
        Method { name: "isStarted"; type: "bool" }
        Method { name: "isPlaying"; type: "bool" }
        Method { name: "isStopped"; type: "bool" }
        Method { name: "isEnded"; type: "bool" }
    }
    Component {
        name: "bb::cascades::AbstractButton"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/AbstractButton 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Signal { name: "clicked" }
    }
    Component {
        name: "bb::cascades::AbstractContentSecurity"
        prototype: "bb::cascades::BaseObject"
        Property { name: "defaultPerimeter"; type: "bb::system::SecurityPerimeter::Type" }
        Signal {
            name: "defaultPerimeterChanged"
            Parameter { name: "newDefaultPerimeter"; type: "bb::system::SecurityPerimeter::Type" }
        }
        Method {
            name: "setDefaultPerimeter"
            Parameter { name: "defaultPerimeter"; type: "bb::system::SecurityPerimeter::Type" }
        }
        Method { name: "resetDefaultPerimeter" }
    }
    Component {
        name: "bb::cascades::AbstractCover"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractCover 1.0",
            "bb.cascades/AbstractCover 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        isCreatable: false
        Property { name: "description"; type: "string" }
        Property { name: "size"; revision: 3; type: "QSize"; isReadonly: true }
        Signal {
            name: "descriptionChanged"
            Parameter { name: "description"; type: "string" }
        }
        Signal {
            name: "sizeChanged"
            revision: 3
            Parameter { name: "size"; type: "QSize" }
        }
        Method {
            name: "setDescription"
            Parameter { name: "description"; type: "string" }
        }
    }
    Component {
        name: "bb::cascades::AbstractDialog"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractDialog 1.0",
            "bb.cascades/AbstractDialog 1.2"
        ]
        exportMetaObjectRevisions: [
            0,
            2
        ]
        isCreatable: false
        Property { name: "opened"; type: "bool"; isReadonly: true }
        Property {
            name: "accessibility"
            revision: 2
            type: "bb::cascades::AbstractA11yObject"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "openedChanged"
            Parameter { name: "opened"; type: "bool" }
        }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method { name: "open" }
        Method { name: "close" }
    }
    Component {
        name: "bb::cascades::AbstractEffect"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractEffect 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "enabled"; type: "bool" }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetEnabled" }
    }
    Component {
        name: "bb::cascades::AbstractEventHandler"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractEventHandler 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::AbstractGestureEvent"
        prototype: "bb::cascades::Event"
        Property { name: "x"; type: "float"; isReadonly: true }
        Property { name: "y"; type: "float"; isReadonly: true }
        Property {
            name: "inputSource"
            revision: 4
            type: "bb::cascades::InputSource::Type"
            isReadonly: true
        }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::AbstractPane"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractPane 1.0",
            "bb.cascades/AbstractPane 1.2"
        ]
        exportMetaObjectRevisions: [
            0,
            2
        ]
        isCreatable: false
        Property { name: "paneProperties"; type: "bb::cascades::PaneProperties"; isPointer: true }
        Property { name: "peekedAt"; type: "bool"; isReadonly: true }
        Property {
            name: "shortcuts"
            type: "bb::cascades::AbstractShortcut"
            isList: true
            isReadonly: true
        }
        Property {
            name: "keyListeners"
            type: "bb::cascades::KeyListener"
            isList: true
            isReadonly: true
        }
        Property {
            name: "accessibility"
            revision: 2
            type: "bb::cascades::AbstractA11yObject"
            isReadonly: true
            isPointer: true
        }
        Property { name: "builtInShortcutsEnabled"; revision: 2; type: "bool" }
        Signal {
            name: "panePropertiesChanged"
            Parameter { name: "paneProperties"; type: "bb::cascades::PaneProperties"; isPointer: true }
        }
        Signal {
            name: "peekedAtChanged"
            Parameter { name: "peekedAt"; type: "bool" }
        }
        Signal { name: "peekStarted" }
        Signal { name: "peekEnded" }
        Signal {
            name: "builtInShortcutsEnabledChanged"
            revision: 2
            Parameter { name: "builtInShortcutsEnabled"; type: "bool" }
        }
        Method {
            name: "setBuiltInShortcutsEnabled"
            revision: 2
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetBuiltInShortcutsEnabled"; revision: 2 }
        Method {
            name: "setPaneProperties"
            Parameter { name: "paneProperties"; type: "bb::cascades::PaneProperties"; isPointer: true }
        }
        Method { name: "resetPaneProperties" }
        Method {
            name: "addShortcut"
            Parameter { name: "shortcut"; type: "bb::cascades::AbstractShortcut"; isPointer: true }
        }
        Method {
            name: "removeShortcut"
            type: "bool"
            Parameter { name: "shortcut"; type: "bb::cascades::AbstractShortcut"; isPointer: true }
        }
        Method { name: "removeAllShortcuts" }
        Method { name: "shortcutCount"; type: "int" }
        Method {
            name: "shortcutAt"
            type: "bb::cascades::AbstractShortcut*"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "enableAllShortcuts" }
        Method { name: "disableAllShortcuts" }
        Method { name: "builtInShortcutsEnabled"; revision: 2; type: "bool" }
        Method {
            name: "setBuiltInShortcutEnabled"
            revision: 2
            Parameter { name: "type"; type: "bb::cascades::SystemShortcuts::Type" }
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "addKeyListener"
            Parameter { name: "keyListener"; type: "bb::cascades::KeyListener"; isPointer: true }
        }
        Method {
            name: "removeKeyListener"
            type: "bool"
            Parameter { name: "keyListener"; type: "bb::cascades::KeyListener"; isPointer: true }
        }
        Method { name: "removeAllKeyListeners" }
        Method { name: "keyListenerCount"; type: "int" }
        Method {
            name: "keyListenerAt"
            type: "bb::cascades::KeyListener*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setBuiltInShortcutEnabled"
            revision: 2
            Parameter { name: "type"; type: "int" }
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        name: "bb::cascades::AbstractShortcut"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractShortcut 1.0",
            "bb.cascades/AbstractShortcut 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        isCreatable: false
        Property { name: "enabled"; type: "bool" }
        Property { name: "triggerMode"; revision: 3; type: "bb::cascades::ShortcutTriggerMode::Type" }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "triggerModeChanged"
            revision: 3
            Parameter { name: "newTriggerMode"; type: "bb::cascades::ShortcutTriggerMode::Type" }
        }
        Signal { name: "triggered" }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetEnabled" }
        Method {
            name: "setTriggerMode"
            revision: 3
            Parameter { name: "triggerMode"; type: "bb::cascades::ShortcutTriggerMode::Type" }
        }
        Method { name: "resetTriggerMode"; revision: 3 }
    }
    Component {
        name: "bb::cascades::AbstractTextControl"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/AbstractTextControl 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "text"; type: "string" }
        Property { name: "activeTextHandler"; type: "bb::cascades::ActiveTextHandler"; isPointer: true }
        Property {
            name: "textStyle"
            type: "bb::cascades::TextStyleDefinition"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "content"
            type: "bb::cascades::TextContentProperties"
            isReadonly: true
            isPointer: true
        }
        Property { name: "textFormat"; type: "bb::cascades::TextFormat::Type" }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "activeTextHandlerChanged"
            Parameter { name: "activeTextHandler"; type: "bb::cascades::ActiveTextHandler"; isPointer: true }
        }
        Signal {
            name: "textFormatChanged"
            Parameter { name: "newTextFormat"; type: "bb::cascades::TextFormat::Type" }
        }
        Method {
            name: "setText"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "resetText" }
        Method {
            name: "setTextFormat"
            Parameter { name: "textFormat"; type: "bb::cascades::TextFormat::Type" }
        }
        Method { name: "resetTextFormat" }
        Method {
            name: "setActiveTextHandler"
            Parameter { name: "activeTextHandler"; type: "bb::cascades::ActiveTextHandler"; isPointer: true }
        }
        Method { name: "resetActiveTextHandler" }
    }
    Component {
        name: "bb::cascades::AbstractTextFilter"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/AbstractTextFilter 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::AbstractTextStyleRule"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/AbstractTextStyleRule 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::AbstractTitleBarKindProperties"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/AbstractTitleBarKindProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::AbstractToggleButton"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/AbstractToggleButton 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "checked"; type: "bool" }
        Signal {
            name: "checkedChanged"
            Parameter { name: "checked"; type: "bool" }
        }
        Method {
            name: "setChecked"
            Parameter { name: "checked"; type: "bool" }
        }
        Method { name: "resetChecked" }
    }
    Component {
        name: "bb::cascades::AbstractTransition"
        prototype: "bb::cascades::AbstractAnimation"
        Property { name: "duration"; type: "int" }
        Property { name: "easingCurve"; type: "QVariant" }
        Signal {
            name: "durationChanged"
            Parameter { name: "duration"; type: "int" }
        }
        Signal {
            name: "easingCurveChanged"
            Parameter { name: "easingCurve"; type: "QVariant" }
        }
        Method {
            name: "setDuration"
            Parameter { name: "duration"; type: "int" }
        }
        Method {
            name: "setEasingCurve"
            Parameter { name: "curve"; type: "bb::cascades::EasingCurve" }
        }
        Method { name: "resetDuration" }
        Method { name: "resetEasingCurve" }
    }
    Component {
        name: "bb::cascades::ActionBar"
        prototype: "QObject"
        exports: [
            "bb.cascades/ActionBar 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        attachedType: "bb::cascades::ActionBarAttached"
    }
    Component {
        name: "bb::cascades::ActionBarAttached"
        prototype: "QObject"
        exports: [
            "bb.cascades/ActionBarAttached 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "placement"; type: "bb::cascades::ActionBarPlacement::Type" }
        Signal {
            name: "initializationCompleted"
            Parameter { name: "attachee"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::ActionBarAutoHideBehavior"
        exports: [
            "bb.cascades/ActionBarAutoHideBehavior 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "HideOnScroll": 1,
                "Disabled": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ActionBarFollowKeyboardPolicy"
        exports: [
            "bb.cascades/ActionBarFollowKeyboardPolicy 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Never": 1,
                "Portrait": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ActionBarPlacement"
        exports: [
            "bb.cascades/ActionBarPlacement 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "InOverflow": 1,
                "OnBar": 2,
                "Signature": 3
            }
        }
    }
    Component {
        name: "bb::cascades::ActionItem"
        prototype: "bb::cascades::AbstractActionItem"
        exports: [
            "bb.cascades/ActionItem 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::ActionMenuVisualState"
        exports: [
            "bb.cascades/ActionMenuVisualState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Hidden": 0,
                "VisibleFull": 1,
                "AnimatingToHidden": 2,
                "AnimatingToVisibleFull": 3
            }
        }
    }
    Component {
        name: "bb::cascades::ActionSet"
        defaultProperty: "actions"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/ActionSet 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property {
            name: "actions"
            type: "bb::cascades::AbstractActionItem"
            isList: true
            isReadonly: true
        }
        Property { name: "title"; type: "string" }
        Property { name: "subtitle"; type: "string" }
        Signal {
            name: "actionAdded"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Signal {
            name: "actionRemoved"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "subtitleChanged"
            Parameter { name: "subtitle"; type: "string" }
        }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "string" }
        }
        Method { name: "resetTitle" }
        Method {
            name: "setSubtitle"
            Parameter { name: "subtitle"; type: "string" }
        }
        Method { name: "resetSubtitle" }
        Method {
            name: "add"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Method { name: "count"; type: "int" }
        Method {
            name: "at"
            type: "bb::cascades::AbstractActionItem*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Method { name: "removeAll" }
    }
    Component {
        name: "bb::cascades::ActiveTextHandler"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/ActiveTextHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "triggered"
            Parameter { name: "event"; type: "bb::cascades::ActiveTextTriggeredEvent"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::ActiveTextTriggeredEvent"
        prototype: "bb::cascades::Event"
        exports: [
            "bb.cascades/ActiveTextTriggeredEvent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "text"; type: "string"; isReadonly: true }
        Property { name: "href"; type: "QUrl"; isReadonly: true }
        Method { name: "abort" }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::ActivityIndicator"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/ActivityIndicator 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "running"; type: "bool" }
        Signal { name: "started" }
        Signal { name: "stopped" }
        Signal { name: "stopping" }
        Signal {
            name: "runningChanged"
            Parameter { name: "running"; type: "bool" }
        }
        Method { name: "start" }
        Method { name: "stop" }
        Method {
            name: "setRunning"
            Parameter { name: "running"; type: "bool" }
        }
        Method { name: "resetRunning" }
    }
    Component {
        name: "bb::cascades::AnimationState"
        exports: [
            "bb.cascades/AnimationState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Stopped": 0,
                "Playing": 1,
                "Ended": 2,
                "Started": 3,
                "Stopping": 4
            }
        }
    }
    Component {
        name: "bb::cascades::Application"
        prototype: "bb::Application"
        Property { name: "scene"; type: "bb::cascades::AbstractPane"; isPointer: true }
        Property { name: "cover"; type: "bb::cascades::AbstractCover"; isPointer: true }
        Property { name: "menu"; type: "bb::cascades::Menu"; isPointer: true }
        Property { name: "menuEnabled"; type: "bool" }
        Property { name: "mainWindow"; type: "bb::cascades::Window"; isReadonly: true; isPointer: true }
        Property {
            name: "themeSupport"
            type: "bb::cascades::ThemeSupport"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "menuChanged"
            Parameter { name: "menu"; type: "bb::cascades::Menu"; isPointer: true }
        }
        Signal {
            name: "sceneChanged"
            Parameter { name: "scene"; type: "bb::cascades::AbstractPane"; isPointer: true }
        }
        Signal {
            name: "coverChanged"
            Parameter { name: "cover"; type: "bb::cascades::AbstractCover"; isPointer: true }
        }
        Signal {
            name: "menuEnabledChanged"
            Parameter { name: "menuEnabledChanged"; type: "bool" }
        }
        Method {
            name: "setScene"
            Parameter { name: "scene"; type: "bb::cascades::AbstractPane"; isPointer: true }
        }
        Method {
            name: "setCover"
            Parameter { name: "cover"; type: "bb::cascades::AbstractCover"; isPointer: true }
        }
        Method { name: "resetScene" }
        Method { name: "resetCover" }
        Method {
            name: "setMenu"
            Parameter { name: "menu"; type: "bb::cascades::Menu"; isPointer: true }
        }
        Method { name: "resetMenu" }
        Method {
            name: "setMenuEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetMenuEnabled" }
    }
    Component {
        name: "bb::cascades::ApplicationViewCover"
        prototype: "bb::cascades::AbstractCover"
        exports: [
            "bb.cascades/ApplicationViewCover 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "coverArea"; type: "QRectF" }
        Signal {
            name: "coverAreaChanged"
            Parameter { name: "coverArea"; type: "QRectF" }
        }
        Method {
            name: "setCoverArea"
            Parameter { name: "coverArea"; type: "QRectF" }
        }
        Method { name: "resetCoverArea" }
    }
    Component {
        name: "bb::cascades::ArrayDataModel"
        prototype: "bb::cascades::DataModel"
        exports: [
            "bb.cascades/ArrayDataModel 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Method {
            name: "append"
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "append"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "clear" }
        Method {
            name: "insert"
            Parameter { name: "i"; type: "int" }
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "insert"
            Parameter { name: "i"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "move"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "to"; type: "int" }
        }
        Method {
            name: "removeAt"
            Parameter { name: "i"; type: "int" }
        }
        Method {
            name: "replace"
            Parameter { name: "i"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "swap"
            Parameter { name: "i"; type: "int" }
            Parameter { name: "j"; type: "int" }
        }
        Method {
            name: "childCount"
            type: "int"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "itemType"
            type: "string"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "from"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "isEmpty"; type: "bool" }
        Method { name: "size"; type: "int" }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "i"; type: "int" }
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "i"; type: "int" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
    }
    Component {
        name: "bb::cascades::BaseObject"
        prototype: "QObject"
        exports: [
            "bb.cascades/BaseObject 1.0",
            "bb.cascades/BaseObject 1.1",
            "bb.cascades/BaseObject 1.2"
        ]
        exportMetaObjectRevisions: [
            0,
            0,
            0
        ]
        isCreatable: false
        Property { name: "objectName"; type: "string" }
        Property { name: "parent"; type: "QObject"; isReadonly: true; isPointer: true }
        Signal { name: "creationCompleted" }
        Signal {
            name: "objectNameChanged"
            Parameter { name: "objectName"; type: "string" }
        }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::BrightnessEffect"
        prototype: "bb::cascades::AbstractEffect"
        exports: [
            "bb.cascades/BrightnessEffect 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "brightness"; type: "float" }
        Signal {
            name: "brightnessChanged"
            Parameter { name: "brightness"; type: "float" }
        }
        Method {
            name: "setBrightness"
            Parameter { name: "brightness"; type: "float" }
        }
        Method { name: "resetBrightness" }
    }
    Component {
        name: "bb::cascades::Button"
        prototype: "bb::cascades::AbstractButton"
        exports: [
            "bb.cascades/Button 1.0",
            "bb.cascades/Button 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        Property { name: "appearance"; revision: 3; type: "bb::cascades::ControlAppearance::Type" }
        Property { name: "text"; type: "string" }
        Property { name: "image"; type: "QVariant" }
        Property { name: "imageSource"; type: "QUrl" }
        Property { name: "color"; revision: 3; type: "QVariant" }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourceChanged"
            Parameter { name: "image"; type: "QUrl" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "colorChanged"
            revision: 3
            Parameter { name: "color"; type: "bb::cascades::ColorPaint" }
        }
        Signal {
            name: "colorChanged"
            revision: 3
            Parameter { name: "color"; type: "QVariant" }
        }
        Signal {
            name: "appearanceChanged"
            revision: 3
            Parameter { name: "newAppearance"; type: "bb::cascades::ControlAppearance::Type" }
        }
        Method {
            name: "setText"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "resetText" }
        Method {
            name: "setImage"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetImage" }
        Method {
            name: "setImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSource" }
        Method {
            name: "setColor"
            revision: 3
            Parameter { name: "color"; type: "ColorPaint" }
        }
        Method { name: "resetColor"; revision: 3 }
        Method {
            name: "setAppearance"
            revision: 3
            Parameter { name: "newAppearance"; type: "bb::cascades::ControlAppearance::Type" }
        }
        Method { name: "resetAppearance"; revision: 3 }
    }
    Component {
        name: "bb::cascades::CheckBox"
        prototype: "bb::cascades::AbstractToggleButton"
        exports: [
            "bb.cascades/CheckBox 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "text"; type: "string" }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setText"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "resetText" }
    }
    Component {
        name: "bb::cascades::ChildrenNavigationBehavior"
        exports: [
            "bb.cascades/ChildrenNavigationBehavior 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Continue": 1,
                "Contained": 2,
                "None": 4
            }
        }
    }
    Component {
        name: "bb::cascades::ChromeVisibility"
        exports: [
            "bb.cascades/ChromeVisibility 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Visible": 1,
                "Overlay": 2,
                "Hidden": 3,
                "Compact": 4
            }
        }
    }
    Component {
        name: "bb::cascades::CollapseMode"
        exports: [
            "bb.cascades/CollapseMode 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "UserCollapse": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ColorTheme"
        prototype: "QObject"
        exports: [
            "bb.cascades/ColorTheme 1.0",
            "bb.cascades/ColorTheme 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        isCreatable: false
        Property { name: "style"; type: "bb::cascades::VisualStyle::Type"; isReadonly: true }
        Property { name: "primary"; revision: 3; type: "QVariant"; isReadonly: true }
        Property { name: "primaryBase"; revision: 3; type: "QVariant"; isReadonly: true }
    }
    Component {
        name: "bb::cascades::ComponentA11ySpecialization"
        prototype: "bb::cascades::AbstractA11ySpecialization"
        exports: [
            "bb.cascades/ComponentA11ySpecialization 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "activationRequested"
            Parameter { name: "event"; type: "bb::cascades::A11yComponentActivationEvent"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::ConsumeNavigationEvent"
        exports: [
            "bb.cascades/ConsumeNavigationEvent 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Left": 1,
                "Right": 2,
                "Up": 4,
                "Down": 8,
                "Horizontal": 3,
                "Vertical": 12,
                "Any": 15
            }
        }
        Enum {
            name: "Types"
            values: {
                "None": 0,
                "Left": 1,
                "Right": 2,
                "Up": 4,
                "Down": 8,
                "Horizontal": 3,
                "Vertical": 12,
                "Any": 15
            }
        }
    }
    Component {
        name: "bb::cascades::ConsumeTrackpadEvent"
        exports: [
            "bb.cascades/ConsumeTrackpadEvent 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Left": 1,
                "Right": 2,
                "Up": 4,
                "Down": 8,
                "Horizontal": 3,
                "Vertical": 12,
                "Press": 16,
                "Release": 32,
                "Any": 63
            }
        }
        Enum {
            name: "Types"
            values: {
                "None": 0,
                "Left": 1,
                "Right": 2,
                "Up": 4,
                "Down": 8,
                "Horizontal": 3,
                "Vertical": 12,
                "Press": 16,
                "Release": 32,
                "Any": 63
            }
        }
    }
    Component {
        name: "bb::cascades::Container"
        defaultProperty: "controls"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/Container 1.0",
            "bb.cascades/Container 1.2",
            "bb.cascades/Container 1.3",
            "bb.cascades/Container 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            2,
            3,
            4
        ]
        Property { name: "layout"; type: "bb::cascades::Layout"; isPointer: true }
        Property { name: "controls"; type: "bb::cascades::Control"; isList: true; isReadonly: true }
        Property { name: "clipContentToBounds"; type: "bool" }
        Property { name: "background"; type: "QVariant" }
        Property {
            name: "accessibility"
            revision: 2
            type: "bb::cascades::AbstractA11yObject"
            isPointer: true
        }
        Property {
            name: "navigation"
            revision: 4
            type: "bb::cascades::ContainerNavigation"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "controlAdded"
            Parameter { name: "control"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "controlReplaced"
            Parameter { name: "oldControl"; type: "bb::cascades::Control"; isPointer: true }
            Parameter { name: "newControl"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "controlRemoved"
            Parameter { name: "control"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "controlMoved"
            Parameter { name: "control"; type: "bb::cascades::Control"; isPointer: true }
            Parameter { name: "newIndex"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "layout"; type: "bb::cascades::Layout"; isPointer: true }
        }
        Signal {
            name: "backgroundChanged"
            Parameter { name: "background"; type: "bb::cascades::Paint" }
        }
        Signal {
            name: "backgroundChanged"
            Parameter { name: "background"; type: "QVariant" }
        }
        Signal {
            name: "clipContentToBoundsChanged"
            Parameter { name: "clipContentToBounds"; type: "bool" }
        }
        Signal {
            name: "accessibilityChanged"
            revision: 2
            Parameter { name: "accessibility"; type: "bb::cascades::AbstractA11yObject"; isPointer: true }
        }
        Method {
            name: "setLayout"
            Parameter { name: "layout"; type: "bb::cascades::Layout"; isPointer: true }
        }
        Method { name: "resetLayout" }
        Method {
            name: "setBackground"
            Parameter { name: "paint"; type: "bb::cascades::Paint" }
        }
        Method { name: "resetBackground" }
        Method {
            name: "setClipContentToBounds"
            Parameter { name: "clip"; type: "bool" }
        }
        Method { name: "resetClipContentToBounds" }
        Method {
            name: "setAccessibility"
            revision: 2
            Parameter { name: "accessibility"; type: "bb::cascades::AbstractA11yObject"; isPointer: true }
        }
        Method { name: "resetAccessibility"; revision: 2 }
        Method {
            name: "add"
            Parameter { name: "control"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "control"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "control"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "removeAll" }
        Method {
            name: "replace"
            type: "bb::cascades::Control*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "newControl"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method {
            name: "swap"
            Parameter { name: "indexA"; type: "int" }
            Parameter { name: "indexB"; type: "int" }
        }
        Method {
            name: "at"
            type: "bb::cascades::Control*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "control"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "count"; type: "int" }
    }
    Component {
        name: "bb::cascades::ContainerNavigation"
        prototype: "bb::cascades::Navigation"
        exports: [
            "bb.cascades/ContainerNavigation 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "childrenBehavior"; type: "bb::cascades::ChildrenNavigationBehavior::Type" }
        Signal {
            name: "childrenBehaviorChanged"
            Parameter {
                name: "newChildrenBehavior"
                type: "bb::cascades::ChildrenNavigationBehavior::Type"
            }
        }
        Method {
            name: "setChildrenBehavior"
            Parameter { name: "childrenBehavior"; type: "bb::cascades::ChildrenNavigationBehavior::Type" }
        }
        Method { name: "resetChildrenBehavior" }
    }
    Component {
        name: "bb::cascades::ContentSecurity"
        prototype: "bb::cascades::AbstractContentSecurity"
        exports: [
            "bb.cascades/ContentSecurity 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "hasEnterpriseContent"; type: "bool"; isReadonly: true }
        Property { name: "hasPersonalContent"; type: "bool"; isReadonly: true }
        Property { name: "hasUnknownContent"; type: "bool"; isReadonly: true }
        Signal {
            name: "hasEnterpriseContentChanged"
            Parameter { name: "hasEnterpriseContent"; type: "bool" }
        }
        Signal {
            name: "hasPersonalContentChanged"
            Parameter { name: "hasPersonalContent"; type: "bool" }
        }
        Signal {
            name: "hasUnknownContentChanged"
            Parameter { name: "hasUnknownContent"; type: "bool" }
        }
    }
    Component {
        name: "bb::cascades::ContextMenuHandler"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/ContextMenuHandler 1.0",
            "bb.cascades/ContextMenuHandler 1.2",
            "bb.cascades/ContextMenuHandler 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            2,
            4
        ]
        Property {
            name: "visualState"
            type: "bb::cascades::ContextMenuVisualState::Type"
            isReadonly: true
        }
        Signal {
            name: "populating"
            Parameter { name: "event"; type: "bb::cascades::ContextMenuShowingEvent"; isPointer: true }
        }
        Signal { name: "depopulated"; revision: 4 }
        Signal {
            name: "visualStateChanged"
            Parameter { name: "newVisualState"; type: "bb::cascades::ContextMenuVisualState::Type" }
        }
        Signal {
            name: "showing"
            Parameter { name: "event"; type: "bb::cascades::ContextMenuShowingEvent"; isPointer: true }
        }
        Signal { name: "hiding" }
        Method { name: "closeMenu"; revision: 2 }
    }
    Component {
        name: "bb::cascades::ContextMenuShowingEvent"
        prototype: "bb::cascades::Event"
        exports: [
            "bb.cascades/ContextMenuShowingEvent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "touchX"; type: "float"; isReadonly: true }
        Property { name: "touchY"; type: "float"; isReadonly: true }
        Method { name: "abort" }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::ContextMenuVisualState"
        exports: [
            "bb.cascades/ContextMenuVisualState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Hidden": 0,
                "VisibleCompact": 1,
                "AnimatingToHidden": 2,
                "AnimatingToVisibleCompact": 3
            }
        }
    }
    Component {
        name: "bb::cascades::Control"
        prototype: "bb::cascades::VisualNode"
        exports: [
            "bb.cascades/Control 1.0",
            "bb.cascades/Control 1.2",
            "bb.cascades/Control 1.3",
            "bb.cascades/Control 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            2,
            3,
            4
        ]
        isCreatable: false
        Property { name: "horizontalAlignment"; type: "bb::cascades::HorizontalAlignment::Type" }
        Property { name: "verticalAlignment"; type: "bb::cascades::VerticalAlignment::Type" }
        Property { name: "preferredWidth"; type: "float" }
        Property { name: "preferredWidthSet"; type: "bool"; isReadonly: true }
        Property { name: "preferredHeight"; type: "float" }
        Property { name: "preferredHeightSet"; type: "bool"; isReadonly: true }
        Property { name: "leftPadding"; type: "float" }
        Property { name: "rightPadding"; type: "float" }
        Property { name: "topPadding"; type: "float" }
        Property { name: "bottomPadding"; type: "float" }
        Property { name: "enabled"; type: "bool" }
        Property {
            name: "focusRetentionPolicyFlags"
            type: "bb::cascades::FocusRetentionPolicy::Types"
        }
        Property { name: "focused"; type: "bool"; isReadonly: true }
        Property { name: "focusPolicy"; type: "bb::cascades::FocusPolicy::Type" }
        Property { name: "focusAutoShow"; type: "bb::cascades::FocusAutoShow::Type" }
        Property { name: "locallyFocused"; revision: 4; type: "bool" }
        Property {
            name: "inputRoute"
            type: "bb::cascades::InputRouteProperties"
            isReadonly: true
            isPointer: true
        }
        Property { name: "layoutProperties"; type: "bb::cascades::LayoutProperties"; isPointer: true }
        Property {
            name: "margin"
            revision: 3
            type: "bb::cascades::Spacings"
            isReadonly: true
            isPointer: true
        }
        Property { name: "accessibilityMode"; revision: 2; type: "bb::cascades::A11yMode::Type" }
        Property {
            name: "accessibility"
            revision: 2
            type: "bb::cascades::AbstractA11yObject"
            isReadonly: true
            isPointer: true
        }
        Property { name: "leftMargin"; type: "float" }
        Property { name: "leftMarginSet"; type: "bool"; isReadonly: true }
        Property { name: "rightMargin"; type: "float" }
        Property { name: "rightMarginSet"; type: "bool"; isReadonly: true }
        Property { name: "topMargin"; type: "float" }
        Property { name: "topMarginSet"; type: "bool"; isReadonly: true }
        Property { name: "bottomMargin"; type: "float" }
        Property { name: "bottomMarginSet"; type: "bool"; isReadonly: true }
        Property { name: "minWidth"; type: "float" }
        Property { name: "maxWidth"; type: "float" }
        Property { name: "minHeight"; type: "float" }
        Property { name: "maxHeight"; type: "float" }
        Property {
            name: "contextActions"
            type: "bb::cascades::ActionSet"
            isList: true
            isReadonly: true
        }
        Property {
            name: "contextMenuHandler"
            type: "bb::cascades::ContextMenuHandler"
            isPointer: true
        }
        Property { name: "implicitLayoutAnimationsEnabled"; type: "bool" }
        Property {
            name: "shortcuts"
            type: "bb::cascades::AbstractShortcut"
            isList: true
            isReadonly: true
        }
        Property {
            name: "keyListeners"
            type: "bb::cascades::KeyListener"
            isList: true
            isReadonly: true
        }
        Property { name: "builtInShortcutsEnabled"; revision: 2; type: "bool" }
        Property {
            name: "navigation"
            revision: 4
            type: "bb::cascades::Navigation"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "newHorizontalAlignment"; type: "bb::cascades::HorizontalAlignment::Type" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "newVerticalAlignment"; type: "bb::cascades::VerticalAlignment::Type" }
        }
        Signal {
            name: "preferredWidthChanged"
            Parameter { name: "preferredWidth"; type: "float" }
        }
        Signal {
            name: "preferredWidthSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "preferredHeightChanged"
            Parameter { name: "preferredHeight"; type: "float" }
        }
        Signal {
            name: "preferredHeightSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "leftPaddingChanged"
            Parameter { name: "leftPadding"; type: "float" }
        }
        Signal {
            name: "rightPaddingChanged"
            Parameter { name: "rightPadding"; type: "float" }
        }
        Signal {
            name: "topPaddingChanged"
            Parameter { name: "topPadding"; type: "float" }
        }
        Signal {
            name: "bottomPaddingChanged"
            Parameter { name: "bottomPadding"; type: "float" }
        }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "focusedChanged"
            Parameter { name: "focused"; type: "bool" }
        }
        Signal {
            name: "focusPolicyChanged"
            Parameter { name: "newFocusPolicy"; type: "bb::cascades::FocusPolicy::Type" }
        }
        Signal {
            name: "focusAutoShowChanged"
            Parameter { name: "newFocusAutoShow"; type: "bb::cascades::FocusAutoShow::Type" }
        }
        Signal {
            name: "locallyFocusedChanged"
            revision: 4
            Parameter { name: "newLocallyFocused"; type: "bool" }
        }
        Signal {
            name: "layoutPropertiesChanged"
            Parameter { name: "layoutProperties"; type: "bb::cascades::LayoutProperties"; isPointer: true }
        }
        Signal {
            name: "leftMarginChanged"
            Parameter { name: "leftMargin"; type: "float" }
        }
        Signal {
            name: "leftMarginSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "topMarginChanged"
            Parameter { name: "topMargin"; type: "float" }
        }
        Signal {
            name: "topMarginSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "bottomMarginChanged"
            Parameter { name: "bottomMargin"; type: "float" }
        }
        Signal {
            name: "bottomMarginSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "rightMarginChanged"
            Parameter { name: "rightMargin"; type: "float" }
        }
        Signal {
            name: "rightMarginSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "minWidthChanged"
            Parameter { name: "minWidth"; type: "float" }
        }
        Signal {
            name: "maxWidthChanged"
            Parameter { name: "maxWidth"; type: "float" }
        }
        Signal {
            name: "minHeightChanged"
            Parameter { name: "minHeight"; type: "float" }
        }
        Signal {
            name: "maxHeightChanged"
            Parameter { name: "maxHeight"; type: "float" }
        }
        Signal {
            name: "actionSetAdded"
            Parameter { name: "actionSet"; type: "bb::cascades::ActionSet"; isPointer: true }
        }
        Signal {
            name: "actionSetRemoved"
            Parameter { name: "actionSet"; type: "bb::cascades::ActionSet"; isPointer: true }
        }
        Signal {
            name: "contextMenuHandlerChanged"
            Parameter {
                name: "contextMenuHandler"
                type: "bb::cascades::ContextMenuHandler"
                isPointer: true
            }
        }
        Signal {
            name: "focusRetentionPolicyFlagsChanged"
            Parameter { name: "policy"; type: "bb::cascades::FocusRetentionPolicy::Types" }
        }
        Signal {
            name: "implicitLayoutAnimationsEnabledChanged"
            Parameter { name: "implicitLayoutAnimationsEnabled"; type: "bool" }
        }
        Signal {
            name: "builtInShortcutsEnabledChanged"
            revision: 2
            Parameter { name: "builtInShortcutsEnabled"; type: "bool" }
        }
        Signal {
            name: "accessibilityModeChanged"
            revision: 2
            Parameter { name: "newAccessibilityMode"; type: "bb::cascades::A11yMode::Type" }
        }
        Method {
            name: "setBuiltInShortcutsEnabled"
            revision: 2
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setHorizontalAlignment"
            Parameter { name: "horizontalAlignment"; type: "bb::cascades::HorizontalAlignment::Type" }
        }
        Method { name: "resetHorizontalAlignment" }
        Method {
            name: "setVerticalAlignment"
            Parameter { name: "verticalAlignment"; type: "bb::cascades::VerticalAlignment::Type" }
        }
        Method { name: "resetVerticalAlignment" }
        Method {
            name: "setPreferredWidth"
            Parameter { name: "preferredWidth"; type: "float" }
        }
        Method { name: "resetPreferredWidth" }
        Method {
            name: "setFocusRetentionPolicyFlags"
            Parameter { name: "policy"; type: "bb::cascades::FocusRetentionPolicy::Types" }
        }
        Method { name: "resetFocusRetentionPolicyFlags" }
        Method {
            name: "setPreferredHeight"
            Parameter { name: "preferredHeight"; type: "float" }
        }
        Method { name: "resetPreferredHeight" }
        Method {
            name: "setPreferredSize"
            Parameter { name: "preferredWidth"; type: "float" }
            Parameter { name: "preferredHeight"; type: "float" }
        }
        Method { name: "resetPreferredSize" }
        Method {
            name: "setLeftPadding"
            Parameter { name: "leftPadding"; type: "float" }
        }
        Method { name: "resetLeftPadding" }
        Method {
            name: "setRightPadding"
            Parameter { name: "rightPadding"; type: "float" }
        }
        Method { name: "resetRightPadding" }
        Method {
            name: "setTopPadding"
            Parameter { name: "topPadding"; type: "float" }
        }
        Method { name: "resetTopPadding" }
        Method {
            name: "setBottomPadding"
            Parameter { name: "bottomPadding"; type: "float" }
        }
        Method { name: "resetBottomPadding" }
        Method {
            name: "setFocusPolicy"
            Parameter { name: "focusPolicy"; type: "bb::cascades::FocusPolicy::Type" }
        }
        Method { name: "resetFocusPolicy" }
        Method {
            name: "setFocusAutoShow"
            Parameter { name: "focusAutoShow"; type: "bb::cascades::FocusAutoShow::Type" }
        }
        Method { name: "resetFocusAutoShow" }
        Method {
            name: "setLocallyFocused"
            revision: 4
            Parameter { name: "locallyFocused"; type: "bool" }
        }
        Method { name: "resetLocallyFocused"; revision: 4 }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetEnabled" }
        Method {
            name: "setLayoutProperties"
            Parameter { name: "layoutProperties"; type: "bb::cascades::LayoutProperties"; isPointer: true }
        }
        Method { name: "resetLayoutProperties" }
        Method {
            name: "setLeftMargin"
            Parameter { name: "leftMargin"; type: "float" }
        }
        Method { name: "resetLeftMargin" }
        Method {
            name: "setRightMargin"
            Parameter { name: "rightMargin"; type: "float" }
        }
        Method { name: "resetRightMargin" }
        Method {
            name: "setTopMargin"
            Parameter { name: "topMargin"; type: "float" }
        }
        Method { name: "resetTopMargin" }
        Method {
            name: "setBottomMargin"
            Parameter { name: "bottomMargin"; type: "float" }
        }
        Method { name: "resetBottomMargin" }
        Method {
            name: "setMinWidth"
            Parameter { name: "minWidth"; type: "float" }
        }
        Method { name: "resetMinWidth" }
        Method {
            name: "setMaxWidth"
            Parameter { name: "maxWidth"; type: "float" }
        }
        Method { name: "resetMaxWidth" }
        Method {
            name: "setMinHeight"
            Parameter { name: "minHeight"; type: "float" }
        }
        Method { name: "resetMinHeight" }
        Method {
            name: "setMaxHeight"
            Parameter { name: "maxHeight"; type: "float" }
        }
        Method { name: "resetMaxHeight" }
        Method { name: "requestFocus" }
        Method { name: "loseFocus" }
        Method { name: "resetContextMenuHandler" }
        Method {
            name: "setImplicitLayoutAnimationsEnabled"
            Parameter { name: "enable"; type: "bool" }
        }
        Method { name: "resetImplicitLayoutAnimationsEnabled" }
        Method {
            name: "setAccessibilityMode"
            revision: 2
            Parameter { name: "accessibilityMode"; type: "bb::cascades::A11yMode::Type" }
        }
        Method { name: "resetAccessibilityMode"; revision: 2 }
        Method {
            name: "addShortcut"
            Parameter { name: "shortcut"; type: "bb::cascades::AbstractShortcut"; isPointer: true }
        }
        Method {
            name: "removeShortcut"
            type: "bool"
            Parameter { name: "shortcut"; type: "bb::cascades::AbstractShortcut"; isPointer: true }
        }
        Method { name: "removeAllShortcuts" }
        Method { name: "shortcutCount"; type: "int" }
        Method {
            name: "shortcutAt"
            type: "bb::cascades::AbstractShortcut*"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "enableAllShortcuts" }
        Method { name: "disableAllShortcuts" }
        Method { name: "builtInShortcutsEnabled"; revision: 2; type: "bool" }
        Method { name: "resetBuiltInShortcutsEnabled"; revision: 2 }
        Method {
            name: "setBuiltInShortcutEnabled"
            revision: 2
            Parameter { name: "type"; type: "bb::cascades::SystemShortcuts::Type" }
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "addKeyListener"
            Parameter { name: "keyListener"; type: "bb::cascades::KeyListener"; isPointer: true }
        }
        Method {
            name: "removeKeyListener"
            type: "bool"
            Parameter { name: "keyListener"; type: "bb::cascades::KeyListener"; isPointer: true }
        }
        Method { name: "removeAllKeyListeners" }
        Method { name: "keyListenerCount"; type: "int" }
        Method {
            name: "keyListenerAt"
            type: "bb::cascades::KeyListener*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setBuiltInShortcutEnabled"
            revision: 2
            Parameter { name: "type"; type: "int" }
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        name: "bb::cascades::ControlAppearance"
        exports: [
            "bb.cascades/ControlAppearance 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Plain": 1,
                "Primary": 2
            }
        }
    }
    Component {
        name: "bb::cascades::CoverDetailLevel"
        exports: [
            "bb.cascades/CoverDetailLevel 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "High": 1,
                "Medium": 2
            }
        }
    }
    Component {
        name: "bb::cascades::CustomA11yObject"
        defaultProperty: "specializations"
        prototype: "bb::cascades::AbstractA11yObject"
        exports: [
            "bb.cascades/CustomA11yObject 1.2",
            "bb.cascades/CustomA11yObject 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        Property { name: "role"; type: "bb::cascades::A11yRole::Type" }
        Property { name: "extendedRole"; revision: 3; type: "string" }
        Property {
            name: "state"
            type: "bb::cascades::A11yStateHolder"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "specializations"
            type: "bb::cascades::AbstractA11ySpecialization"
            isList: true
            isReadonly: true
        }
        Signal {
            name: "specializationAdded"
            Parameter {
                name: "specialization"
                type: "bb::cascades::AbstractA11ySpecialization"
                isPointer: true
            }
        }
        Signal {
            name: "specializationRemoved"
            Parameter {
                name: "specialization"
                type: "bb::cascades::AbstractA11ySpecialization"
                isPointer: true
            }
        }
        Method {
            name: "addSpecialization"
            Parameter {
                name: "specialization"
                type: "bb::cascades::AbstractA11ySpecialization"
                isPointer: true
            }
        }
        Method {
            name: "removeSpecialization"
            type: "bool"
            Parameter {
                name: "specialization"
                type: "bb::cascades::AbstractA11ySpecialization"
                isPointer: true
            }
        }
    }
    Component { name: "bb::cascades::CustomControl"; prototype: "bb::cascades::Control" }
    Component {
        name: "bb::cascades::CustomListItem"
        defaultProperty: "content"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/CustomListItem 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        Property { name: "highlightAppearance"; type: "bb::cascades::HighlightAppearance::Type" }
        Property { name: "dividerVisible"; type: "bool" }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "dividerVisibleChanged"
            Parameter { name: "dividerVisible"; type: "bool" }
        }
        Method {
            name: "setContent"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "resetContent" }
        Method {
            name: "setDividerVisible"
            Parameter { name: "dividerVisible"; type: "bool" }
        }
        Method { name: "resetDividerVisible" }
    }
    Component {
        name: "bb::cascades::DataModel"
        prototype: "QObject"
        exports: [
            "bb.cascades/DataModel 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Signal {
            name: "itemAdded"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Signal {
            name: "itemUpdated"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Signal {
            name: "itemRemoved"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Signal {
            name: "itemMoved"
            Parameter { name: "fromIndexPath"; type: "QVariantList" }
            Parameter { name: "toIndexPath"; type: "QVariantList" }
        }
        Signal {
            name: "itemsChanged"
            Parameter { name: "eChangeType"; type: "bb::cascades::DataModelChangeType::Type" }
            Parameter { name: "indexMapper"; type: "QSharedPointer<bb::cascades::DataModel::IndexMapper>" }
        }
        Signal {
            name: "itemsChanged"
            Parameter { name: "eChangeType"; type: "bb::cascades::DataModelChangeType::Type" }
        }
        Signal { name: "itemsChanged" }
        Method {
            name: "childCount"
            type: "int"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "itemType"
            type: "string"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
    }
    Component {
        name: "bb::cascades::DataModelChangeType"
        exports: [
            "bb.cascades/DataModelChangeType 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Init": 0,
                "AddRemove": 1,
                "Update": 2
            }
        }
    }
    Component {
        name: "bb::cascades::DateTimePicker"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/DateTimePicker 1.0",
            "bb.cascades/DateTimePicker 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        Property { name: "title"; type: "string" }
        Property { name: "mode"; type: "bb::cascades::DateTimePickerMode::Type" }
        Property { name: "value"; type: "QDateTime" }
        Property { name: "minimum"; type: "QDateTime" }
        Property { name: "maximum"; type: "QDateTime" }
        Property { name: "minuteInterval"; type: "int" }
        Property { name: "expanded"; type: "bool" }
        Property { name: "kind"; revision: 4; type: "bb::cascades::PickerKind::Type" }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "modeChanged"
            Parameter { name: "newMode"; type: "bb::cascades::DateTimePickerMode::Type" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "QDateTime" }
        }
        Signal {
            name: "minimumChanged"
            Parameter { name: "value"; type: "QDateTime" }
        }
        Signal {
            name: "maximumChanged"
            Parameter { name: "value"; type: "QDateTime" }
        }
        Signal {
            name: "minuteIntervalChanged"
            Parameter { name: "minuteInterval"; type: "int" }
        }
        Signal {
            name: "expandedChanged"
            Parameter { name: "expanded"; type: "bool" }
        }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "string" }
        }
        Method { name: "resetTitle" }
        Method {
            name: "setMode"
            Parameter { name: "mode"; type: "bb::cascades::DateTimePickerMode::Type" }
        }
        Method { name: "resetMode" }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QDateTime" }
        }
        Method { name: "resetValue" }
        Method {
            name: "setMinimum"
            Parameter { name: "value"; type: "QDateTime" }
        }
        Method { name: "resetMinimum" }
        Method {
            name: "setMaximum"
            Parameter { name: "value"; type: "QDateTime" }
        }
        Method { name: "resetMaximum" }
        Method {
            name: "setMinuteInterval"
            Parameter { name: "minuteInterval"; type: "int" }
        }
        Method { name: "resetMinuteInterval" }
        Method {
            name: "setExpanded"
            Parameter { name: "expanded"; type: "bool" }
        }
        Method { name: "resetExpanded" }
        Method {
            name: "dateFromTime"
            type: "QDateTime"
            Parameter { name: "time"; type: "QTime" }
        }
    }
    Component {
        name: "bb::cascades::DateTimePickerMode"
        exports: [
            "bb.cascades/DateTimePickerMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Time": 0,
                "Date": 1,
                "DateTime": 2,
                "Timer": 3
            }
        }
    }
    Component {
        name: "bb::cascades::Delegate"
        defaultProperty: "component"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/Delegate 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "component"; type: "QDeclarativeComponent"; isPointer: true }
        Property {
            name: "sourceComponent"
            type: "bb::cascades::QmlComponentDefinition"
            isPointer: true
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "active"; type: "bool" }
        Property { name: "object"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Signal {
            name: "componentChanged"
            Parameter { name: "component"; type: "QDeclarativeComponent"; isPointer: true }
        }
        Signal {
            name: "sourceComponentChanged"
            Parameter {
                name: "sourceComponent"
                type: "bb::cascades::QmlComponentDefinition"
                isPointer: true
            }
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "activeChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "objectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "errorMessageChanged"
            Parameter { name: "errorMessage"; type: "string" }
        }
    }
    Component {
        name: "bb::cascades::DeleteActionItem"
        prototype: "bb::cascades::AbstractActionItem"
        exports: [
            "bb.cascades/DeleteActionItem 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::DevelopmentSupport"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/DevelopmentSupport 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "assetsChanged"
            Parameter { name: "mainQmlFile"; type: "QUrl" }
        }
    }
    Component {
        name: "bb::cascades::DeviceShortcut"
        prototype: "bb::cascades::AbstractShortcut"
        exports: [
            "bb.cascades/DeviceShortcut 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "type"; type: "bb::cascades::DeviceShortcuts::Type" }
    }
    Component {
        name: "bb::cascades::DeviceShortcuts"
        exports: [
            "bb.cascades/DeviceShortcuts 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "SendTap": 1,
                "MenuTap": 2,
                "BackTap": 3,
                "EndTap": 4,
                "MenuLongPress": 5
            }
        }
    }
    Component {
        name: "bb::cascades::Dialog"
        defaultProperty: "content"
        prototype: "bb::cascades::AbstractDialog"
        exports: [
            "bb.cascades/Dialog 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method {
            name: "setContent"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "resetContent" }
    }
    Component {
        name: "bb::cascades::DisplayDirection"
        exports: [
            "bb.cascades/DisplayDirection 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "North": 0,
                "East": 90,
                "South": 180,
                "West": 270
            }
        }
    }
    Component {
        name: "bb::cascades::Divider"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/Divider 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::DockLayout"
        prototype: "bb::cascades::Layout"
        exports: [
            "bb.cascades/DockLayout 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::DoubleTapEvent"
        prototype: "bb::cascades::AbstractGestureEvent"
        exports: [
            "bb.cascades/DoubleTapEvent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::DoubleTapHandler"
        prototype: "bb::cascades::GestureHandler"
        exports: [
            "bb.cascades/DoubleTapHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "doubleTapped"
            Parameter { name: "event"; type: "bb::cascades::DoubleTapEvent"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::DropDown"
        defaultProperty: "options"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/DropDown 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "title"; type: "string" }
        Property { name: "selectedIndex"; type: "int" }
        Property { name: "selectedOption"; type: "bb::cascades::Option"; isPointer: true }
        Property { name: "selectedOptionSet"; type: "bool"; isReadonly: true }
        Property { name: "selectedValue"; type: "QVariant"; isReadonly: true }
        Property { name: "options"; type: "bb::cascades::Option"; isList: true; isReadonly: true }
        Property { name: "expanded"; type: "bool" }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "expandedChanged"
            Parameter { name: "expanded"; type: "bool" }
        }
        Signal {
            name: "selectedIndexChanged"
            Parameter { name: "selectedIndex"; type: "int" }
        }
        Signal {
            name: "selectedOptionChanged"
            Parameter { name: "selectedOption"; type: "bb::cascades::Option"; isPointer: true }
        }
        Signal {
            name: "selectedOptionSetChanged"
            Parameter { name: "selectedOptionSet"; type: "bool" }
        }
        Signal {
            name: "selectedValueChanged"
            Parameter { name: "selectedValue"; type: "QVariant" }
        }
        Signal {
            name: "optionAdded"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Signal {
            name: "optionRemoved"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "string" }
        }
        Method { name: "resetTitle" }
        Method {
            name: "setSelectedIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "resetSelectedIndex" }
        Method {
            name: "setSelectedOption"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "resetSelectedOption" }
        Method {
            name: "setExpanded"
            Parameter { name: "expanded"; type: "bool" }
        }
        Method { name: "resetExpanded" }
        Method {
            name: "add"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "removeAll" }
        Method {
            name: "at"
            type: "bb::cascades::Option*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "count"; type: "int" }
    }
    Component {
        name: "bb::cascades::Event"
        prototype: "QObject"
        exports: [
            "bb.cascades/Event 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "timestamp"; type: "QTime"; isReadonly: true }
        Property {
            name: "propagationPhase"
            type: "bb::cascades::PropagationPhase::Type"
            isReadonly: true
        }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::EventReaction"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/EventReaction 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::ExpandMode"
        exports: [
            "bb.cascades/ExpandMode 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "AutoExpand": 1,
                "UserExpand": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ExpandableView"
        defaultProperty: "content"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/ExpandableView 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        Property { name: "maxCollapsedHeight"; type: "float" }
        Property { name: "expanded"; type: "bool" }
        Property { name: "collapseMode"; type: "bb::cascades::CollapseMode::Type" }
        Property { name: "expandMode"; type: "bb::cascades::ExpandMode::Type" }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "maxCollapsedHeightChanged"
            Parameter { name: "maxCollapsedHeight"; type: "float" }
        }
        Signal {
            name: "expandedChanged"
            Parameter { name: "expanded"; type: "bool" }
        }
        Signal {
            name: "expandModeChanged"
            Parameter { name: "newExpandMode"; type: "bb::cascades::ExpandMode::Type" }
        }
        Signal {
            name: "collapseModeChanged"
            Parameter { name: "newCollapseMode"; type: "bb::cascades::CollapseMode::Type" }
        }
        Method {
            name: "setContent"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "resetContent" }
        Method {
            name: "setMaxCollapsedHeight"
            Parameter { name: "maxHeight"; type: "float" }
        }
        Method { name: "resetMaxCollapsedHeight" }
        Method {
            name: "setExpanded"
            Parameter { name: "expanded"; type: "bool" }
        }
        Method { name: "resetExpanded" }
        Method {
            name: "setCollapseMode"
            Parameter { name: "newMode"; type: "bb::cascades::CollapseMode::Type" }
        }
        Method { name: "resetCollapseMode" }
        Method {
            name: "setExpandMode"
            Parameter { name: "newMode"; type: "bb::cascades::ExpandMode::Type" }
        }
        Method { name: "resetExpandMode" }
    }
    Component {
        name: "bb::cascades::FadeTransition"
        prototype: "bb::cascades::AbstractTransition"
        exports: [
            "bb.cascades/FadeTransition 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "toOpacity"; type: "float" }
        Property { name: "toOpacitySet"; type: "bool"; isReadonly: true }
        Property { name: "fromOpacity"; type: "float" }
        Property { name: "fromOpacitySet"; type: "bool"; isReadonly: true }
        Signal {
            name: "fromOpacityChanged"
            Parameter { name: "fromOpacity"; type: "float" }
        }
        Signal {
            name: "toOpacityChanged"
            Parameter { name: "toOpacity"; type: "float" }
        }
        Method {
            name: "setFromOpacity"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetFromOpacity" }
        Method {
            name: "setToOpacity"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetToOpacity" }
    }
    Component {
        name: "bb::cascades::FlickMode"
        exports: [
            "bb.cascades/FlickMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "Momentum": 2,
                "SingleItem": 3
            }
        }
    }
    Component {
        name: "bb::cascades::FlowListLayout"
        prototype: "bb::cascades::ListLayout"
        exports: [
            "bb.cascades/FlowListLayout 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "orientation"; type: "bb::cascades::LayoutOrientation::Type" }
        Property { name: "headerMode"; type: "bb::cascades::ListHeaderMode::Type" }
        Signal {
            name: "orientationChanged"
            Parameter { name: "newOrientation"; type: "bb::cascades::LayoutOrientation::Type" }
        }
        Signal {
            name: "headerModeChanged"
            Parameter { name: "newHeaderMode"; type: "bb::cascades::ListHeaderMode::Type" }
        }
        Method {
            name: "setOrientation"
            Parameter { name: "orientation"; type: "bb::cascades::LayoutOrientation::Type" }
        }
        Method { name: "resetOrientation" }
        Method {
            name: "setHeaderMode"
            Parameter { name: "newHeaderMode"; type: "bb::cascades::ListHeaderMode::Type" }
        }
        Method { name: "resetHeaderMode" }
    }
    Component {
        name: "bb::cascades::FlowListLayoutProperties"
        prototype: "bb::cascades::LayoutProperties"
        exports: [
            "bb.cascades/FlowListLayoutProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "aspectRatio"; type: "float" }
        Property { name: "fillRatio"; type: "float" }
        Signal {
            name: "aspectRatioChanged"
            Parameter { name: "aspectRatio"; type: "float" }
        }
        Signal {
            name: "fillRatioChanged"
            Parameter { name: "fillRatio"; type: "float" }
        }
        Method {
            name: "setAspectRatio"
            Parameter { name: "_aspectRatio"; type: "float" }
        }
        Method { name: "resetAspectRatio" }
        Method {
            name: "setFillRatio"
            Parameter { name: "_fillRatio"; type: "float" }
        }
        Method { name: "resetFillRatio" }
    }
    Component {
        name: "bb::cascades::FocusAutoShow"
        exports: [
            "bb.cascades/FocusAutoShow 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1
            }
        }
    }
    Component {
        name: "bb::cascades::FocusHighlightEffect"
        prototype: "bb::cascades::AbstractEffect"
        exports: [
            "bb.cascades/FocusHighlightEffect 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "baseColor"; type: "QVariant" }
        Property { name: "style"; type: "bb::cascades::FocusHighlightEffectStyle::Type" }
        Signal {
            name: "baseColorChanged"
            Parameter { name: "baseColor"; type: "bb::cascades::ColorPaint" }
        }
        Signal {
            name: "baseColorChanged"
            Parameter { name: "color"; type: "QVariant" }
        }
        Signal {
            name: "styleChanged"
            Parameter { name: "newStyle"; type: "bb::cascades::FocusHighlightEffectStyle::Type" }
        }
        Method {
            name: "setBaseColor"
            Parameter { name: "color"; type: "ColorPaint" }
        }
        Method { name: "resetBaseColor" }
        Method {
            name: "setStyle"
            Parameter { name: "style"; type: "bb::cascades::FocusHighlightEffectStyle::Type" }
        }
        Method { name: "resetStyle" }
    }
    Component {
        name: "bb::cascades::FocusHighlightEffectStyle"
        exports: [
            "bb.cascades/FocusHighlightEffectStyle 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Flat": 1,
                "LinearGradient": 2
            }
        }
    }
    Component {
        name: "bb::cascades::FocusPolicy"
        exports: [
            "bb.cascades/FocusPolicy 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "Touch": 2,
                "Key": 4,
                "KeyAndTouch": 6
            }
        }
    }
    Component {
        name: "bb::cascades::FocusRetentionPolicy"
        exports: [
            "bb.cascades/FocusRetentionPolicy 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "LoseOnScroll": 1,
                "LoseToFocusable": 2,
                "LoseToNonFocusable": 4
            }
        }
        Enum {
            name: "Types"
            values: {
                "Default": 0,
                "LoseOnScroll": 1,
                "LoseToFocusable": 2,
                "LoseToNonFocusable": 4
            }
        }
    }
    Component {
        name: "bb::cascades::FontFaceRule"
        prototype: "bb::cascades::AbstractTextStyleRule"
        exports: [
            "bb.cascades/FontFaceRule 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "source"; type: "QUrl" }
        Property { name: "fontFamily"; type: "string" }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "fontFamilyChanged"
            Parameter { name: "fontFamily"; type: "string" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetSource" }
        Method {
            name: "setFontFamily"
            Parameter { name: "fontFamily"; type: "string" }
        }
        Method { name: "resetFontFamily" }
    }
    Component {
        name: "bb::cascades::FontSize"
        exports: [
            "bb.cascades/FontSize 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "PointValue": 1,
                "PercentageValue": 2,
                "XXSmall": 70,
                "XSmall": 80,
                "Small": 90,
                "Medium": 100,
                "Large": 110,
                "XLarge": 120,
                "XXLarge": 130
            }
        }
    }
    Component {
        name: "bb::cascades::FontStyle"
        exports: [
            "bb.cascades/FontStyle 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Normal": 1,
                "Italic": 2
            }
        }
    }
    Component {
        name: "bb::cascades::FontWeight"
        exports: [
            "bb.cascades/FontWeight 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Normal": 1,
                "Bold": 2,
                "W100": 3,
                "W200": 4,
                "W300": 5,
                "W400": 6,
                "W500": 7,
                "W600": 8,
                "W700": 9,
                "W800": 10,
                "W900": 11
            }
        }
    }
    Component {
        name: "bb::cascades::ForeignWindowControl"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/ForeignWindowControl 1.0",
            "bb.cascades/ForeignWindowControl 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        Property { name: "windowHandle"; type: "QVariant" }
        Property { name: "windowGroup"; type: "string" }
        Property { name: "windowId"; type: "string" }
        Property { name: "boundToWindow"; type: "bool"; isReadonly: true }
        Property { name: "updatedProperties"; type: "bb::cascades::WindowProperty::Types" }
        Property { name: "keyInputForwardingEnabled"; type: "bool" }
        Property { name: "forwardedInputTypes"; revision: 4; type: "int" }
        Signal {
            name: "windowAttached"
            Parameter { name: "windowHandle"; type: "screen_window_t" }
            Parameter { name: "windowGroup"; type: "string" }
            Parameter { name: "windowId"; type: "string" }
        }
        Signal {
            name: "windowAttached"
            Parameter { name: "windowHandle"; type: "QVariant" }
            Parameter { name: "windowGroup"; type: "string" }
            Parameter { name: "windowId"; type: "string" }
        }
        Signal { name: "windowDetached" }
        Signal {
            name: "windowHandleChanged"
            Parameter { name: "windowHandle"; type: "screen_window_t" }
        }
        Signal {
            name: "windowHandleChanged"
            Parameter { name: "windowHandle"; type: "QVariant" }
        }
        Signal {
            name: "windowGroupChanged"
            Parameter { name: "windowGroup"; type: "string" }
        }
        Signal {
            name: "windowIdChanged"
            Parameter { name: "windowId"; type: "string" }
        }
        Signal {
            name: "boundToWindowChanged"
            Parameter { name: "boundToWindow"; type: "bool" }
        }
        Signal {
            name: "updatedPropertiesChanged"
            Parameter { name: "newUpdatedProperties"; type: "bb::cascades::WindowProperty::Types" }
        }
        Signal {
            name: "keyInputForwardingEnabledChanged"
            Parameter { name: "keyInputForwardingEnabled"; type: "bool" }
        }
        Signal {
            name: "forwardedInputTypesChanged"
            revision: 4
            Parameter { name: "inputTypes"; type: "int" }
        }
        Signal {
            name: "controlFrameChanged"
            Parameter { name: "frame"; type: "QRectF" }
        }
        Method { name: "resetUpdatedProperties" }
        Method { name: "resetKeyInputForwardingEnabled" }
        Method { name: "resetForwardedInputTypes"; revision: 4 }
        Method { name: "unbindFromWindow" }
        Method { name: "showContextMenu" }
    }
    Component {
        name: "bb::cascades::FreeFormTitleBarKindProperties"
        defaultProperty: "content"
        prototype: "bb::cascades::AbstractTitleBarKindProperties"
        exports: [
            "bb.cascades/FreeFormTitleBarKindProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        Property {
            name: "expandableArea"
            type: "bb::cascades::TitleBarExpandableArea"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "contentChanged"
            Parameter { name: "newContent"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method {
            name: "setContent"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "resetContent" }
    }
    Component {
        name: "bb::cascades::GestureHandler"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/GestureHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::GridLayout"
        prototype: "bb::cascades::Layout"
        exports: [
            "bb.cascades/GridLayout 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "columnCount"; type: "int" }
        Signal {
            name: "columnCountChanged"
            Parameter { name: "columnCount"; type: "int" }
        }
        Method {
            name: "setColumnCount"
            Parameter { name: "columnCount"; type: "int" }
        }
        Method { name: "resetColumnCount" }
    }
    Component {
        name: "bb::cascades::GridListLayout"
        prototype: "bb::cascades::ListLayout"
        exports: [
            "bb.cascades/GridListLayout 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "orientation"; type: "bb::cascades::LayoutOrientation::Type" }
        Property { name: "columnCount"; type: "int" }
        Property { name: "cellAspectRatio"; type: "float" }
        Property { name: "horizontalCellSpacing"; type: "float" }
        Property { name: "verticalCellSpacing"; type: "float" }
        Property { name: "spacingBeforeHeader"; type: "float" }
        Property { name: "spacingAfterHeader"; type: "float" }
        Property { name: "headerMode"; type: "bb::cascades::ListHeaderMode::Type" }
        Signal {
            name: "orientationChanged"
            Parameter { name: "newOrientation"; type: "bb::cascades::LayoutOrientation::Type" }
        }
        Signal {
            name: "columnCountChanged"
            Parameter { name: "columnCount"; type: "int" }
        }
        Signal {
            name: "cellAspectRatioChanged"
            Parameter { name: "cellAspectRatio"; type: "float" }
        }
        Signal {
            name: "horizontalCellSpacingChanged"
            Parameter { name: "horizontalCellSpacing"; type: "float" }
        }
        Signal {
            name: "verticalCellSpacingChanged"
            Parameter { name: "verticalCellSpacing"; type: "float" }
        }
        Signal {
            name: "spacingBeforeHeaderChanged"
            Parameter { name: "spacingBeforeHeader"; type: "float" }
        }
        Signal {
            name: "spacingAfterHeaderChanged"
            Parameter { name: "spacingAfterHeader"; type: "float" }
        }
        Signal {
            name: "headerModeChanged"
            Parameter { name: "newHeaderMode"; type: "bb::cascades::ListHeaderMode::Type" }
        }
        Method {
            name: "setOrientation"
            Parameter { name: "orientation"; type: "bb::cascades::LayoutOrientation::Type" }
        }
        Method { name: "resetOrientation" }
        Method {
            name: "setColumnCount"
            Parameter { name: "columnCount"; type: "int" }
        }
        Method { name: "resetColumnCount" }
        Method {
            name: "setCellAspectRatio"
            Parameter { name: "ratio"; type: "float" }
        }
        Method { name: "resetCellAspectRatio" }
        Method {
            name: "setHorizontalCellSpacing"
            Parameter { name: "spacing"; type: "float" }
        }
        Method { name: "resetHorizontalCellSpacing" }
        Method {
            name: "setVerticalCellSpacing"
            Parameter { name: "spacing"; type: "float" }
        }
        Method { name: "resetVerticalCellSpacing" }
        Method {
            name: "setSpacingBeforeHeader"
            Parameter { name: "spacing"; type: "float" }
        }
        Method { name: "resetSpacingBeforeHeader" }
        Method {
            name: "setSpacingAfterHeader"
            Parameter { name: "spacing"; type: "float" }
        }
        Method { name: "resetSpacingAfterHeader" }
        Method {
            name: "setHeaderMode"
            Parameter { name: "newHeaderMode"; type: "bb::cascades::ListHeaderMode::Type" }
        }
        Method { name: "resetHeaderMode" }
    }
    Component {
        name: "bb::cascades::GroupAnimation"
        defaultProperty: "animations"
        prototype: "bb::cascades::AbstractAnimation"
        Property {
            name: "animations"
            type: "bb::cascades::AbstractAnimation"
            isList: true
            isReadonly: true
        }
    }
    Component {
        name: "bb::cascades::GroupDataModel"
        prototype: "bb::cascades::DataModel"
        exports: [
            "bb.cascades/GroupDataModel 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "grouping"; type: "bb::cascades::ItemGrouping::Type" }
        Property { name: "sortedAscending"; type: "bool" }
        Property { name: "sortingKeys"; type: "QStringList" }
        Signal {
            name: "groupingChanged"
            Parameter { name: "newGrouping"; type: "bb::cascades::ItemGrouping::Type" }
        }
        Signal {
            name: "sortedAscendingChanged"
            Parameter { name: "sortedAscending"; type: "bool" }
        }
        Signal {
            name: "sortingKeysChanged"
            Parameter { name: "sortingKeys"; type: "QStringList" }
        }
        Method {
            name: "setGrouping"
            Parameter { name: "itemGrouping"; type: "bb::cascades::ItemGrouping::Type" }
        }
        Method {
            name: "setSortedAscending"
            Parameter { name: "ascending"; type: "bool" }
        }
        Method {
            name: "setSortingKeys"
            Parameter { name: "keys"; type: "QStringList" }
        }
        Method {
            name: "insert"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "insert"
            Parameter { name: "item"; type: "QVariantMap" }
        }
        Method {
            name: "insertList"
            Parameter { name: "items"; type: "QVariantList" }
        }
        Method {
            name: "removeAt"
            type: "bool"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "item"; type: "QVariantMap" }
        }
        Method {
            name: "updateItem"
            type: "bool"
            Parameter { name: "indexPath"; type: "QVariantList" }
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "updateItem"
            type: "bool"
            Parameter { name: "indexPath"; type: "QVariantList" }
            Parameter { name: "item"; type: "QVariantMap" }
        }
        Method { name: "clear" }
        Method {
            name: "insertList"
            Parameter { name: "items"; type: "QList<QVariantMap>" }
        }
        Method { name: "isEmpty"; type: "bool" }
        Method { name: "size"; type: "int" }
        Method { name: "first"; type: "QVariantList" }
        Method { name: "last"; type: "QVariantList" }
        Method {
            name: "before"
            type: "QVariantList"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "after"
            type: "QVariantList"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "find"
            type: "QVariantList"
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "find"
            type: "QVariantList"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "find"
            type: "QVariantList"
            Parameter { name: "matchMap"; type: "QVariantMap" }
        }
        Method {
            name: "findExact"
            type: "QVariantList"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "findExact"
            type: "QVariantList"
            Parameter { name: "matchMap"; type: "QVariantMap" }
        }
        Method {
            name: "lowerBound"
            type: "QVariantList"
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "lowerBound"
            type: "QVariantList"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "lowerBound"
            type: "QVariantList"
            Parameter { name: "matchMap"; type: "QVariantMap" }
        }
        Method {
            name: "upperBound"
            type: "QVariantList"
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "upperBound"
            type: "QVariantList"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "upperBound"
            type: "QVariantList"
            Parameter { name: "matchMap"; type: "QVariantMap" }
        }
    }
    Component {
        name: "bb::cascades::Header"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/Header 1.0",
            "bb.cascades/Header 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        Property { name: "mode"; revision: 3; type: "bb::cascades::HeaderMode::Type" }
        Property { name: "title"; type: "string" }
        Property { name: "subtitle"; type: "string" }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "subtitleChanged"
            Parameter { name: "subtitle"; type: "string" }
        }
        Signal {
            name: "modeChanged"
            revision: 3
            Parameter { name: "newMode"; type: "bb::cascades::HeaderMode::Type" }
        }
        Signal { name: "clicked"; revision: 3 }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "string" }
        }
        Method { name: "resetTitle" }
        Method {
            name: "setSubtitle"
            Parameter { name: "subtitle"; type: "string" }
        }
        Method { name: "resetSubtitle" }
        Method { name: "resetMode"; revision: 3 }
        Method {
            name: "setMode"
            revision: 3
            Parameter { name: "newMode"; type: "bb::cascades::HeaderMode::Type" }
        }
    }
    Component {
        name: "bb::cascades::HeaderMode"
        exports: [
            "bb.cascades/HeaderMode 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Plain": 1,
                "Interactive": 2
            }
        }
    }
    Component {
        name: "bb::cascades::HelpActionItem"
        prototype: "bb::cascades::AbstractActionItem"
        exports: [
            "bb.cascades/HelpActionItem 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::HighlightAppearance"
        exports: [
            "bb.cascades/HighlightAppearance 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Full": 1,
                "Frame": 2,
                "None": 3
            }
        }
    }
    Component {
        name: "bb::cascades::HorizontalAlignment"
        exports: [
            "bb.cascades/HorizontalAlignment 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Left": 0,
                "Right": 1,
                "Center": 2,
                "Fill": 3
            }
        }
    }
    Component {
        name: "bb::cascades::ImageAnimator"
        prototype: "bb::cascades::BaseObject"
        Property { name: "animatedImage"; type: "QVariant" }
        Property { name: "started"; type: "bool" }
        Property { name: "running"; type: "bool"; isReadonly: true }
        Property { name: "playing"; type: "bool" }
        Signal {
            name: "animatedImageChanged"
            Parameter { name: "animatedImage"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "startedChanged"
            Parameter { name: "started"; type: "bool" }
        }
        Signal {
            name: "runningChanged"
            Parameter { name: "running"; type: "bool" }
        }
        Signal {
            name: "playingChanged"
            Parameter { name: "playing"; type: "bool" }
        }
        Signal {
            name: "animatedImageChanged"
            Parameter { name: "animatedImage"; type: "QVariant" }
        }
        Method {
            name: "setAnimatedImage"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetAnimatedImage" }
        Method {
            name: "setStarted"
            Parameter { name: "started"; type: "bool" }
        }
        Method { name: "resetStarted" }
        Method { name: "start" }
        Method { name: "stop" }
        Method {
            name: "stopAt"
            Parameter { name: "anchor"; type: "bb::cascades::ImageAnimatorAnchor::Type" }
            Parameter { name: "seekMode"; type: "bb::cascades::ImageAnimatorSeekMode::Type" }
        }
        Method {
            name: "stopAt"
            Parameter { name: "anchor"; type: "bb::cascades::ImageAnimatorAnchor::Type" }
        }
        Method {
            name: "setPlaying"
            Parameter { name: "playing"; type: "bool" }
        }
        Method { name: "resetPlaying" }
    }
    Component {
        name: "bb::cascades::ImageAnimatorAnchor"
        exports: [
            "bb.cascades/ImageAnimatorAnchor 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "FirstFrame": 1,
                "CurrentFrame": 2,
                "LastFrame": 3
            }
        }
    }
    Component {
        name: "bb::cascades::ImageAnimatorSeekMode"
        exports: [
            "bb.cascades/ImageAnimatorSeekMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Immediate": 1,
                "Animate": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ImageButton"
        prototype: "bb::cascades::AbstractButton"
        exports: [
            "bb.cascades/ImageButton 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "defaultImage"; type: "QVariant" }
        Property { name: "defaultImageSource"; type: "QUrl" }
        Property { name: "pressedImage"; type: "QVariant" }
        Property { name: "pressedImageSource"; type: "QUrl" }
        Property { name: "disabledImage"; type: "QVariant" }
        Property { name: "disabledImageSource"; type: "QUrl" }
        Signal {
            name: "defaultImageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "defaultImageSourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "pressedImageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "pressedImageSourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "disabledImageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "disabledImageSourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "defaultImageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "pressedImageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "disabledImageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Method {
            name: "setDefaultImage"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetDefaultImage" }
        Method {
            name: "setDefaultImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetDefaultImageSource" }
        Method {
            name: "setPressedImage"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetPressedImage" }
        Method {
            name: "setPressedImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetPressedImageSource" }
        Method {
            name: "setDisabledImage"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetDisabledImage" }
        Method {
            name: "setDisabledImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetDisabledImageSource" }
    }
    Component {
        name: "bb::cascades::ImageFocusedEffect"
        exports: [
            "bb.cascades/ImageFocusedEffect 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "TextColor": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ImagePaintDefinition"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/ImagePaintDefinition 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "repeatPattern"; type: "bb::cascades::RepeatPattern::Type" }
        Property { name: "imageSource"; type: "QUrl" }
        Property { name: "image"; type: "QVariant" }
        Property { name: "imagePaint"; type: "QVariant"; isReadonly: true }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "imagePaintChanged"
            Parameter { name: "imagePaint"; type: "bb::cascades::ImagePaint" }
        }
        Signal {
            name: "imagePaintChanged"
            Parameter { name: "imagePaint"; type: "QVariant" }
        }
        Signal {
            name: "imageSourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "repeatPatternChanged"
            Parameter { name: "newRepeatPattern"; type: "bb::cascades::RepeatPattern::Type" }
        }
        Method {
            name: "setRepeatPattern"
            Parameter { name: "pattern"; type: "bb::cascades::RepeatPattern::Type" }
        }
        Method { name: "resetRepeatPattern" }
        Method { name: "resetImage" }
        Method {
            name: "setImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSource" }
    }
    Component {
        name: "bb::cascades::ImageToggleButton"
        prototype: "bb::cascades::AbstractToggleButton"
        exports: [
            "bb.cascades/ImageToggleButton 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "imageDefault"; type: "QVariant" }
        Property { name: "imageSourceDefault"; type: "QUrl" }
        Property { name: "imageChecked"; type: "QVariant" }
        Property { name: "imageSourceChecked"; type: "QUrl" }
        Property { name: "imageDisabledUnchecked"; type: "QVariant" }
        Property { name: "imageSourceDisabledUnchecked"; type: "QUrl" }
        Property { name: "imageDisabledChecked"; type: "QVariant" }
        Property { name: "imageSourceDisabledChecked"; type: "QUrl" }
        Property { name: "imagePressedUnchecked"; type: "QVariant" }
        Property { name: "imageSourcePressedUnchecked"; type: "QUrl" }
        Property { name: "imagePressedChecked"; type: "QVariant" }
        Property { name: "imageSourcePressedChecked"; type: "QUrl" }
        Signal {
            name: "imageDefaultChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourceDefaultChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imageDefaultChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "imageCheckedChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourceCheckedChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imageCheckedChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "imageDisabledUncheckedChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourceDisabledUncheckedChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imageDisabledUncheckedChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "imageDisabledCheckedChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourceDisabledCheckedChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imageDisabledCheckedChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "imagePressedUncheckedChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourcePressedUncheckedChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imagePressedUncheckedChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "imagePressedCheckedChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourcePressedCheckedChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imagePressedCheckedChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Method {
            name: "setImageDefault"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetImageDefault" }
        Method {
            name: "setImageSourceDefault"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSourceDefault" }
        Method {
            name: "setImageChecked"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetImageChecked" }
        Method {
            name: "setImageSourceChecked"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSourceChecked" }
        Method {
            name: "setImageDisabledUnchecked"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetImageDisabledUnchecked" }
        Method {
            name: "setImageSourceDisabledUnchecked"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSourceDisabledUnchecked" }
        Method {
            name: "setImageDisabledChecked"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetImageDisabledChecked" }
        Method {
            name: "setImageSourceDisabledChecked"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSourceDisabledChecked" }
        Method {
            name: "setImagePressedUnchecked"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetImagePressedUnchecked" }
        Method {
            name: "setImageSourcePressedUnchecked"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSourcePressedUnchecked" }
        Method {
            name: "setImagePressedChecked"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetImagePressedChecked" }
        Method {
            name: "setImageSourcePressedChecked"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSourcePressedChecked" }
    }
    Component {
        name: "bb::cascades::ImageTracker"
        prototype: "bb::cascades::ResourceTracker"
        exports: [
            "bb.cascades/ImageTracker 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "image"; type: "QVariant" }
        Property { name: "imageSource"; type: "QUrl" }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "nineSliceMarginLeft"; type: "int"; isReadonly: true }
        Property { name: "nineSliceMarginTop"; type: "int"; isReadonly: true }
        Property { name: "nineSliceMarginRight"; type: "int"; isReadonly: true }
        Property { name: "nineSliceMarginBottom"; type: "int"; isReadonly: true }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "imageSourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "sizeChanged"
            Parameter { name: "width"; type: "int" }
            Parameter { name: "height"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "width"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "height"; type: "int" }
        }
        Signal {
            name: "nineSliceMarginsChanged"
            Parameter { name: "left"; type: "int" }
            Parameter { name: "right"; type: "int" }
            Parameter { name: "top"; type: "int" }
            Parameter { name: "bottom"; type: "int" }
        }
        Signal {
            name: "nineSliceMarginLeftChanged"
            Parameter { name: "margin"; type: "int" }
        }
        Signal {
            name: "nineSliceMarginTopChanged"
            Parameter { name: "margin"; type: "int" }
        }
        Signal {
            name: "nineSliceMarginRightChanged"
            Parameter { name: "margin"; type: "int" }
        }
        Signal {
            name: "nineSliceMarginBottomChanged"
            Parameter { name: "margin"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::ImageView"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/ImageView 1.0",
            "bb.cascades/ImageView 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        Property { name: "image"; type: "QVariant" }
        Property { name: "imageSource"; type: "QUrl" }
        Property { name: "scalingMethod"; type: "bb::cascades::ScalingMethod::Type" }
        Property { name: "loadEffect"; type: "bb::cascades::ImageViewLoadEffect::Type" }
        Property { name: "filterColor"; revision: 3; type: "QVariant" }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourceChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "scalingMethodChanged"
            Parameter { name: "newScalingMethod"; type: "bb::cascades::ScalingMethod::Type" }
        }
        Signal {
            name: "loadEffectChanged"
            Parameter { name: "newLoadEffect"; type: "bb::cascades::ImageViewLoadEffect::Type" }
        }
        Signal {
            name: "filterColorChanged"
            revision: 3
            Parameter { name: "filterColor"; type: "bb::cascades::ColorPaint" }
        }
        Signal {
            name: "filterColorChanged"
            revision: 3
            Parameter { name: "filterColor"; type: "QVariant" }
        }
        Method {
            name: "setImage"
            Parameter { name: "image"; type: "Image" }
        }
        Method { name: "resetImage" }
        Method {
            name: "setImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSource" }
        Method {
            name: "setScalingMethod"
            Parameter { name: "scalingMethod"; type: "bb::cascades::ScalingMethod::Type" }
        }
        Method { name: "resetScalingMethod" }
        Method {
            name: "setLoadEffect"
            Parameter { name: "loadEffect"; type: "bb::cascades::ImageViewLoadEffect::Type" }
        }
        Method { name: "resetLoadEffect" }
        Method {
            name: "setFilterColor"
            revision: 3
            Parameter { name: "filterColor"; type: "bb::cascades::ColorPaint" }
        }
        Method {
            name: "setFilterColor"
            revision: 3
            Parameter { name: "filterColor"; type: "QVariant" }
        }
        Method { name: "resetFilterColor"; revision: 3 }
    }
    Component {
        name: "bb::cascades::ImageViewLoadEffect"
        exports: [
            "bb.cascades/ImageViewLoadEffect 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "DefaultDeferred": 1,
                "None": 2,
                "Subtle": 3,
                "FadeZoom": 4
            }
        }
    }
    Component {
        name: "bb::cascades::InputRouteProperties"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/InputRouteProperties 1.0",
            "bb.cascades/InputRouteProperties 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        Property { name: "primaryKeyTarget"; type: "bool" }
        Property { name: "keysIgnoreFocusInSubtree"; revision: 4; type: "bool" }
        Signal {
            name: "primaryKeyTargetChanged"
            Parameter { name: "primaryKeyTarget"; type: "bool" }
        }
        Signal {
            name: "keysIgnoreFocusInSubtreeChanged"
            revision: 4
            Parameter { name: "keysIgnoreFocusInSubtree"; type: "bool" }
        }
        Method {
            name: "setPrimaryKeyTarget"
            Parameter { name: "primaryKeyTarget"; type: "bool" }
        }
        Method { name: "resetPrimaryKeyTarget" }
        Method {
            name: "setKeysIgnoreFocusInSubtree"
            revision: 4
            Parameter { name: "keysIgnoreFocusInSubtree"; type: "bool" }
        }
        Method { name: "resetKeysIgnoreFocusInSubtree"; revision: 4 }
    }
    Component {
        name: "bb::cascades::InputSource"
        exports: [
            "bb.cascades/InputSource 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Touch": 0,
                "Trackpad": 1
            }
        }
    }
    Component {
        name: "bb::cascades::InputType"
        exports: [
            "bb.cascades/InputType 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Keyboard": 1,
                "Pointer": 2,
                "Joystick": 4,
                "Touch": 8
            }
        }
    }
    Component {
        name: "bb::cascades::Invocation"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/Invocation 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "query"; type: "bb::cascades::InvokeQuery"; isPointer: true }
        Signal { name: "armed" }
        Signal { name: "finished" }
        Method {
            name: "trigger"
            Parameter { name: "invokeActionId"; type: "string" }
        }
    }
    Component {
        name: "bb::cascades::InvokeActionItem"
        prototype: "bb::cascades::AbstractActionItem"
        exports: [
            "bb.cascades/InvokeActionItem 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "query"; type: "bb::cascades::InvokeQuery"; isReadonly: true; isPointer: true }
        Property { name: "handler"; type: "bb::cascades::InvokeHandler"; isPointer: true }
        Property { name: "data"; type: "QVariant" }
        Property { name: "metadata"; type: "QVariantMap" }
        Property { name: "state"; type: "bb::cascades::InvokeState::Type"; isReadonly: true }
        Signal {
            name: "dataChanged"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal {
            name: "dataChangedQml"
            Parameter { name: "data"; type: "QVariant" }
        }
        Signal {
            name: "metadataChanged"
            Parameter { name: "metadata"; type: "QVariantMap" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "newState"; type: "bb::cascades::InvokeState::Type" }
        }
        Signal {
            name: "handlerChanged"
            Parameter { name: "handler"; type: "const bb::cascades::InvokeHandler"; isPointer: true }
        }
        Signal {
            name: "handlerChanged"
            Parameter { name: "handler"; type: "bb::cascades::InvokeHandler"; isPointer: true }
        }
        Signal {
            name: "finished"
            Parameter { name: "newState"; type: "bb::cascades::InvokeState::Type" }
        }
        Method {
            name: "setData"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method { name: "resetData" }
        Method {
            name: "setInvocationData"
            Parameter { name: "invocationData"; type: "QByteArray" }
        }
        Method { name: "resetInvocationData" }
        Method {
            name: "setMetadata"
            Parameter { name: "metadata"; type: "QVariantMap" }
        }
        Method { name: "resetMetadata" }
        Method {
            name: "setHandler"
            Parameter { name: "pHandler"; type: "bb::cascades::InvokeHandler"; isPointer: true }
        }
        Method { name: "resetHandler" }
    }
    Component {
        name: "bb::cascades::InvokeHandler"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/InvokeHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal { name: "invoking" }
        Method { name: "confirm" }
        Method { name: "cancel" }
    }
    Component {
        name: "bb::cascades::InvokeQuery"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/InvokeQuery 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "mimeType"; type: "string" }
        Property { name: "uri"; type: "QUrl" }
        Property { name: "fileTransferMode"; type: "bb::system::FileTransferMode::Type" }
        Property { name: "perimeter"; type: "bb::system::SecurityPerimeter::Type" }
        Property { name: "data"; type: "QVariant" }
        Property { name: "metadata"; type: "QVariantMap" }
        Property { name: "invokeActionId"; type: "string" }
        Property { name: "invokeTargetId"; type: "string" }
        Property { name: "invokerIncluded"; type: "bool" }
        Signal {
            name: "mimeTypeChanged"
            Parameter { name: "mimeType"; type: "string" }
        }
        Signal {
            name: "uriChanged"
            Parameter { name: "uri"; type: "QUrl" }
        }
        Signal {
            name: "fileTransferModeChanged"
            Parameter { name: "newFileTransferMode"; type: "bb::system::FileTransferMode::Type" }
        }
        Signal {
            name: "perimeterChanged"
            Parameter { name: "newPerimeter"; type: "bb::system::SecurityPerimeter::Type" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal {
            name: "metadataChanged"
            Parameter { name: "metadata"; type: "QVariantMap" }
        }
        Signal {
            name: "dataChangedQml"
            Parameter { name: "data"; type: "QVariant" }
        }
        Signal {
            name: "invokeActionIdChanged"
            Parameter { name: "invokeActionId"; type: "string" }
        }
        Signal {
            name: "invokeTargetIdChanged"
            Parameter { name: "invokeTargetId"; type: "string" }
        }
        Signal {
            name: "invokerIncludedChanged"
            Parameter { name: "invokerIncluded"; type: "bool" }
        }
        Signal { name: "queryChanged" }
        Method {
            name: "setMimeType"
            Parameter { name: "mimeType"; type: "string" }
        }
        Method {
            name: "setUri"
            Parameter { name: "uri"; type: "QUrl" }
        }
        Method {
            name: "setFileTransferMode"
            Parameter { name: "mode"; type: "bb::system::FileTransferMode::Type" }
        }
        Method {
            name: "setPerimeter"
            Parameter { name: "perimeter"; type: "bb::system::SecurityPerimeter::Type" }
        }
        Method {
            name: "setData"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "setInvokeActionId"
            Parameter { name: "invokeActionId"; type: "string" }
        }
        Method {
            name: "setInvokeTargetId"
            Parameter { name: "invokeTargetId"; type: "string" }
        }
        Method {
            name: "setInvokerIncluded"
            Parameter { name: "invokerIncluded"; type: "bool" }
        }
        Method { name: "updateQuery" }
    }
    Component {
        name: "bb::cascades::InvokeState"
        exports: [
            "bb.cascades/InvokeState 1.0",
            "bb.cascades/InvokeState 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Unknown": 0,
                "Querying": 1,
                "Selecting": 2,
                "Invoking": 3,
                "Invoked": 4,
                "Cancelled": 5,
                "Error": 6
            }
        }
    }
    Component {
        name: "bb::cascades::ItemGrouping"
        exports: [
            "bb.cascades/ItemGrouping 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "ByFirstChar": 1,
                "ByFullValue": 2
            }
        }
    }
    Component {
        name: "bb::cascades::JavaScriptWorld"
        exports: [
            "bb.cascades/JavaScriptWorld 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Normal": 0,
                "Isolated": 1
            }
        }
    }
    Component {
        name: "bb::cascades::KeyEvent"
        prototype: "bb::cascades::Event"
        exports: [
            "bb.cascades/KeyEvent 1.0",
            "bb.cascades/KeyEvent 1.2"
        ]
        exportMetaObjectRevisions: [
            0,
            2
        ]
        isCreatable: false
        Property { name: "keycap"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int"; isReadonly: true }
        Property { name: "unicode"; revision: 2; type: "string"; isReadonly: true }
        Property { name: "duration"; revision: 2; type: "int"; isReadonly: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "altPressed"; type: "bool"; isReadonly: true }
        Property { name: "shiftPressed"; type: "bool"; isReadonly: true }
        Property { name: "ctrlPressed"; type: "bool"; isReadonly: true }
        Method {
            name: "toUnicode"
            revision: 2
            type: "string"
            Parameter { name: "modifiers"; type: "bb::cascades::KeyModifier::Types" }
        }
        Method {
            name: "toUnicode"
            revision: 2
            type: "string"
            Parameter { name: "modifiers"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::KeyLayout"
        exports: [
            "bb.cascades/KeyLayout 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Text": 1,
                "Url": 2,
                "EmailAddress": 3,
                "NumbersAndPunctuation": 4,
                "PhoneNumber": 5,
                "Pin": 6,
                "Alphanumeric": 7,
                "SimPin": 8,
                "Number": 9,
                "Contact": 10
            }
        }
    }
    Component {
        name: "bb::cascades::KeyListener"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/KeyListener 1.0",
            "bb.cascades/KeyListener 1.2"
        ]
        exportMetaObjectRevisions: [
            0,
            2
        ]
        Signal {
            name: "keyEvent"
            Parameter { name: "event"; type: "bb::cascades::KeyEvent"; isPointer: true }
        }
        Signal {
            name: "keyPressed"
            Parameter { name: "event"; type: "bb::cascades::KeyEvent"; isPointer: true }
        }
        Signal {
            name: "keyReleased"
            Parameter { name: "event"; type: "bb::cascades::KeyEvent"; isPointer: true }
        }
        Signal {
            name: "keyLongPressed"
            revision: 2
            Parameter { name: "event"; type: "bb::cascades::KeyEvent"; isPointer: true }
        }
        Signal {
            name: "keyLongReleased"
            revision: 2
            Parameter { name: "event"; type: "bb::cascades::KeyEvent"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::KeyModifier"
        exports: [
            "bb.cascades/KeyModifier 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Shift": 1,
                "Ctrl": 2,
                "Alt": 4
            }
        }
        Enum {
            name: "Types"
            values: {
                "None": 0,
                "Shift": 1,
                "Ctrl": 2,
                "Alt": 4
            }
        }
    }
    Component {
        name: "bb::cascades::Label"
        prototype: "bb::cascades::AbstractTextControl"
        exports: [
            "bb.cascades/Label 1.0",
            "bb.cascades/Label 1.2"
        ]
        exportMetaObjectRevisions: [
            0,
            2
        ]
        Property { name: "multiline"; type: "bool" }
        Property {
            name: "autoSize"
            type: "bb::cascades::LabelAutoSizeProperties"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "textFit"
            revision: 2
            type: "bb::cascades::LabelTextFitProperties"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "multilineChanged"
            Parameter { name: "multiline"; type: "bool" }
        }
        Method {
            name: "setMultiline"
            Parameter { name: "multiline"; type: "bool" }
        }
        Method { name: "resetMultiline" }
    }
    Component {
        name: "bb::cascades::LabelAutoSizeProperties"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/LabelAutoSizeProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "maxLineCount"; type: "int" }
        Signal {
            name: "maxLineCountChanged"
            Parameter { name: "maxLineCount"; type: "int" }
        }
        Method {
            name: "setMaxLineCount"
            Parameter { name: "maxLineCount"; type: "int" }
        }
        Method { name: "resetMaxLineCount" }
    }
    Component {
        name: "bb::cascades::LabelTextFitMode"
        exports: [
            "bb.cascades/LabelTextFitMode 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Standard": 1,
                "FitToBounds": 2
            }
        }
    }
    Component {
        name: "bb::cascades::LabelTextFitProperties"
        prototype: "bb::cascades::TextFitProperties"
        exports: [
            "bb.cascades/LabelTextFitProperties 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "mode"; type: "bb::cascades::LabelTextFitMode::Type" }
        Signal {
            name: "modeChanged"
            Parameter { name: "newMode"; type: "bb::cascades::LabelTextFitMode::Type" }
        }
        Method {
            name: "setMode"
            Parameter { name: "mode"; type: "bb::cascades::LabelTextFitMode::Type" }
        }
        Method { name: "resetMode" }
    }
    Component {
        name: "bb::cascades::Layout"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/Layout 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::LayoutOrientation"
        exports: [
            "bb.cascades/LayoutOrientation 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "TopToBottom": 0,
                "LeftToRight": 1,
                "RightToLeft": 2,
                "BottomToTop": 3
            }
        }
    }
    Component {
        name: "bb::cascades::LayoutProperties"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/LayoutProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::LayoutUpdateHandler"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/LayoutUpdateHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "layoutFrame"; type: "QRectF"; isReadonly: true }
        Signal {
            name: "layoutFrameChanged"
            Parameter { name: "layoutFrame"; type: "QRectF" }
        }
    }
    Component {
        name: "bb::cascades::ListHeaderMode"
        exports: [
            "bb.cascades/ListHeaderMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Standard": 1,
                "Overlay": 2,
                "Sticky": 3,
                "StickyOverlay": 4
            }
        }
    }
    Component {
        name: "bb::cascades::ListItemAttachmentHost"
        prototype: "QObject"
        exports: [
            "bb.cascades/ListItem 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        attachedType: "bb::cascades::QmlListViewAttached"
    }
    Component {
        name: "bb::cascades::ListItemComponent"
        defaultProperty: "content"
        prototype: "QObject"
        exports: [
            "bb.cascades/ListItemComponent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "type"; type: "string" }
        Property { name: "content"; type: "QDeclarativeComponent"; isPointer: true }
        Signal {
            name: "typeChanged"
            Parameter { name: "type"; type: "string" }
        }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "QDeclarativeComponent"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::ListItemProvider"
        prototype: "QObject"
        exports: [
            "bb.cascades/ListItemProvider 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Signal { name: "itemUpdatesNeeded" }
    }
    Component {
        name: "bb::cascades::ListLayout"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/ListLayout 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::ListScrollStateHandler"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/ListScrollStateHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "scrolling"; type: "bool"; isReadonly: true }
        Property { name: "atBeginning"; type: "bool"; isReadonly: true }
        Property { name: "atEnd"; type: "bool"; isReadonly: true }
        Property { name: "firstVisibleItem"; type: "QVariantList"; isReadonly: true }
        Signal {
            name: "scrollingChanged"
            Parameter { name: "scrolling"; type: "bool" }
        }
        Signal {
            name: "atBeginningChanged"
            Parameter { name: "atBeginning"; type: "bool" }
        }
        Signal {
            name: "atEndChanged"
            Parameter { name: "atEnd"; type: "bool" }
        }
        Signal {
            name: "firstVisibleItemChanged"
            Parameter { name: "firstVisibleItem"; type: "QVariantList" }
        }
    }
    Component {
        name: "bb::cascades::ListView"
        prototype: "bb::cascades::Control"
        exports: [
        ]
        exportMetaObjectRevisions: [
        ]
        Property { name: "layout"; type: "bb::cascades::ListLayout"; isPointer: true }
        Property { name: "dataModel"; type: "bb::cascades::DataModel"; isPointer: true }
        Property { name: "listItemProvider"; type: "bb::cascades::ListItemProvider"; isPointer: true }
        Property { name: "rootIndexPath"; type: "QVariantList" }
        Property { name: "snapMode"; type: "bb::cascades::SnapMode::Type" }
        Property { name: "flickMode"; type: "bb::cascades::FlickMode::Type" }
        Property { name: "stickToEdgePolicy"; type: "bb::cascades::ListViewStickToEdgePolicy::Type" }
        Property {
            name: "multiSelectHandler"
            type: "bb::cascades::MultiSelectHandler"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "multiSelectAction"
            type: "bb::cascades::MultiSelectActionItem"
            isPointer: true
        }
        Property { name: "scrollIndicatorMode"; type: "bb::cascades::ScrollIndicatorMode::Type" }
        Property { name: "leadingVisual"; type: "bb::cascades::VisualNode"; isPointer: true }
        Property { name: "leadingVisualSnapThreshold"; type: "float" }
        Property { name: "bufferedScrollingEnabled"; type: "bool" }
        Property { name: "scrollRole"; type: "bb::cascades::ScrollRole::Type" }
        Property {
            name: "rearrangeHandler"
            revision: 3
            type: "bb::cascades::RearrangeHandler"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "scrollRoleChanged"
            Parameter { name: "newScrollRole"; type: "bb::cascades::ScrollRole::Type" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "layout"; type: "bb::cascades::ListLayout"; isPointer: true }
        }
        Signal {
            name: "dataModelChanged"
            Parameter { name: "dataModel"; type: "bb::cascades::DataModel"; isPointer: true }
        }
        Signal {
            name: "listItemProviderChanged"
            Parameter { name: "listItemProvider"; type: "bb::cascades::ListItemProvider"; isPointer: true }
        }
        Signal {
            name: "rootIndexPathChanged"
            Parameter { name: "rootIndexPath"; type: "QVariantList" }
        }
        Signal {
            name: "scrollIndicatorModeChanged"
            Parameter { name: "newScrollIndicatorMode"; type: "bb::cascades::ScrollIndicatorMode::Type" }
        }
        Signal {
            name: "snapModeChanged"
            Parameter { name: "newSnapMode"; type: "bb::cascades::SnapMode::Type" }
        }
        Signal {
            name: "flickModeChanged"
            Parameter { name: "newFlickMode"; type: "bb::cascades::FlickMode::Type" }
        }
        Signal {
            name: "stickToEdgePolicyChanged"
            Parameter {
                name: "newStickToEdgePolicy"
                type: "bb::cascades::ListViewStickToEdgePolicy::Type"
            }
        }
        Signal {
            name: "multiSelectActionChanged"
            Parameter {
                name: "multiSelectAction"
                type: "bb::cascades::MultiSelectActionItem"
                isPointer: true
            }
        }
        Signal {
            name: "activationChanged"
            Parameter { name: "indexPath"; type: "QVariantList" }
            Parameter { name: "active"; type: "bool" }
        }
        Signal { name: "selectionChangeStarted"; revision: 4 }
        Signal { name: "selectionChangeEnded"; revision: 4 }
        Signal {
            name: "selectionChanged"
            Parameter { name: "indexPath"; type: "QVariantList" }
            Parameter { name: "selected"; type: "bool" }
        }
        Signal {
            name: "triggered"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Signal {
            name: "leadingVisualChanged"
            Parameter { name: "pLeadingVisual"; type: "bb::cascades::VisualNode"; isPointer: true }
        }
        Signal {
            name: "leadingVisualSnapThresholdChanged"
            Parameter { name: "leadingVisualSnapThreshold"; type: "float" }
        }
        Signal {
            name: "bufferedScrollingEnabledChanged"
            Parameter { name: "bEnabled"; type: "bool" }
        }
        Method {
            name: "setLayout"
            Parameter { name: "layout"; type: "bb::cascades::ListLayout"; isPointer: true }
        }
        Method { name: "resetLayout" }
        Method {
            name: "setDataModel"
            Parameter { name: "pDataModel"; type: "bb::cascades::DataModel"; isPointer: true }
        }
        Method { name: "resetDataModel" }
        Method {
            name: "setListItemProvider"
            Parameter { name: "pItemProvider"; type: "bb::cascades::ListItemProvider"; isPointer: true }
        }
        Method { name: "resetListItemProvider" }
        Method { name: "resetListItemTypeMapper" }
        Method {
            name: "setRootIndexPath"
            Parameter { name: "rootIndexPath"; type: "QVariantList" }
        }
        Method { name: "resetRootIndexPath" }
        Method {
            name: "setSnapMode"
            Parameter { name: "mode"; type: "bb::cascades::SnapMode::Type" }
        }
        Method { name: "resetSnapMode" }
        Method {
            name: "setFlickMode"
            Parameter { name: "mode"; type: "bb::cascades::FlickMode::Type" }
        }
        Method { name: "resetFlickMode" }
        Method {
            name: "setStickToEdgePolicy"
            Parameter { name: "policy"; type: "bb::cascades::ListViewStickToEdgePolicy::Type" }
        }
        Method { name: "resetStickToEdgePolicy" }
        Method {
            name: "setMultiSelectAction"
            Parameter {
                name: "multiSelectAction"
                type: "bb::cascades::MultiSelectActionItem"
                isPointer: true
            }
        }
        Method { name: "resetMultiSelectAction" }
        Method {
            name: "setScrollIndicatorMode"
            Parameter { name: "mode"; type: "bb::cascades::ScrollIndicatorMode::Type" }
        }
        Method { name: "resetScrollIndicatorMode" }
        Method {
            name: "select"
            Parameter { name: "indexPath"; type: "QVariantList" }
            Parameter { name: "select"; type: "bool" }
        }
        Method {
            name: "select"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "toggleSelection"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method { name: "clearSelection" }
        Method { name: "selectAll" }
        Method {
            name: "scroll"
            Parameter { name: "offset"; type: "float" }
            Parameter { name: "scrollAnimation"; type: "bb::cascades::ScrollAnimation::Type" }
        }
        Method {
            name: "scroll"
            Parameter { name: "offset"; type: "float" }
        }
        Method {
            name: "scrollToItem"
            Parameter { name: "indexPath"; type: "QVariantList" }
            Parameter { name: "scrollAnimation"; type: "bb::cascades::ScrollAnimation::Type" }
        }
        Method {
            name: "scrollToItem"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method {
            name: "scrollToPosition"
            Parameter { name: "position"; type: "bb::cascades::ScrollPosition::Type" }
            Parameter { name: "scrollAnimation"; type: "bb::cascades::ScrollAnimation::Type" }
        }
        Method {
            name: "scrollToPosition"
            Parameter { name: "position"; type: "bb::cascades::ScrollPosition::Type" }
        }
        Method {
            name: "scroll"
            Parameter { name: "offset"; type: "float" }
            Parameter { name: "scrollAnimation"; type: "int" }
        }
        Method {
            name: "scrollToItem"
            Parameter { name: "indexPath"; type: "QVariantList" }
            Parameter { name: "scrollAnimation"; type: "int" }
        }
        Method {
            name: "scrollToPosition"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "scrollAnimation"; type: "int" }
        }
        Method { name: "resetLeadingVisual" }
        Method {
            name: "setLeadingVisual"
            Parameter { name: "pLeadingVisual"; type: "bb::cascades::VisualNode"; isPointer: true }
        }
        Method { name: "resetLeadingVisualSnapThreshold" }
        Method {
            name: "setLeadingVisualSnapThreshold"
            Parameter { name: "leadingVisualSnapThreshold"; type: "float" }
        }
        Method { name: "resetBufferedScrollingEnabled" }
        Method {
            name: "setBufferedScrollingEnabled"
            Parameter { name: "bufferedScrollingEnabled"; type: "bool" }
        }
        Method {
            name: "setScrollRole"
            Parameter { name: "scrollRole"; type: "bb::cascades::ScrollRole::Type" }
        }
        Method { name: "resetScrollRole" }
        Method { name: "rearrangeHandler"; revision: 3; type: "RearrangeHandler*" }
        Method {
            name: "isSelected"
            type: "bool"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Method { name: "selected"; type: "QVariantList" }
        Method { name: "selectionList"; type: "QVariantList" }
        Method { name: "scrollStops"; type: "QVariantList" }
        Method {
            name: "setScrollStops"
            Parameter { name: "indexPaths"; type: "QVariantList" }
        }
    }
    Component {
        name: "bb::cascades::ListViewStickToEdgePolicy"
        exports: [
            "bb.cascades/ListViewStickToEdgePolicy 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "Beginning": 2,
                "End": 3,
                "BeginningThenEnd": 4,
                "EndThenBeginning": 5
            }
        }
    }
    Component {
        name: "bb::cascades::LocaleHandler"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/LocaleHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal { name: "localeOrLanguageChanged" }
        Signal { name: "localeChanged" }
        Signal { name: "languageChanged" }
        Signal { name: "systemLanguageChanged" }
    }
    Component {
        name: "bb::cascades::LongPressEvent"
        prototype: "bb::cascades::AbstractGestureEvent"
        exports: [
            "bb.cascades/LongPressEvent 1.0",
            "bb.cascades/LongPressEvent 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::LongPressHandler"
        prototype: "bb::cascades::GestureHandler"
        exports: [
            "bb.cascades/LongPressHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "longPressed"
            Parameter { name: "event"; type: "bb::cascades::LongPressEvent"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::Menu"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/MenuDefinition 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "actions"; type: "bb::cascades::ActionItem"; isList: true; isReadonly: true }
        Property { name: "helpAction"; type: "bb::cascades::HelpActionItem"; isPointer: true }
        Property { name: "settingsAction"; type: "bb::cascades::SettingsActionItem"; isPointer: true }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "actionAdded"
            Parameter { name: "action"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Signal {
            name: "actionRemoved"
            Parameter { name: "action"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Signal {
            name: "helpActionChanged"
            Parameter { name: "helpAction"; type: "bb::cascades::HelpActionItem"; isPointer: true }
        }
        Signal {
            name: "settingsActionChanged"
            Parameter { name: "settingsAction"; type: "bb::cascades::SettingsActionItem"; isPointer: true }
        }
        Method {
            name: "setHelpAction"
            Parameter { name: "helpAction"; type: "bb::cascades::HelpActionItem"; isPointer: true }
        }
        Method { name: "resetHelpAction" }
        Method {
            name: "setSettingsAction"
            Parameter { name: "settingsAction"; type: "bb::cascades::SettingsActionItem"; isPointer: true }
        }
        Method { name: "resetSettingsAction" }
        Method {
            name: "addAction"
            Parameter { name: "actionItem"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Method {
            name: "removeAction"
            type: "bool"
            Parameter { name: "actionItem"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Method { name: "actionCount"; type: "int" }
        Method {
            name: "actionAt"
            type: "bb::cascades::ActionItem*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::MultiCover"
        defaultProperty: "covers"
        prototype: "bb::cascades::AbstractCover"
        Property { name: "covers"; type: "bb::cascades::AbstractCover"; isList: true; isReadonly: true }
        Method {
            name: "add"
            Parameter { name: "cover"; type: "bb::cascades::AbstractCover"; isPointer: true }
            Parameter { name: "level"; type: "bb::cascades::CoverDetailLevel::Type" }
        }
        Method { name: "removeAll" }
        Method {
            name: "add"
            Parameter { name: "cover"; type: "bb::cascades::AbstractCover"; isPointer: true }
            Parameter { name: "level"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::MultiCoverAttached"
        prototype: "QObject"
        exports: [
            "bb.cascades/MultiCoverAttached 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "level"; type: "bb::cascades::CoverDetailLevel::Type" }
        Signal {
            name: "levelChanged"
            Parameter { name: "newLevel"; type: "bb::cascades::CoverDetailLevel::Type" }
        }
        Signal {
            name: "levelChanged"
            Parameter { name: "level"; type: "int" }
        }
        Signal {
            name: "initializationCompleted"
            Parameter { name: "attachee"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::MultiSelectActionItem"
        prototype: "bb::cascades::AbstractActionItem"
        exports: [
            "bb.cascades/MultiSelectActionItem 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property {
            name: "multiSelectHandler"
            type: "bb::cascades::MultiSelectHandler"
            isPointer: true
        }
        Signal {
            name: "multiSelectHandlerChanged"
            Parameter {
                name: "multiSelectHandler"
                type: "bb::cascades::MultiSelectHandler"
                isPointer: true
            }
        }
        Method {
            name: "setMultiSelectHandler"
            Parameter {
                name: "multiSelectHandler"
                type: "bb::cascades::MultiSelectHandler"
                isPointer: true
            }
        }
        Method { name: "resetMultiSelectHandler" }
    }
    Component {
        name: "bb::cascades::MultiSelectHandler"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/MultiSelectHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "active"; type: "bool" }
        Property {
            name: "actions"
            type: "bb::cascades::AbstractActionItem"
            isList: true
            isReadonly: true
        }
        Property { name: "status"; type: "string" }
        Property { name: "inputAllowed"; type: "bool" }
        Signal {
            name: "activeChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "actionAdded"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Signal {
            name: "actionRemoved"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "string" }
        }
        Signal { name: "canceled" }
        Signal {
            name: "inputAllowedChanged"
            Parameter { name: "inputAllowed"; type: "bool" }
        }
        Method {
            name: "setActive"
            Parameter { name: "active"; type: "bool" }
        }
        Method { name: "resetActive" }
        Method {
            name: "setStatus"
            Parameter { name: "status"; type: "string" }
        }
        Method { name: "resetStatus" }
        Method {
            name: "setInputAllowed"
            Parameter { name: "inputAllowed"; type: "bool" }
        }
        Method { name: "resetInputAllowed" }
        Method { name: "actionCount"; type: "int" }
        Method {
            name: "actionAt"
            type: "bb::cascades::AbstractActionItem*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "addAction"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Method {
            name: "removeAction"
            type: "bool"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Method { name: "removeAllActions" }
    }
    Component {
        name: "bb::cascades::Navigation"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/Navigation 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "left"; type: "bb::cascades::Control"; isPointer: true }
        Property { name: "leftAllowed"; type: "bool" }
        Property { name: "right"; type: "bb::cascades::Control"; isPointer: true }
        Property { name: "rightAllowed"; type: "bool" }
        Property { name: "up"; type: "bb::cascades::Control"; isPointer: true }
        Property { name: "upAllowed"; type: "bool" }
        Property { name: "down"; type: "bb::cascades::Control"; isPointer: true }
        Property { name: "downAllowed"; type: "bool" }
        Property { name: "focusPolicy"; type: "bb::cascades::NavigationFocusPolicy::Type" }
        Property { name: "defaultHighlightEnabled"; type: "bool" }
        Property { name: "wantsHighlight"; type: "bool"; isReadonly: true }
        Signal {
            name: "leftChanged"
            Parameter { name: "target"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "leftAllowedChanged"
            Parameter { name: "allowed"; type: "bool" }
        }
        Signal {
            name: "rightChanged"
            Parameter { name: "target"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "rightAllowedChanged"
            Parameter { name: "allowed"; type: "bool" }
        }
        Signal {
            name: "upChanged"
            Parameter { name: "target"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "upAllowedChanged"
            Parameter { name: "allowed"; type: "bool" }
        }
        Signal {
            name: "downChanged"
            Parameter { name: "target"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "downAllowedChanged"
            Parameter { name: "allowed"; type: "bool" }
        }
        Signal {
            name: "focusPolicyChanged"
            Parameter { name: "newFocusPolicy"; type: "bb::cascades::NavigationFocusPolicy::Type" }
        }
        Signal {
            name: "defaultHighlightEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "wantsHighlightChanged"
            Parameter { name: "wantsHighlight"; type: "bool" }
        }
        Method {
            name: "setLeft"
            Parameter { name: "target"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "resetLeft" }
        Method {
            name: "setLeftAllowed"
            Parameter { name: "allowed"; type: "bool" }
        }
        Method { name: "resetLeftAllowed" }
        Method {
            name: "setRight"
            Parameter { name: "target"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "resetRight" }
        Method {
            name: "setRightAllowed"
            Parameter { name: "allowed"; type: "bool" }
        }
        Method { name: "resetRightAllowed" }
        Method {
            name: "setUp"
            Parameter { name: "target"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "resetUp" }
        Method {
            name: "setUpAllowed"
            Parameter { name: "allowed"; type: "bool" }
        }
        Method { name: "resetUpAllowed" }
        Method {
            name: "setDown"
            Parameter { name: "target"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "resetDown" }
        Method {
            name: "setDownAllowed"
            Parameter { name: "allowed"; type: "bool" }
        }
        Method { name: "resetDownAllowed" }
        Method {
            name: "setFocusPolicy"
            Parameter { name: "focusPolicy"; type: "bb::cascades::NavigationFocusPolicy::Type" }
        }
        Method { name: "resetFocusPolicy" }
        Method {
            name: "setDefaultHighlightEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetDefaultHighlightEnabled" }
    }
    Component {
        name: "bb::cascades::NavigationEvent"
        prototype: "bb::cascades::Event"
        exports: [
            "bb.cascades/NavigationEvent 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property {
            name: "navigationEventType"
            type: "bb::cascades::NavigationEventType::Type"
            isReadonly: true
        }
        Property { name: "multiplier"; type: "int"; isReadonly: true }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::NavigationEventType"
        exports: [
            "bb.cascades/NavigationEventType 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Left": 0,
                "Right": 1,
                "Up": 2,
                "Down": 3,
                "Cancel": 4
            }
        }
    }
    Component {
        name: "bb::cascades::NavigationFocusPolicy"
        exports: [
            "bb.cascades/NavigationFocusPolicy 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "NotFocusable": 1,
                "Focusable": 2
            }
        }
    }
    Component {
        name: "bb::cascades::NavigationHandler"
        prototype: "bb::cascades::AbstractEventHandler"
        exports: [
            "bb.cascades/NavigationHandler 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property {
            name: "consumeNavigationEvents"
            type: "bb::cascades::ConsumeNavigationEvent::Types"
        }
        Signal {
            name: "navigation"
            Parameter { name: "event"; type: "bb::cascades::NavigationEvent"; isPointer: true }
        }
        Signal {
            name: "consumeNavigationEventsChanged"
            Parameter {
                name: "newConsumeNavigationEvents"
                type: "bb::cascades::ConsumeNavigationEvent::Types"
            }
        }
        Method {
            name: "setConsumeNavigationEvents"
            Parameter {
                name: "consumeNavigationEvents"
                type: "bb::cascades::ConsumeNavigationEvent::Types"
            }
        }
        Method { name: "resetConsumeNavigationEvents" }
    }
    Component {
        name: "bb::cascades::NavigationPane"
        prototype: "bb::cascades::AbstractPane"
        Property { name: "top"; type: "bb::cascades::Page"; isReadonly: true; isPointer: true }
        Property { name: "backButtonsVisible"; type: "bool" }
        Property { name: "peekEnabled"; type: "bool" }
        Signal {
            name: "topChanged"
            Parameter { name: "page"; type: "bb::cascades::Page"; isPointer: true }
        }
        Signal {
            name: "pushTransitionEnded"
            Parameter { name: "page"; type: "bb::cascades::Page"; isPointer: true }
        }
        Signal {
            name: "popTransitionEnded"
            Parameter { name: "page"; type: "bb::cascades::Page"; isPointer: true }
        }
        Signal {
            name: "navigateToTransitionEnded"
            Parameter { name: "pages"; type: "QVariantList" }
        }
        Signal {
            name: "backButtonsVisibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "peekEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "navigateTo"
            type: "QVariantList"
            Parameter { name: "targetPage"; type: "bb::cascades::Page"; isPointer: true }
        }
        Method {
            name: "setBackButtonsVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "resetBackButtonsVisible" }
        Method {
            name: "setPeekEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetPeekEnabled" }
        Method {
            name: "push"
            Parameter { name: "child"; type: "bb::cascades::Page"; isPointer: true }
        }
        Method { name: "pop"; type: "bb::cascades::Page*" }
        Method { name: "count"; type: "int" }
        Method {
            name: "at"
            type: "bb::cascades::Page*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "page"; type: "bb::cascades::Page"; isPointer: true }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "page"; type: "bb::cascades::Page"; isPointer: true }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "page"; type: "bb::cascades::Page"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::NavigationPaneProperties"
        prototype: "bb::cascades::PaneProperties"
        exports: [
            "bb.cascades/NavigationPaneProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "backButton"; type: "bb::cascades::ActionItem"; isPointer: true }
        Signal {
            name: "backButtonChanged"
            Parameter { name: "backButton"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Method {
            name: "setBackButton"
            Parameter { name: "backButton"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Method { name: "resetBackButton" }
    }
    Component {
        name: "bb::cascades::Option"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/Option 1.0",
            "bb.cascades/Option 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        Property { name: "image"; type: "QVariant" }
        Property { name: "imageSource"; type: "QUrl" }
        Property { name: "text"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "value"; type: "QVariant" }
        Property { name: "selected"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "focused"; revision: 4; type: "bool"; isReadonly: true }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourceChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "descriptionChanged"
            Parameter { name: "description"; type: "string" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal {
            name: "selectedChanged"
            Parameter { name: "selected"; type: "bool" }
        }
        Signal {
            name: "focusedChanged"
            revision: 4
            Parameter { name: "focused"; type: "bool" }
        }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setImage"
            Parameter { name: "image"; type: "Image" }
        }
        Method { name: "resetImage" }
        Method {
            name: "setImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSource" }
        Method {
            name: "setText"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "resetText" }
        Method {
            name: "setDescription"
            Parameter { name: "description"; type: "string" }
        }
        Method { name: "resetDescription" }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "resetValue" }
        Method {
            name: "setSelected"
            Parameter { name: "selected"; type: "bool" }
        }
        Method { name: "resetSelected" }
        Method { name: "requestFocus"; revision: 4 }
        Method { name: "loseFocus"; revision: 4 }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetEnabled" }
    }
    Component {
        name: "bb::cascades::OrientationSupport"
        prototype: "QObject"
        Property {
            name: "supportedDisplayOrientation"
            type: "bb::cascades::SupportedDisplayOrientation::Type"
        }
        Property { name: "orientation"; type: "bb::cascades::UIOrientation::Type"; isReadonly: true }
        Property {
            name: "displayDirection"
            type: "bb::cascades::DisplayDirection::Type"
            isReadonly: true
        }
        Signal {
            name: "supportedDisplayOrientationChanged"
            Parameter {
                name: "displayOrientation"
                type: "bb::cascades::SupportedDisplayOrientation::Type"
            }
        }
        Signal {
            name: "orientationAboutToChange"
            Parameter { name: "orientation"; type: "bb::cascades::UIOrientation::Type" }
        }
        Signal {
            name: "orientationChanged"
            Parameter { name: "orientation"; type: "bb::cascades::UIOrientation::Type" }
        }
        Signal {
            name: "displayDirectionChanged"
            Parameter { name: "displayDirection"; type: "bb::cascades::DisplayDirection::Type" }
        }
        Signal {
            name: "displayDirectionAboutToChange"
            Parameter { name: "displayDirection"; type: "bb::cascades::DisplayDirection::Type" }
            Parameter { name: "orientation"; type: "bb::cascades::UIOrientation::Type" }
        }
        Signal { name: "rotationCompleted" }
        Method { name: "resetSupportedDisplayOrientation" }
    }
    Component {
        name: "bb::cascades::OverScrollEffectMode"
        exports: [
            "bb.cascades/OverScrollEffectMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "OnScroll": 2,
                "OnPinch": 3,
                "OnPinchAndScroll": 4
            }
        }
    }
    Component {
        name: "bb::cascades::OverlapTouchPolicy"
        exports: [
            "bb.cascades/OverlapTouchPolicy 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Deny": 0,
                "Allow": 1
            }
        }
    }
    Component {
        name: "bb::cascades::Page"
        defaultProperty: "content"
        prototype: "bb::cascades::AbstractPane"
        exports: [
            "bb.cascades/Page 1.0",
            "bb.cascades/Page 1.3",
            "bb.cascades/Page 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            3,
            4
        ]
        Property { name: "titleBar"; type: "bb::cascades::TitleBar"; isPointer: true }
        Property {
            name: "actions"
            type: "bb::cascades::AbstractActionItem"
            isList: true
            isReadonly: true
        }
        Property { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        Property { name: "resizeBehavior"; type: "bb::cascades::PageResizeBehavior::Type" }
        Property { name: "actionBarVisibility"; type: "bb::cascades::ChromeVisibility::Type" }
        Property {
            name: "actionBarFollowKeyboardPolicy"
            revision: 3
            type: "bb::cascades::ActionBarFollowKeyboardPolicy::Type"
        }
        Property {
            name: "actionMenuVisualState"
            type: "bb::cascades::ActionMenuVisualState::Type"
            isReadonly: true
        }
        Property {
            name: "inputRoute"
            type: "bb::cascades::InputRouteProperties"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "actionBarAutoHideBehavior"
            type: "bb::cascades::ActionBarAutoHideBehavior::Type"
        }
        Property { name: "keysIgnoreFocusInActionBar"; revision: 4; type: "bool" }
        Signal {
            name: "actionBarAutoHideBehaviorChanged"
            Parameter {
                name: "newActionBarAutoHideBehavior"
                type: "bb::cascades::ActionBarAutoHideBehavior::Type"
            }
        }
        Signal {
            name: "keysIgnoreFocusInActionBarChanged"
            revision: 4
            Parameter { name: "keysIgnoreFocusInActionBar"; type: "bool" }
        }
        Signal {
            name: "actionBarVisibilityChanged"
            Parameter { name: "newVisibility"; type: "bb::cascades::ChromeVisibility::Type" }
        }
        Signal {
            name: "actionBarFollowKeyboardPolicyChanged"
            revision: 3
            Parameter {
                name: "newFollowKeyboardPolicy"
                type: "bb::cascades::ActionBarFollowKeyboardPolicy::Type"
            }
        }
        Signal {
            name: "resizeBehaviorChanged"
            Parameter { name: "newResizeBehavior"; type: "bb::cascades::PageResizeBehavior::Type" }
        }
        Signal {
            name: "titleBarChanged"
            Parameter { name: "titleBar"; type: "bb::cascades::TitleBar"; isPointer: true }
        }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "actionAdded"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Signal {
            name: "actionRemoved"
            Parameter { name: "action"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Signal {
            name: "actionMenuVisualStateChanged"
            Parameter {
                name: "newActionMenuVisualState"
                type: "bb::cascades::ActionMenuVisualState::Type"
            }
        }
        Method {
            name: "setTitleBar"
            Parameter { name: "titleBar"; type: "bb::cascades::TitleBar"; isPointer: true }
        }
        Method { name: "resetTitleBar" }
        Method {
            name: "setResizeBehavior"
            Parameter { name: "resizeBehavior"; type: "bb::cascades::PageResizeBehavior::Type" }
        }
        Method { name: "resetResizeBehavior" }
        Method { name: "resetActionBarVisibility" }
        Method { name: "resetActionBarFollowKeyboardPolicy"; revision: 3 }
        Method { name: "openActionMenu"; revision: 4 }
        Method {
            name: "setActionBarAutoHideBehavior"
            Parameter {
                name: "actionBarAutoHideBehavior"
                type: "bb::cascades::ActionBarAutoHideBehavior::Type"
            }
        }
        Method { name: "resetActionBarAutoHideBehavior" }
        Method {
            name: "setKeysIgnoreFocusInActionBar"
            revision: 4
            Parameter { name: "keysIgnoreFocusInActionBar"; type: "bool" }
        }
        Method { name: "resetKeysIgnoreFocusInActionBar"; revision: 4 }
        Method {
            name: "addAction"
            Parameter { name: "actionItem"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
            Parameter { name: "placement"; type: "bb::cascades::ActionBarPlacement::Type" }
        }
        Method {
            name: "addAction"
            Parameter { name: "actionItem"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Method {
            name: "removeAction"
            type: "bool"
            Parameter { name: "actionItem"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
        Method { name: "removeAllActions" }
        Method { name: "actionCount"; type: "int" }
        Method {
            name: "actionAt"
            type: "bb::cascades::AbstractActionItem*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::PageLayoutUpdateHandler"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/PageLayoutUpdateHandler 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "bottomOverlayHeight"; type: "float"; isReadonly: true }
        Signal {
            name: "bottomOverlayHeightChanged"
            Parameter { name: "bottomOverlayHeight"; type: "float" }
        }
    }
    Component {
        name: "bb::cascades::PageResizeBehavior"
        exports: [
            "bb.cascades/PageResizeBehavior 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Resize": 1
            }
        }
    }
    Component {
        name: "bb::cascades::PaneProperties"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/PaneProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::ParallelAnimation"
        defaultProperty: "animations"
        prototype: "bb::cascades::GroupAnimation"
        exports: [
            "bb.cascades/ParallelAnimation 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::Picker"
        prototype: "bb::cascades::Control"
        Property { name: "title"; type: "string" }
        Property { name: "expanded"; type: "bool" }
        Property { name: "description"; type: "string" }
        Property { name: "pickerItemProvider"; type: "bb::cascades::PickerProvider"; isPointer: true }
        Property { name: "rootIndexPath"; type: "QVariantList" }
        Property { name: "dataModel"; type: "bb::cascades::DataModel"; isPointer: true }
        Property { name: "selectedValue"; type: "QVariant"; isReadonly: true }
        Property { name: "columnCount"; type: "QVariant"; isReadonly: true }
        Property { name: "kind"; type: "bb::cascades::PickerKind::Type" }
        Property { name: "preferredRowCount"; type: "int" }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "expandedChanged"
            Parameter { name: "expanded"; type: "bool" }
        }
        Signal {
            name: "descriptionChanged"
            Parameter { name: "description"; type: "string" }
        }
        Signal {
            name: "selectedValueChanged"
            Parameter { name: "selectedValue"; type: "QVariant" }
        }
        Signal {
            name: "selectedValueChanging"
            Parameter { name: "selectedValue"; type: "QVariant" }
        }
        Signal {
            name: "columnCountChanged"
            Parameter { name: "columnCount"; type: "int" }
        }
        Signal {
            name: "preferredRowCountChanged"
            Parameter { name: "rowCount"; type: "int" }
        }
        Signal {
            name: "rootIndexPathChanged"
            Parameter { name: "rootIndexPath"; type: "QVariantList" }
        }
        Signal {
            name: "dataModelChanged"
            Parameter { name: "dataModel"; type: "bb::cascades::DataModel"; isPointer: true }
        }
        Method {
            name: "setPickerItemProvider"
            Parameter { name: "pProvider"; type: "bb::cascades::PickerProvider"; isPointer: true }
        }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "string" }
        }
        Method { name: "resetTitle" }
        Method {
            name: "setDescription"
            Parameter { name: "description"; type: "string" }
        }
        Method { name: "resetDescription" }
        Method {
            name: "setExpanded"
            Parameter { name: "expanded"; type: "bool" }
        }
        Method { name: "resetExpanded" }
        Method {
            name: "select"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
            Parameter { name: "scrollAnimation"; type: "bb::cascades::ScrollAnimation::Type" }
        }
        Method {
            name: "select"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
        }
        Method { name: "reset" }
        Method {
            name: "setPreferredRowCount"
            Parameter { name: "rowCount"; type: "int" }
        }
        Method { name: "resetPreferredRowCount" }
        Method {
            name: "setRootIndexPath"
            Parameter { name: "rootIndexPath"; type: "QVariantList" }
        }
        Method { name: "resetRootIndexPath" }
        Method {
            name: "setDataModel"
            Parameter { name: "pDataModel"; type: "bb::cascades::DataModel"; isPointer: true }
        }
        Method { name: "resetDataModel" }
        Method {
            name: "selectedIndex"
            type: "int"
            Parameter { name: "column"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::PickerItemComponent"
        defaultProperty: "content"
        prototype: "QObject"
        exports: [
            "bb.cascades/PickerItemComponent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "type"; type: "string" }
        Property { name: "content"; type: "QDeclarativeComponent"; isPointer: true }
        Signal {
            name: "typeChanged"
            Parameter { name: "type"; type: "string" }
        }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "QDeclarativeComponent"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::PickerKind"
        exports: [
            "bb.cascades/PickerKind 1.0",
            "bb.cascades/PickerKind 1.1"
        ]
        exportMetaObjectRevisions: [
            0,
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "List": 1,
                "Expandable": 2
            }
        }
    }
    Component {
        name: "bb::cascades::PickerProvider"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/PickerProvider 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "columnWidthRatio"; type: "QVariantList" }
        Signal {
            name: "itemUpdatesNeeded"
            Parameter { name: "column"; type: "int" }
        }
        Signal {
            name: "columnWidthRatioChanged"
            Parameter { name: "ratio"; type: "QVariantList" }
        }
        Signal {
            name: "updateRange"
            Parameter { name: "column"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::PinchEvent"
        prototype: "bb::cascades::AbstractGestureEvent"
        exports: [
            "bb.cascades/PinchEvent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "midPointX"; type: "float"; isReadonly: true }
        Property { name: "midPointY"; type: "float"; isReadonly: true }
        Property { name: "pinchRatio"; type: "float"; isReadonly: true }
        Property { name: "rotation"; type: "float"; isReadonly: true }
        Property { name: "distance"; type: "float"; isReadonly: true }
        Method {
            name: "touchPointX"
            type: "float"
            Parameter { name: "pointIndex"; type: "int" }
        }
        Method {
            name: "touchPointY"
            type: "float"
            Parameter { name: "pointIndex"; type: "int" }
        }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::PinchHandler"
        prototype: "bb::cascades::GestureHandler"
        exports: [
            "bb.cascades/PinchHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "pinchStarted"
            Parameter { name: "event"; type: "bb::cascades::PinchEvent"; isPointer: true }
        }
        Signal {
            name: "pinchUpdated"
            Parameter { name: "event"; type: "bb::cascades::PinchEvent"; isPointer: true }
        }
        Signal {
            name: "pinchEnded"
            Parameter { name: "event"; type: "bb::cascades::PinchEvent"; isPointer: true }
        }
        Signal { name: "pinchCancelled" }
    }
    Component {
        name: "bb::cascades::ProgressIndicator"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/ProgressIndicator 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "progress"; type: "float"; isReadonly: true }
        Property { name: "value"; type: "float" }
        Property { name: "fromValue"; type: "float" }
        Property { name: "toValue"; type: "float" }
        Property { name: "state"; type: "bb::cascades::ProgressIndicatorState::Type" }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "progressChanged"
            Parameter { name: "progress"; type: "float" }
        }
        Signal {
            name: "toValueChanged"
            Parameter { name: "toValue"; type: "float" }
        }
        Signal {
            name: "fromValueChanged"
            Parameter { name: "fromValue"; type: "float" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "newState"; type: "bb::cascades::ProgressIndicatorState::Type" }
        }
        Method {
            name: "setFromValue"
            Parameter { name: "from"; type: "float" }
        }
        Method { name: "resetFromValue" }
        Method {
            name: "setToValue"
            Parameter { name: "to"; type: "float" }
        }
        Method { name: "resetToValue" }
        Method {
            name: "setRange"
            Parameter { name: "from"; type: "float" }
            Parameter { name: "to"; type: "float" }
        }
        Method { name: "resetRange" }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetValue" }
        Method {
            name: "setState"
            Parameter { name: "value"; type: "bb::cascades::ProgressIndicatorState::Type" }
        }
        Method { name: "resetState" }
    }
    Component {
        name: "bb::cascades::ProgressIndicatorState"
        exports: [
            "bb.cascades/ProgressIndicatorState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Progress": 0,
                "Indeterminate": 1,
                "Pause": 2,
                "Error": 3,
                "Complete": 4
            }
        }
    }
    Component {
        name: "bb::cascades::PropagationPhase"
        exports: [
            "bb.cascades/PropagationPhase 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Capturing": 1,
                "AtTarget": 2,
                "Bubbling": 3
            }
        }
    }
    Component {
        name: "bb::cascades::QmlAnimationRepeatCount"
        prototype: "QObject"
        Property { name: "Forever"; type: "int"; isReadonly: true }
    }
    Component {
        name: "bb::cascades::QmlColors"
        prototype: "QObject"
        Property { name: "White"; type: "QVariant"; isReadonly: true }
        Property { name: "Black"; type: "QVariant"; isReadonly: true }
        Property { name: "Red"; type: "QVariant"; isReadonly: true }
        Property { name: "DarkRed"; type: "QVariant"; isReadonly: true }
        Property { name: "Green"; type: "QVariant"; isReadonly: true }
        Property { name: "DarkGreen"; type: "QVariant"; isReadonly: true }
        Property { name: "Blue"; type: "QVariant"; isReadonly: true }
        Property { name: "DarkBlue"; type: "QVariant"; isReadonly: true }
        Property { name: "Cyan"; type: "QVariant"; isReadonly: true }
        Property { name: "DarkCyan"; type: "QVariant"; isReadonly: true }
        Property { name: "Magenta"; type: "QVariant"; isReadonly: true }
        Property { name: "DarkMagenta"; type: "QVariant"; isReadonly: true }
        Property { name: "Yellow"; type: "QVariant"; isReadonly: true }
        Property { name: "DarkYellow"; type: "QVariant"; isReadonly: true }
        Property { name: "Gray"; type: "QVariant"; isReadonly: true }
        Property { name: "DarkGray"; type: "QVariant"; isReadonly: true }
        Property { name: "LightGray"; type: "QVariant"; isReadonly: true }
        Property { name: "Transparent"; type: "QVariant"; isReadonly: true }
        Method {
            name: "create"
            type: "QVariant"
            Parameter { name: "hexColor"; type: "string" }
        }
        Method {
            name: "create"
            type: "QVariant"
            Parameter { name: "r"; type: "float" }
            Parameter { name: "g"; type: "float" }
            Parameter { name: "b"; type: "float" }
            Parameter { name: "a"; type: "float" }
        }
        Method {
            name: "create"
            type: "QVariant"
            Parameter { name: "r"; type: "float" }
            Parameter { name: "g"; type: "float" }
            Parameter { name: "b"; type: "float" }
        }
        Method {
            name: "toHexString"
            type: "string"
            Parameter { name: "color"; type: "QVariant" }
        }
        Method {
            name: "areEqual"
            type: "bool"
            Parameter { name: "c1"; type: "QVariant" }
            Parameter { name: "c2"; type: "QVariant" }
        }
    }
    Component {
        name: "bb::cascades::QmlComponentDefinition"
        defaultProperty: "content"
        prototype: "bb::cascades::QmlQObject"
        exports: [
            "bb.cascades/ComponentDefinition 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "content"; type: "QDeclarativeComponent"; isPointer: true }
        Property { name: "source"; type: "QUrl" }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "QDeclarativeComponent"; isPointer: true }
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "error"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Method { name: "hasErrors"; type: "bool" }
        Method { name: "errorMessage"; type: "string" }
        Method {
            name: "createObject"
            type: "bb::cascades::BaseObject*"
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method { name: "createObject"; type: "bb::cascades::BaseObject*" }
        Method { name: "load"; type: "bool" }
    }
    Component {
        name: "bb::cascades::QmlControlDelegate"
        prototype: "bb::cascades::CustomControl"
        exports: [
            "bb.cascades/ControlDelegate 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property {
            name: "sourceComponent"
            type: "bb::cascades::QmlComponentDefinition"
            isPointer: true
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "control"; type: "bb::cascades::Control"; isReadonly: true; isPointer: true }
        Property { name: "delegateActive"; type: "bool" }
        Signal {
            name: "sourceComponentChanged"
            Parameter {
                name: "sourceComponent"
                type: "bb::cascades::QmlComponentDefinition"
                isPointer: true
            }
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "controlChanged"
            Parameter { name: "control"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "delegateActiveChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "error"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Method { name: "hasErrors"; type: "bool" }
        Method { name: "errorMessage"; type: "string" }
    }
    Component {
        name: "bb::cascades::QmlCurves"
        prototype: "QObject"
        Property { name: "Linear"; type: "QVariant"; isReadonly: true }
        Property { name: "QuadraticIn"; type: "QVariant"; isReadonly: true }
        Property { name: "QuadraticOut"; type: "QVariant"; isReadonly: true }
        Property { name: "QuadraticInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "CubicIn"; type: "QVariant"; isReadonly: true }
        Property { name: "CubicOut"; type: "QVariant"; isReadonly: true }
        Property { name: "CubicInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "QuarticIn"; type: "QVariant"; isReadonly: true }
        Property { name: "QuarticOut"; type: "QVariant"; isReadonly: true }
        Property { name: "QuarticInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "QuinticIn"; type: "QVariant"; isReadonly: true }
        Property { name: "QuinticOut"; type: "QVariant"; isReadonly: true }
        Property { name: "QuinticInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "BackIn"; type: "QVariant"; isReadonly: true }
        Property { name: "BackOut"; type: "QVariant"; isReadonly: true }
        Property { name: "BackInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "BounceIn"; type: "QVariant"; isReadonly: true }
        Property { name: "BounceOut"; type: "QVariant"; isReadonly: true }
        Property { name: "BounceInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "DoubleBounceIn"; type: "QVariant"; isReadonly: true }
        Property { name: "DoubleBounceOut"; type: "QVariant"; isReadonly: true }
        Property { name: "DoubleBounceInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "ElasticIn"; type: "QVariant"; isReadonly: true }
        Property { name: "ElasticOut"; type: "QVariant"; isReadonly: true }
        Property { name: "ElasticInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "DoubleElasticIn"; type: "QVariant"; isReadonly: true }
        Property { name: "DoubleElasticOut"; type: "QVariant"; isReadonly: true }
        Property { name: "DoubleElasticInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "SineIn"; type: "QVariant"; isReadonly: true }
        Property { name: "SineOut"; type: "QVariant"; isReadonly: true }
        Property { name: "SineInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "CircularIn"; type: "QVariant"; isReadonly: true }
        Property { name: "CircularOut"; type: "QVariant"; isReadonly: true }
        Property { name: "CircularInOut"; type: "QVariant"; isReadonly: true }
        Property { name: "ExponentialIn"; type: "QVariant"; isReadonly: true }
        Property { name: "ExponentialOut"; type: "QVariant"; isReadonly: true }
        Property { name: "ExponentialInOut"; type: "QVariant"; isReadonly: true }
    }
    Component {
        name: "bb::cascades::QmlImageAnimator"
        prototype: "bb::cascades::ImageAnimator"
        exports: [
            "bb.cascades/ImageAnimator 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::QmlImplicitAnimationController"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/ImplicitAnimationController 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "enabled"; type: "bool" }
        Property { name: "propertyName"; type: "string" }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetEnabled" }
        Method {
            name: "setPropertyName"
            Parameter { name: "propertyName"; type: "string" }
        }
    }
    Component {
        name: "bb::cascades::QmlListView"
        prototype: "bb::cascades::ListView"
        exports: [
            "bb.cascades/ListView 1.0",
            "bb.cascades/ListView 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        Property {
            name: "listItemComponents"
            type: "bb::cascades::ListItemComponent"
            isList: true
            isReadonly: true
        }
    }
    Component {
        name: "bb::cascades::QmlListViewAttached"
        prototype: "QObject"
        Property { name: "initialized"; type: "bool"; isReadonly: true }
        Property { name: "data"; type: "QVariant"; isReadonly: true }
        Property { name: "indexInSection"; type: "int"; isReadonly: true }
        Property { name: "indexPath"; type: "QVariantList"; isReadonly: true }
        Property { name: "sectionSize"; type: "int"; isReadonly: true }
        Property { name: "view"; type: "bb::cascades::QmlListView"; isReadonly: true; isPointer: true }
        Property {
            name: "component"
            type: "bb::cascades::ListItemComponent"
            isReadonly: true
            isPointer: true
        }
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "selected"; type: "bool"; isReadonly: true }
        Signal {
            name: "initializedChanged"
            Parameter { name: "initialized"; type: "bool" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "data"; type: "QVariant" }
        }
        Signal {
            name: "indexInSectionChanged"
            Parameter { name: "indexInSection"; type: "int" }
        }
        Signal {
            name: "indexPathChanged"
            Parameter { name: "indexPath"; type: "QVariantList" }
        }
        Signal {
            name: "sectionSizeChanged"
            Parameter { name: "sectionSize"; type: "int" }
        }
        Signal {
            name: "viewChanged"
            Parameter { name: "view"; type: "bb::cascades::QmlListView"; isPointer: true }
        }
        Signal {
            name: "componentChanged"
            Parameter { name: "component"; type: "bb::cascades::ListItemComponent"; isPointer: true }
        }
        Signal {
            name: "activationChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "selectionChanged"
            Parameter { name: "selected"; type: "bool" }
        }
    }
    Component {
        name: "bb::cascades::QmlMenu"
        prototype: "QObject"
        exports: [
            "bb.cascades/Menu 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        attachedType: "bb::cascades::QmlMenuAttached"
    }
    Component {
        name: "bb::cascades::QmlMenuAttached"
        prototype: "QObject"
        exports: [
            "bb.cascades/QmlMenuAttached 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "definition"; type: "bb::cascades::Menu"; isPointer: true }
    }
    Component {
        name: "bb::cascades::QmlMultiCover"
        defaultProperty: "covers"
        prototype: "bb::cascades::MultiCover"
        exports: [
            "bb.cascades/MultiCover 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        attachedType: "bb::cascades::MultiCoverAttached"
    }
    Component {
        name: "bb::cascades::QmlNavigationPane"
        defaultProperty: "firstPage"
        prototype: "bb::cascades::NavigationPane"
        exports: [
            "bb.cascades/NavigationPane 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "firstPage"; type: "bb::cascades::Page"; isPointer: true }
    }
    Component {
        name: "bb::cascades::QmlOrientationHandler"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/OrientationHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "orientation"; type: "bb::cascades::UIOrientation::Type"; isReadonly: true }
        Property {
            name: "displayDirection"
            type: "bb::cascades::DisplayDirection::Type"
            isReadonly: true
        }
        Signal {
            name: "orientationAboutToChange"
            Parameter { name: "orientation"; type: "int" }
        }
        Signal {
            name: "orientationChanged"
            Parameter { name: "orientation"; type: "int" }
        }
        Signal {
            name: "displayDirectionChanged"
            Parameter { name: "displayDirection"; type: "int" }
        }
        Signal {
            name: "displayDirectionAboutToChange"
            Parameter { name: "displayDirection"; type: "int" }
            Parameter { name: "orientation"; type: "int" }
        }
        Signal { name: "rotationCompleted" }
    }
    Component {
        name: "bb::cascades::QmlPage"
        defaultProperty: "content"
        prototype: "bb::cascades::Page"
        exports: [
            "bb.cascades/Page 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Method {
            name: "addAction"
            Parameter { name: "actionItem"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
            Parameter { name: "placement"; type: "int" }
        }
        Method {
            name: "addAction"
            Parameter { name: "actionItem"; type: "bb::cascades::AbstractActionItem"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::QmlPicker"
        prototype: "bb::cascades::Picker"
        exports: [
            "bb.cascades/Picker 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property {
            name: "pickerItemComponents"
            type: "bb::cascades::PickerItemComponent"
            isList: true
            isReadonly: true
        }
        Method {
            name: "select"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
            Parameter { name: "scrollAnimation"; type: "int" }
        }
        Method {
            name: "select"
            Parameter { name: "column"; type: "int" }
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::QmlQObject"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/QtObject 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::QmlRetranslate"
        prototype: "QObject"
        Property { name: "onLocaleOrLanguageChanged"; type: "string"; isReadonly: true }
        Property { name: "onLocaleChanged"; type: "string"; isReadonly: true }
        Property { name: "onLanguageChanged"; type: "string"; isReadonly: true }
        Signal { name: "onLocaleOrLanguageChangedChanged" }
        Signal { name: "onLocaleChangedChanged" }
        Signal { name: "onLanguageChangedChanged" }
    }
    Component {
        name: "bb::cascades::QmlScrollView"
        defaultProperty: "content"
        prototype: "bb::cascades::ScrollView"
        exports: [
            "bb.cascades/ScrollView 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Method {
            name: "scrollToPoint"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "scrollAnimation"; type: "int" }
        }
        Method {
            name: "scrollToPoint"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "resetViewableArea"
            Parameter { name: "scrollAnimation"; type: "int" }
        }
        Method { name: "resetViewableArea" }
        Method {
            name: "zoomToPoint"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "contentScale"; type: "float" }
            Parameter { name: "scrollAnimation"; type: "int" }
        }
        Method {
            name: "zoomToPoint"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "contentScale"; type: "float" }
        }
        Method {
            name: "zoomToRect"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "scrollAnimation"; type: "int" }
        }
        Method {
            name: "zoomToRect"
            Parameter { name: "rect"; type: "QRectF" }
        }
    }
    Component {
        name: "bb::cascades::QmlSystemDefaults"
        prototype: "QObject"
        Property {
            name: "Paints"
            type: "bb::cascades::QmlSystemDefaultsPaints"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "TextStyles"
            type: "bb::cascades::QmlSystemDefaultsTextStyles"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "bb::cascades::QmlSystemDefaultsPaints"
        prototype: "QObject"
        exports: [
            "bb.cascades/QmlSystemDefaultsPaints 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "DefaultText"; type: "QVariant"; isReadonly: true }
        Property { name: "ContainerBackground"; type: "QVariant"; isReadonly: true }
    }
    Component {
        name: "bb::cascades::QmlSystemDefaultsTextStyles"
        prototype: "QObject"
        exports: [
            "bb.cascades/QmlSystemDefaultsTextStyles 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "BigText"; type: "QVariant"; isReadonly: true }
        Property { name: "BodyText"; type: "QVariant"; isReadonly: true }
        Property { name: "TitleText"; type: "QVariant"; isReadonly: true }
        Property { name: "SubtitleText"; type: "QVariant"; isReadonly: true }
        Property { name: "SmallText"; type: "QVariant"; isReadonly: true }
        Property { name: "PrimaryText"; type: "QVariant"; isReadonly: true }
    }
    Component {
        name: "bb::cascades::QmlTab"
        defaultProperty: "content"
        prototype: "bb::cascades::Tab"
        exports: [
            "bb.cascades/Tab 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "delegate"; type: "bb::cascades::Delegate"; isPointer: true }
        Property {
            name: "delegateActivationPolicy"
            type: "bb::cascades::TabDelegateActivationPolicy::Type"
        }
        Signal {
            name: "delegateChanged"
            Parameter { name: "delegate"; type: "bb::cascades::Delegate"; isPointer: true }
        }
        Signal {
            name: "delegateActivationPolicyChanged"
            Parameter {
                name: "newDelegateActivationPolicy"
                type: "bb::cascades::TabDelegateActivationPolicy::Type"
            }
        }
    }
    Component {
        name: "bb::cascades::QmlWebView"
        prototype: "bb::cascades::WebView"
        exports: [
            "bb.cascades/WebView 1.0",
            "bb.cascades/WebView 1.3",
            "bb.cascades/WebView 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            3,
            4
        ]
        Method {
            name: "evaluateJavaScript"
            type: "int"
            Parameter { name: "script"; type: "string" }
            Parameter { name: "world"; type: "int" }
        }
        Method {
            name: "evaluateJavaScript"
            type: "int"
            Parameter { name: "script"; type: "string" }
        }
        Method {
            name: "findText"
            Parameter { name: "subString"; type: "string" }
            Parameter { name: "options"; type: "int" }
        }
        Method {
            name: "findText"
            Parameter { name: "subString"; type: "string" }
        }
    }
    Component {
        name: "bb::cascades::RadioGroup"
        defaultProperty: "options"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/RadioGroup 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "dividersVisible"; type: "bool" }
        Property { name: "selectedIndex"; type: "int" }
        Property { name: "selectedOption"; type: "bb::cascades::Option"; isPointer: true }
        Property { name: "selectedOptionSet"; type: "bool"; isReadonly: true }
        Property { name: "selectedValue"; type: "QVariant"; isReadonly: true }
        Property { name: "options"; type: "bb::cascades::Option"; isList: true; isReadonly: true }
        Signal {
            name: "selectedIndexChanged"
            Parameter { name: "selectedIndex"; type: "int" }
        }
        Signal {
            name: "selectedOptionChanged"
            Parameter { name: "selectedOption"; type: "bb::cascades::Option"; isPointer: true }
        }
        Signal {
            name: "selectedOptionSetChanged"
            Parameter { name: "selectedOptionSet"; type: "bool" }
        }
        Signal {
            name: "selectedValueChanged"
            Parameter { name: "selectedValue"; type: "QVariant" }
        }
        Signal {
            name: "dividersVisibleChanged"
            Parameter { name: "dividersVisible"; type: "bool" }
        }
        Signal {
            name: "optionAdded"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Signal {
            name: "optionRemoved"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "setSelectedIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "resetSelectedIndex" }
        Method {
            name: "setSelectedOption"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "resetSelectedOption" }
        Method {
            name: "setDividersVisible"
            Parameter { name: "dividersVisible"; type: "bool" }
        }
        Method { name: "resetDividersVisible" }
        Method {
            name: "add"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "removeAll" }
        Method {
            name: "at"
            type: "bb::cascades::Option*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "count"; type: "int" }
    }
    Component {
        name: "bb::cascades::RearrangeHandler"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/RearrangeHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "active"; type: "bool" }
        Signal {
            name: "activeChanged"
            Parameter { name: "active"; type: "bool" }
        }
        Signal {
            name: "moveStarted"
            Parameter { name: "event"; type: "bb::cascades::RearrangeMoveStartEvent"; isPointer: true }
        }
        Signal {
            name: "moveUpdated"
            Parameter { name: "event"; type: "bb::cascades::RearrangeMoveUpdateEvent"; isPointer: true }
        }
        Signal {
            name: "moveEnded"
            Parameter { name: "event"; type: "bb::cascades::RearrangeMoveEndEvent"; isPointer: true }
        }
        Signal {
            name: "moveAborted"
            Parameter { name: "event"; type: "bb::cascades::RearrangeMoveEndEvent"; isPointer: true }
        }
        Method { name: "active"; type: "bool" }
        Method {
            name: "setActive"
            Parameter { name: "active"; type: "bool" }
        }
    }
    Component {
        name: "bb::cascades::RearrangeMoveEndEvent"
        prototype: "QObject"
        exports: [
            "bb.cascades/RearrangeMoveEndEvent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "endIndexPath"; type: "QVariantList"; isReadonly: true }
        Method { name: "endIndexPath"; type: "QVariantList" }
    }
    Component {
        name: "bb::cascades::RearrangeMoveStartEvent"
        prototype: "QObject"
        exports: [
            "bb.cascades/RearrangeMoveStartEvent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "startIndexPath"; type: "QVariantList"; isReadonly: true }
        Method { name: "startIndexPath"; type: "QVariantList" }
    }
    Component {
        name: "bb::cascades::RearrangeMoveUpdateEvent"
        prototype: "QObject"
        exports: [
            "bb.cascades/RearrangeMoveUpdateEvent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "fromIndexPath"; type: "QVariantList"; isReadonly: true }
        Property { name: "toIndexPath"; type: "QVariantList"; isReadonly: true }
        Method { name: "fromIndexPath"; type: "QVariantList" }
        Method { name: "toIndexPath"; type: "QVariantList" }
        Method { name: "denyMove" }
    }
    Component {
        name: "bb::cascades::RenderFence"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/RenderFence 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "state"; type: "bb::cascades::RenderFenceState::Type"; isReadonly: true }
        Property { name: "raised"; type: "bool" }
        Signal { name: "reached" }
        Signal { name: "aborted" }
        Signal { name: "timedOut" }
        Signal { name: "failedToReach" }
        Signal {
            name: "stateChanged"
            Parameter { name: "newState"; type: "bb::cascades::RenderFenceState::Type" }
        }
        Signal {
            name: "raisedChanged"
            Parameter { name: "raised"; type: "bool" }
        }
        Method {
            name: "setRaised"
            Parameter { name: "raised"; type: "bool" }
        }
        Method { name: "resetRaised" }
    }
    Component {
        name: "bb::cascades::RenderFenceState"
        exports: [
            "bb.cascades/RenderFenceState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Created": 4,
                "NotReached": 0,
                "Reached": 1,
                "Aborted": 2,
                "TimedOut": 3
            }
        }
    }
    Component {
        name: "bb::cascades::RepeatPattern"
        exports: [
            "bb.cascades/RepeatPattern 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Fill": 0,
                "X": 1,
                "Y": 2,
                "XY": 3
            }
        }
    }
    Component {
        name: "bb::cascades::ResourceState"
        exports: [
            "bb.cascades/ResourceState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Unknown": 0,
                "Loading": 1,
                "Loaded": 2,
                "ErrorNotFound": 3,
                "ErrorInvalidFormat": 4,
                "ErrorMemory": 5
            }
        }
    }
    Component {
        name: "bb::cascades::ResourceTracker"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/ResourceTracker 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "state"; type: "bb::cascades::ResourceState::Type"; isReadonly: true }
        Signal {
            name: "stateChanged"
            Parameter { name: "newState"; type: "bb::cascades::ResourceState::Type" }
        }
        Method { name: "hasErrors"; type: "bool" }
    }
    Component {
        name: "bb::cascades::RotateTransition"
        prototype: "bb::cascades::AbstractTransition"
        exports: [
            "bb.cascades/RotateTransition 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "toAngleZ"; type: "float" }
        Property { name: "toAngleZSet"; type: "bool"; isReadonly: true }
        Property { name: "fromAngleZ"; type: "float" }
        Property { name: "fromAngleZSet"; type: "bool"; isReadonly: true }
        Signal {
            name: "fromAngleZChanged"
            Parameter { name: "fromAngleZ"; type: "float" }
        }
        Signal {
            name: "toAngleZChanged"
            Parameter { name: "toAngleZ"; type: "float" }
        }
        Method {
            name: "setFromAngleZ"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetFromAngleZ" }
        Method {
            name: "setToAngleZ"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetToAngleZ" }
    }
    Component {
        name: "bb::cascades::SaturateEffect"
        prototype: "bb::cascades::AbstractEffect"
        exports: [
            "bb.cascades/SaturateEffect 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "saturation"; type: "float" }
        Signal {
            name: "saturationChanged"
            Parameter { name: "saturation"; type: "float" }
        }
        Method {
            name: "setSaturation"
            Parameter { name: "saturation"; type: "float" }
        }
        Method { name: "resetSaturation" }
    }
    Component {
        name: "bb::cascades::ScaleTransition"
        prototype: "bb::cascades::AbstractTransition"
        exports: [
            "bb.cascades/ScaleTransition 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "toX"; type: "float" }
        Property { name: "toXSet"; type: "bool"; isReadonly: true }
        Property { name: "toY"; type: "float" }
        Property { name: "toYSet"; type: "bool"; isReadonly: true }
        Property { name: "fromX"; type: "float" }
        Property { name: "fromXSet"; type: "bool"; isReadonly: true }
        Property { name: "fromY"; type: "float" }
        Property { name: "fromYSet"; type: "bool"; isReadonly: true }
        Signal {
            name: "fromXChanged"
            Parameter { name: "fromX"; type: "float" }
        }
        Signal {
            name: "toXChanged"
            Parameter { name: "toX"; type: "float" }
        }
        Signal {
            name: "fromYChanged"
            Parameter { name: "fromY"; type: "float" }
        }
        Signal {
            name: "toYChanged"
            Parameter { name: "toY"; type: "float" }
        }
        Method {
            name: "setFromX"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetFromX" }
        Method {
            name: "setToX"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetToX" }
        Method {
            name: "setFromY"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetFromY" }
        Method {
            name: "setToY"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetToY" }
    }
    Component {
        name: "bb::cascades::ScalingMethod"
        exports: [
            "bb.cascades/ScalingMethod 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "AspectFit": 0,
                "AspectFill": 1,
                "Fill": 2,
                "None": 3
            }
        }
    }
    Component {
        name: "bb::cascades::SceneCover"
        prototype: "bb::cascades::AbstractCover"
        exports: [
            "bb.cascades/SceneCover 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method {
            name: "setContent"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::ScreenIdleMode"
        exports: [
            "bb.cascades/ScreenIdleMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Normal": 0,
                "KeepAwake": 1
            }
        }
    }
    Component {
        name: "bb::cascades::ScrollAnimation"
        exports: [
            "bb.cascades/ScrollAnimation 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "Smooth": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ScrollIndicatorMode"
        exports: [
            "bb.cascades/ScrollIndicatorMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "ProportionalBar": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ScrollMode"
        exports: [
            "bb.cascades/ScrollMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Vertical": 1,
                "Horizontal": 2,
                "Both": 3
            }
        }
    }
    Component {
        name: "bb::cascades::ScrollPosition"
        exports: [
            "bb.cascades/ScrollPosition 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Beginning": 0,
                "End": 1
            }
        }
    }
    Component {
        name: "bb::cascades::ScrollRailsPolicy"
        exports: [
            "bb.cascades/ScrollRailsPolicy 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "LockNearAxes": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ScrollRole"
        exports: [
            "bb.cascades/ScrollRole 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "Main": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ScrollView"
        defaultProperty: "content"
        prototype: "bb::cascades::Control"
        Property { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        Property { name: "contentScale"; type: "float"; isReadonly: true }
        Property {
            name: "scrollViewProperties"
            type: "bb::cascades::ScrollViewProperties"
            isReadonly: true
            isPointer: true
        }
        Property { name: "viewableArea"; type: "QRectF"; isReadonly: true }
        Property { name: "scrollRole"; type: "bb::cascades::ScrollRole::Type" }
        Signal {
            name: "scrollRoleChanged"
            Parameter { name: "newScrollRole"; type: "bb::cascades::ScrollRole::Type" }
        }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "viewableAreaChanging"
            Parameter { name: "viewableArea"; type: "QRectF" }
            Parameter { name: "contentScale"; type: "float" }
        }
        Signal {
            name: "viewableAreaChanged"
            Parameter { name: "viewableArea"; type: "QRectF" }
            Parameter { name: "contentScale"; type: "float" }
        }
        Signal {
            name: "contentScaleChanged"
            Parameter { name: "scale"; type: "float" }
        }
        Method {
            name: "setScrollRole"
            Parameter { name: "scrollRole"; type: "bb::cascades::ScrollRole::Type" }
        }
        Method { name: "resetScrollRole" }
        Method {
            name: "scrollToPoint"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "scrollAnimation"; type: "bb::cascades::ScrollAnimation::Type" }
        }
        Method {
            name: "scrollToPoint"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "resetViewableArea"
            Parameter { name: "scrollAnimation"; type: "bb::cascades::ScrollAnimation::Type" }
        }
        Method { name: "resetViewableArea" }
        Method {
            name: "zoomToPoint"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "contentScale"; type: "float" }
            Parameter { name: "scrollAnimation"; type: "bb::cascades::ScrollAnimation::Type" }
        }
        Method {
            name: "zoomToPoint"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "contentScale"; type: "float" }
        }
        Method {
            name: "zoomToRect"
            Parameter { name: "rect"; type: "QRectF" }
            Parameter { name: "scrollAnimation"; type: "bb::cascades::ScrollAnimation::Type" }
        }
        Method {
            name: "zoomToRect"
            Parameter { name: "rect"; type: "QRectF" }
        }
    }
    Component {
        name: "bb::cascades::ScrollViewProperties"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/ScrollViewProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "overScrollEffectMode"; type: "bb::cascades::OverScrollEffectMode::Type" }
        Property { name: "initialScalingMethod"; type: "bb::cascades::ScalingMethod::Type" }
        Property { name: "scrollMode"; type: "bb::cascades::ScrollMode::Type" }
        Property { name: "scrollRailsPolicy"; type: "bb::cascades::ScrollRailsPolicy::Type" }
        Property { name: "pinchToZoomEnabled"; type: "bool" }
        Property { name: "maxContentScale"; type: "float" }
        Property { name: "minContentScale"; type: "float" }
        Signal {
            name: "overScrollEffectModeChanged"
            Parameter { name: "newOverScrollEffectMode"; type: "bb::cascades::OverScrollEffectMode::Type" }
        }
        Signal {
            name: "scrollModeChanged"
            Parameter { name: "newScrollMode"; type: "bb::cascades::ScrollMode::Type" }
        }
        Signal {
            name: "scrollRailsPolicyChanged"
            Parameter { name: "newScrollRailsPolicy"; type: "bb::cascades::ScrollRailsPolicy::Type" }
        }
        Signal {
            name: "initialScalingMethodChanged"
            Parameter { name: "newInitialScalingMethod"; type: "bb::cascades::ScalingMethod::Type" }
        }
        Signal {
            name: "pinchToZoomEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "minContentScaleChanged"
            Parameter { name: "scale"; type: "float" }
        }
        Signal {
            name: "maxContentScaleChanged"
            Parameter { name: "scale"; type: "float" }
        }
        Method {
            name: "setOverScrollEffectMode"
            Parameter { name: "overScrollEffectMode"; type: "bb::cascades::OverScrollEffectMode::Type" }
        }
        Method { name: "resetOverScrollEffectMode" }
        Method {
            name: "setScrollMode"
            Parameter { name: "scrollMode"; type: "bb::cascades::ScrollMode::Type" }
        }
        Method { name: "resetScrollMode" }
        Method {
            name: "setScrollRailsPolicy"
            Parameter { name: "scrollRailsPolicy"; type: "bb::cascades::ScrollRailsPolicy::Type" }
        }
        Method { name: "resetScrollRailsPolicy" }
        Method {
            name: "setInitialScalingMethod"
            Parameter { name: "scalingMethod"; type: "bb::cascades::ScalingMethod::Type" }
        }
        Method { name: "resetInitialScalingMethod" }
        Method {
            name: "setPinchToZoomEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setMaxContentScale"
            Parameter { name: "scale"; type: "float" }
        }
        Method {
            name: "setMinContentScale"
            Parameter { name: "scale"; type: "float" }
        }
    }
    Component {
        name: "bb::cascades::SegmentedControl"
        defaultProperty: "options"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/SegmentedControl 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "selectedIndex"; type: "int" }
        Property { name: "selectedOption"; type: "bb::cascades::Option"; isPointer: true }
        Property { name: "selectedOptionSet"; type: "bool"; isReadonly: true }
        Property { name: "selectedValue"; type: "QVariant"; isReadonly: true }
        Property { name: "options"; type: "bb::cascades::Option"; isList: true; isReadonly: true }
        Signal {
            name: "selectedIndexChanged"
            Parameter { name: "selectedIndex"; type: "int" }
        }
        Signal {
            name: "selectedOptionChanged"
            Parameter { name: "selectedOption"; type: "bb::cascades::Option"; isPointer: true }
        }
        Signal {
            name: "selectedOptionSetChanged"
            Parameter { name: "selectedOptionSet"; type: "bool" }
        }
        Signal {
            name: "selectedValueChanged"
            Parameter { name: "selectedValue"; type: "QVariant" }
        }
        Signal {
            name: "optionAdded"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Signal {
            name: "optionRemoved"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "setSelectedIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "resetSelectedIndex" }
        Method {
            name: "setSelectedOption"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "resetSelectedOption" }
        Method {
            name: "add"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "removeAll" }
        Method {
            name: "at"
            type: "bb::cascades::Option*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "count"; type: "int" }
    }
    Component {
        name: "bb::cascades::SequentialAnimation"
        defaultProperty: "animations"
        prototype: "bb::cascades::GroupAnimation"
        exports: [
            "bb.cascades/SequentialAnimation 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::SettingsActionItem"
        prototype: "bb::cascades::AbstractActionItem"
        exports: [
            "bb.cascades/SettingsActionItem 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::Sheet"
        defaultProperty: "content"
        prototype: "bb::cascades::AbstractDialog"
        exports: [
            "bb.cascades/Sheet 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "content"; type: "bb::cascades::AbstractPane"; isPointer: true }
        Property { name: "peekEnabled"; type: "bool" }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "bb::cascades::AbstractPane"; isPointer: true }
        }
        Signal {
            name: "peekEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setContent"
            Parameter { name: "content"; type: "bb::cascades::AbstractPane"; isPointer: true }
        }
        Method { name: "resetContent" }
        Method {
            name: "setPeekEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetPeekEnabled" }
    }
    Component {
        name: "bb::cascades::Shortcut"
        prototype: "bb::cascades::AbstractShortcut"
        exports: [
            "bb.cascades/Shortcut 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "key"; type: "string" }
        Signal {
            name: "keyChanged"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "setKey"
            Parameter { name: "key"; type: "string" }
        }
        Method { name: "resetKey" }
    }
    Component {
        name: "bb::cascades::ShortcutTriggerMode"
        exports: [
            "bb.cascades/ShortcutTriggerMode 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Tap": 1,
                "Press": 2,
                "LongPress": 3
            }
        }
    }
    Component {
        name: "bb::cascades::SidebarState"
        exports: [
            "bb.cascades/SidebarState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Hidden": 0,
                "VisibleCompact": 1,
                "VisibleFull": 2
            }
        }
    }
    Component {
        name: "bb::cascades::SidebarVisualState"
        exports: [
            "bb.cascades/SidebarVisualState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Hidden": 0,
                "VisibleCompact": 1,
                "VisibleFull": 2,
                "AnimatingToHidden": 3,
                "AnimatingToVisibleCompact": 4,
                "AnimatingToVisibleFull": 5,
                "Peeking": 6
            }
        }
    }
    Component {
        name: "bb::cascades::SingleLineTextFilter"
        prototype: "bb::cascades::AbstractTextFilter"
        exports: [
            "bb.cascades/SingleLineTextFilter 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::Slider"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/Slider 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "fromValue"; type: "float" }
        Property { name: "toValue"; type: "float" }
        Property { name: "value"; type: "float" }
        Property { name: "immediateValue"; type: "float"; isReadonly: true }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "immediateValueChanged"
            Parameter { name: "immediateValue"; type: "float" }
        }
        Signal {
            name: "toValueChanged"
            Parameter { name: "toValue"; type: "float" }
        }
        Signal {
            name: "fromValueChanged"
            Parameter { name: "fromValue"; type: "float" }
        }
        Method {
            name: "setFromValue"
            Parameter { name: "from"; type: "float" }
        }
        Method { name: "resetFromValue" }
        Method {
            name: "setToValue"
            Parameter { name: "to"; type: "float" }
        }
        Method { name: "resetToValue" }
        Method {
            name: "setRange"
            Parameter { name: "from"; type: "float" }
            Parameter { name: "to"; type: "float" }
        }
        Method { name: "resetRange" }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetValue" }
    }
    Component {
        name: "bb::cascades::SnapMode"
        exports: [
            "bb.cascades/SnapMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "LeadingEdge": 2
            }
        }
    }
    Component {
        name: "bb::cascades::Spacings"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/Spacings 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "leftOffset"; type: "float" }
        Property { name: "rightOffset"; type: "float" }
        Property { name: "topOffset"; type: "float" }
        Property { name: "bottomOffset"; type: "float" }
        Signal {
            name: "leftOffsetChanged"
            Parameter { name: "fOffset"; type: "float" }
        }
        Signal {
            name: "rightOffsetChanged"
            Parameter { name: "fOffset"; type: "float" }
        }
        Signal {
            name: "topOffsetChanged"
            Parameter { name: "fOffset"; type: "float" }
        }
        Signal {
            name: "bottomOffsetChanged"
            Parameter { name: "fOffset"; type: "float" }
        }
        Method {
            name: "setLeftOffset"
            Parameter { name: "fOffset"; type: "float" }
        }
        Method { name: "resetLeftOffset" }
        Method {
            name: "setRightOffset"
            Parameter { name: "fOffset"; type: "float" }
        }
        Method { name: "resetRightOffset" }
        Method {
            name: "setTopOffset"
            Parameter { name: "fOffset"; type: "float" }
        }
        Method { name: "resetTopOffset" }
        Method {
            name: "setBottomOffset"
            Parameter { name: "fOffset"; type: "float" }
        }
        Method { name: "resetBottomOffset" }
    }
    Component {
        name: "bb::cascades::StackLayout"
        prototype: "bb::cascades::Layout"
        exports: [
            "bb.cascades/StackLayout 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "orientation"; type: "bb::cascades::LayoutOrientation::Type" }
        Signal {
            name: "orientationChanged"
            Parameter { name: "newOrientation"; type: "bb::cascades::LayoutOrientation::Type" }
        }
        Method {
            name: "setOrientation"
            Parameter { name: "orientation"; type: "bb::cascades::LayoutOrientation::Type" }
        }
        Method { name: "resetOrientation" }
    }
    Component {
        name: "bb::cascades::StackLayoutProperties"
        prototype: "bb::cascades::LayoutProperties"
        exports: [
            "bb.cascades/StackLayoutProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "spaceQuota"; type: "float" }
        Signal {
            name: "spaceQuotaChanged"
            Parameter { name: "spaceQuota"; type: "float" }
        }
        Method {
            name: "setSpaceQuota"
            Parameter { name: "_spaceQuota"; type: "float" }
        }
        Method { name: "resetSpaceQuota" }
    }
    Component {
        name: "bb::cascades::StackListLayout"
        prototype: "bb::cascades::ListLayout"
        exports: [
            "bb.cascades/StackListLayout 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "orientation"; type: "bb::cascades::LayoutOrientation::Type" }
        Property { name: "headerMode"; type: "bb::cascades::ListHeaderMode::Type" }
        Signal {
            name: "orientationChanged"
            Parameter { name: "newOrientation"; type: "bb::cascades::LayoutOrientation::Type" }
        }
        Signal {
            name: "headerModeChanged"
            Parameter { name: "newHeaderMode"; type: "bb::cascades::ListHeaderMode::Type" }
        }
        Method {
            name: "setOrientation"
            Parameter { name: "orientation"; type: "bb::cascades::LayoutOrientation::Type" }
        }
        Method { name: "resetOrientation" }
        Method {
            name: "setHeaderMode"
            Parameter { name: "newHeaderMode"; type: "bb::cascades::ListHeaderMode::Type" }
        }
        Method { name: "resetHeaderMode" }
    }
    Component {
        name: "bb::cascades::StandardListItem"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/StandardListItem 1.0",
            "bb.cascades/StandardListItem 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        Property { name: "image"; type: "QVariant" }
        Property { name: "imageSource"; type: "QUrl" }
        Property { name: "title"; type: "string" }
        Property { name: "status"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "imageSpaceReserved"; type: "bool" }
        Property { name: "textFormat"; type: "bb::cascades::TextFormat::Type" }
        Property {
            name: "imageFocusedEffect"
            revision: 4
            type: "bb::cascades::ImageFocusedEffect::Type"
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageSourceChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "string" }
        }
        Signal {
            name: "descriptionChanged"
            Parameter { name: "description"; type: "string" }
        }
        Signal {
            name: "imageSpaceReservedChanged"
            Parameter { name: "imageSpaceReserved"; type: "bool" }
        }
        Signal {
            name: "textFormatChanged"
            Parameter { name: "newTextFormat"; type: "bb::cascades::TextFormat::Type" }
        }
        Signal {
            name: "imageFocusedEffectChanged"
            revision: 4
            Parameter { name: "newImageFocusedEffect"; type: "bb::cascades::ImageFocusedEffect::Type" }
        }
        Method {
            name: "setImage"
            Parameter { name: "image"; type: "Image" }
        }
        Method { name: "resetImage" }
        Method {
            name: "setImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSource" }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "string" }
        }
        Method { name: "resetTitle" }
        Method {
            name: "setStatus"
            Parameter { name: "status"; type: "string" }
        }
        Method { name: "resetStatus" }
        Method {
            name: "setDescription"
            Parameter { name: "description"; type: "string" }
        }
        Method { name: "resetDescription" }
        Method {
            name: "setImageSpaceReserved"
            Parameter { name: "imageSpaceReserved"; type: "bool" }
        }
        Method { name: "resetImageSpaceReserved" }
        Method {
            name: "setTextFormat"
            Parameter { name: "textFormat"; type: "bb::cascades::TextFormat::Type" }
        }
        Method { name: "resetTextFormat" }
        Method {
            name: "setImageFocusedEffect"
            revision: 4
            Parameter { name: "type"; type: "bb::cascades::ImageFocusedEffect::Type" }
        }
        Method { name: "resetImageFocusedEffect"; revision: 4 }
    }
    Component {
        name: "bb::cascades::StandardPickerItem"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/StandardPickerItem 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "title"; type: "string" }
        Property { name: "image"; type: "QVariant" }
        Property { name: "imageSource"; type: "QUrl" }
        Property { name: "background"; type: "QVariant" }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Signal {
            name: "imageChanged"
            Parameter { name: "image"; type: "QVariant" }
        }
        Signal {
            name: "imageSourceChanged"
            Parameter { name: "imageSource"; type: "QUrl" }
        }
        Signal {
            name: "backgroundChanged"
            Parameter { name: "background"; type: "bb::cascades::Paint" }
        }
        Signal {
            name: "backgroundChanged"
            Parameter { name: "background"; type: "QVariant" }
        }
        Method {
            name: "setImage"
            Parameter { name: "image"; type: "bb::cascades::Image" }
        }
        Method { name: "resetImage" }
        Method {
            name: "setImageSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method { name: "resetImageSource" }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "string" }
        }
        Method { name: "resetTitle" }
        Method {
            name: "setBackground"
            Parameter { name: "paint"; type: "bb::cascades::Paint" }
        }
        Method { name: "resetBackground" }
        Method {
            name: "setImageQml"
            Parameter { name: "image"; type: "QVariant" }
        }
    }
    Component {
        name: "bb::cascades::SubmitKey"
        exports: [
            "bb.cascades/SubmitKey 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Default": 1,
                "Go": 2,
                "Join": 3,
                "Next": 4,
                "Search": 5,
                "Send": 6,
                "Submit": 7,
                "Done": 8,
                "Connect": 9,
                "EnterKey": 10,
                "Replace": 11
            }
        }
    }
    Component {
        name: "bb::cascades::SubmitKeyFocusBehavior"
        exports: [
            "bb.cascades/SubmitKeyFocusBehavior 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Keep": 1,
                "Next": 2,
                "Lose": 3
            }
        }
    }
    Component {
        name: "bb::cascades::SupportedDisplayOrientation"
        exports: [
            "bb.cascades/SupportedDisplayOrientation 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "CurrentLocked": 0,
                "All": 1,
                "DisplayLandscape": 2,
                "DisplayPortrait": 3,
                "DeviceNorth": 4
            }
        }
    }
    Component {
        name: "bb::cascades::SystemShortcut"
        prototype: "bb::cascades::AbstractShortcut"
        exports: [
            "bb.cascades/SystemShortcut 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "type"; type: "bb::cascades::SystemShortcuts::Type" }
    }
    Component {
        name: "bb::cascades::SystemShortcuts"
        exports: [
            "bb.cascades/SystemShortcuts 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "ScrollDownOneScreen": 61526,
                "ScrollUpOneScreen": 61525,
                "ZoomIn": 62010,
                "ZoomOut": 62011,
                "JumpToTop": 61520,
                "JumpToBottom": 61527,
                "NextSection": 62003,
                "PreviousSection": 62002,
                "Reply": 62022,
                "Forward": 62023,
                "Edit": 61985,
                "Search": 61998,
                "Undo": 61993,
                "CreateNew": 61984
            }
        }
    }
    Component {
        name: "bb::cascades::Tab"
        defaultProperty: "content"
        prototype: "bb::cascades::AbstractActionItem"
        exports: [
            "bb.cascades/Tab 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "description"; type: "string" }
        Property { name: "content"; type: "bb::cascades::AbstractPane"; isPointer: true }
        Property { name: "newContentAvailable"; type: "bool" }
        Property { name: "unreadContentCount"; type: "int" }
        Signal {
            name: "descriptionChanged"
            Parameter { name: "description"; type: "string" }
        }
        Signal {
            name: "contentChanged"
            Parameter { name: "content"; type: "bb::cascades::AbstractPane"; isPointer: true }
        }
        Signal {
            name: "newContentAvailableChanged"
            Parameter { name: "isNewContentAvailable"; type: "bool" }
        }
        Signal {
            name: "unreadContentCountChanged"
            Parameter { name: "unreadContentCount"; type: "int" }
        }
        Method {
            name: "setDescription"
            Parameter { name: "description"; type: "string" }
        }
        Method { name: "resetDescription" }
        Method {
            name: "setContent"
            Parameter { name: "content"; type: "bb::cascades::AbstractPane"; isPointer: true }
        }
        Method { name: "resetContent" }
        Method {
            name: "setNewContentAvailable"
            Parameter { name: "isNewContentAvailable"; type: "bool" }
        }
        Method { name: "resetNewContentAvailable" }
        Method {
            name: "setUnreadContentCount"
            Parameter { name: "unreadContentCount"; type: "int" }
        }
        Method { name: "resetUnreadContentCount" }
    }
    Component {
        name: "bb::cascades::TabDelegateActivationPolicy"
        exports: [
            "bb.cascades/TabDelegateActivationPolicy 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "ActivatedWhileSelected": 2,
                "ActivateWhenSelected": 3,
                "ActivateImmediately": 4
            }
        }
    }
    Component {
        name: "bb::cascades::TabbedPane"
        defaultProperty: "tabs"
        prototype: "bb::cascades::AbstractPane"
        exports: [
            "bb.cascades/TabbedPane 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "tabs"; type: "bb::cascades::Tab"; isList: true; isReadonly: true }
        Property { name: "activeTab"; type: "bb::cascades::Tab"; isPointer: true }
        Property { name: "activePane"; type: "bb::cascades::AbstractPane"; isPointer: true }
        Property { name: "showTabsOnActionBar"; type: "bool" }
        Property { name: "sidebarState"; type: "bb::cascades::SidebarState::Type" }
        Property { name: "peekEnabled"; type: "bool" }
        Property {
            name: "sidebarVisualState"
            type: "bb::cascades::SidebarVisualState::Type"
            isReadonly: true
        }
        Signal {
            name: "activeTabChanged"
            Parameter { name: "activeTab"; type: "bb::cascades::Tab"; isPointer: true }
        }
        Signal {
            name: "activePaneChanged"
            Parameter { name: "activePane"; type: "bb::cascades::AbstractPane"; isPointer: true }
        }
        Signal {
            name: "activePaneTransitionEnded"
            Parameter { name: "activePane"; type: "bb::cascades::AbstractPane"; isPointer: true }
        }
        Signal {
            name: "tabAdded"
            Parameter { name: "tab"; type: "bb::cascades::Tab"; isPointer: true }
        }
        Signal {
            name: "tabRemoved"
            Parameter { name: "tab"; type: "bb::cascades::Tab"; isPointer: true }
        }
        Signal {
            name: "showTabsOnActionBarChanged"
            Parameter { name: "showTabsOnActionBar"; type: "bool" }
        }
        Signal {
            name: "sidebarStateChanged"
            Parameter { name: "newSidebarState"; type: "bb::cascades::SidebarState::Type" }
        }
        Signal {
            name: "peekEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "sidebarVisualStateChanged"
            Parameter { name: "newSidebarVisualState"; type: "bb::cascades::SidebarVisualState::Type" }
        }
        Method { name: "resetSidebarState" }
        Method {
            name: "setShowTabsOnActionBar"
            Parameter { name: "showTabsOnActionBar"; type: "bool" }
        }
        Method { name: "resetShowTabsOnActionBar" }
        Method {
            name: "setPeekEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetPeekEnabled" }
        Method {
            name: "add"
            Parameter { name: "tab"; type: "bb::cascades::Tab"; isPointer: true }
        }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "tab"; type: "bb::cascades::Tab"; isPointer: true }
        }
        Method {
            name: "at"
            type: "bb::cascades::Tab*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "tab"; type: "bb::cascades::Tab"; isPointer: true }
        }
        Method { name: "count"; type: "int" }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "tab"; type: "bb::cascades::Tab"; isPointer: true }
        }
        Method { name: "removeAll" }
    }
    Component {
        name: "bb::cascades::TapEvent"
        prototype: "bb::cascades::AbstractGestureEvent"
        exports: [
            "bb.cascades/TapEvent 1.0",
            "bb.cascades/TapEvent 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        isCreatable: false
    }
    Component {
        name: "bb::cascades::TapHandler"
        prototype: "bb::cascades::GestureHandler"
        exports: [
            "bb.cascades/TapHandler 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "tapped"
            Parameter { name: "event"; type: "bb::cascades::TapEvent"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::TextAlign"
        exports: [
            "bb.cascades/TextAlign 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Center": 1,
                "Left": 2,
                "Right": 3,
                "Justify": 4
            }
        }
    }
    Component {
        name: "bb::cascades::TextArea"
        prototype: "bb::cascades::AbstractTextControl"
        exports: [
            "bb.cascades/TextArea 1.0",
            "bb.cascades/TextArea 1.2"
        ]
        exportMetaObjectRevisions: [
            0,
            2
        ]
        Property { name: "editable"; type: "bool" }
        Property { name: "inputMode"; type: "bb::cascades::TextAreaInputMode::Type" }
        Property { name: "hintText"; type: "string" }
        Property { name: "backgroundVisible"; type: "bool" }
        Property { name: "focusHighlightEnabled"; type: "bool" }
        Property {
            name: "input"
            type: "bb::cascades::TextInputProperties"
            isReadonly: true
            isPointer: true
        }
        Property { name: "editor"; type: "bb::cascades::TextEditor"; isReadonly: true; isPointer: true }
        Property { name: "scrollMode"; type: "bb::cascades::TextAreaScrollMode::Type" }
        Property { name: "maximumLength"; type: "int" }
        Property { name: "textFilter"; type: "bb::cascades::AbstractTextFilter"; isPointer: true }
        Property {
            name: "autoSize"
            revision: 2
            type: "bb::cascades::TextAreaAutoSizeProperties"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "textFit"
            revision: 2
            type: "bb::cascades::TextAreaTextFitProperties"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "textChanging"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "backgroundVisibleChanged"
            Parameter { name: "backgroundVisible"; type: "bool" }
        }
        Signal {
            name: "focusHighlightEnabledChanged"
            Parameter { name: "focusHighlightEnabled"; type: "bool" }
        }
        Signal {
            name: "hintTextChanged"
            Parameter { name: "hintText"; type: "string" }
        }
        Signal {
            name: "editableChanged"
            Parameter { name: "editable"; type: "bool" }
        }
        Signal {
            name: "inputModeChanged"
            Parameter { name: "newInputMode"; type: "bb::cascades::TextAreaInputMode::Type" }
        }
        Signal {
            name: "scrollModeChanged"
            Parameter { name: "newScrollMode"; type: "bb::cascades::TextAreaScrollMode::Type" }
        }
        Signal {
            name: "maximumLengthChanged"
            Parameter { name: "maximumLength"; type: "int" }
        }
        Signal {
            name: "textFilterChanged"
            Parameter { name: "textFilter"; type: "bb::cascades::AbstractTextFilter"; isPointer: true }
        }
        Method {
            name: "setEditable"
            Parameter { name: "editable"; type: "bool" }
        }
        Method { name: "resetEditable" }
        Method {
            name: "setHintText"
            Parameter { name: "hintText"; type: "string" }
        }
        Method { name: "resetHintText" }
        Method {
            name: "setInputMode"
            Parameter { name: "inputMode"; type: "bb::cascades::TextAreaInputMode::Type" }
        }
        Method { name: "resetInputMode" }
        Method {
            name: "setBackgroundVisible"
            Parameter { name: "backgroundVisible"; type: "bool" }
        }
        Method { name: "resetBackgroundVisible" }
        Method {
            name: "setFocusHighlightEnabled"
            Parameter { name: "focusHighlightEnabled"; type: "bool" }
        }
        Method { name: "resetFocusHighlightEnabled" }
        Method {
            name: "setScrollMode"
            Parameter { name: "scrollMode"; type: "bb::cascades::TextAreaScrollMode::Type" }
        }
        Method { name: "resetScrollMode" }
        Method {
            name: "setMaximumLength"
            Parameter { name: "maximumLength"; type: "int" }
        }
        Method { name: "resetMaximumLength" }
        Method {
            name: "setTextFilter"
            Parameter { name: "textFilter"; type: "bb::cascades::AbstractTextFilter"; isPointer: true }
        }
        Method { name: "resetTextFilter" }
    }
    Component {
        name: "bb::cascades::TextAreaAutoSizeProperties"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/TextAreaAutoSizeProperties 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "maxLineCount"; type: "int" }
        Signal {
            name: "maxLineCountChanged"
            Parameter { name: "maxLineCount"; type: "int" }
        }
        Method {
            name: "setMaxLineCount"
            Parameter { name: "maxLineCount"; type: "int" }
        }
        Method { name: "resetMaxLineCount" }
    }
    Component {
        name: "bb::cascades::TextAreaInputMode"
        exports: [
            "bb.cascades/TextAreaInputMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Text": 1,
                "Chat": 2,
                "EmailAddress": 3,
                "Custom": 4
            }
        }
    }
    Component {
        name: "bb::cascades::TextAreaScrollMode"
        exports: [
            "bb.cascades/TextAreaScrollMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Elastic": 1,
                "Stiff": 2
            }
        }
    }
    Component {
        name: "bb::cascades::TextAreaTextFitProperties"
        prototype: "bb::cascades::TextFitProperties"
        exports: [
            "bb.cascades/TextAreaTextFitProperties 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::TextAutoFit"
        exports: [
            "bb.cascades/TextAutoFit 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "None": 1,
                "FitToBounds": 2
            }
        }
    }
    Component {
        name: "bb::cascades::TextContentFlag"
        exports: [
            "bb.cascades/TextContentFlag 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "ActiveText": 1,
                "ActiveTextOff": 2,
                "Emoticons": 4,
                "EmoticonsOff": 8
            }
        }
        Enum {
            name: "Types"
            values: {
                "Default": 0,
                "ActiveText": 1,
                "ActiveTextOff": 2,
                "Emoticons": 4,
                "EmoticonsOff": 8
            }
        }
    }
    Component {
        name: "bb::cascades::TextContentProperties"
        prototype: "QObject"
        exports: [
            "bb.cascades/TextContentProperties 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "flags"; type: "bb::cascades::TextContentFlag::Types" }
        Signal {
            name: "flagsChanged"
            Parameter { name: "newFlags"; type: "bb::cascades::TextContentFlag::Types" }
        }
        Method { name: "resetFlags" }
    }
    Component {
        name: "bb::cascades::TextEditor"
        prototype: "QObject"
        exports: [
            "bb.cascades/TextEditor 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "selectedText"; type: "string"; isReadonly: true }
        Property { name: "cursorPosition"; type: "int" }
        Property { name: "selectionStart"; type: "int"; isReadonly: true }
        Property { name: "selectionEnd"; type: "int"; isReadonly: true }
        Signal {
            name: "selectedTextChanged"
            Parameter { name: "selectedText"; type: "string" }
        }
        Signal {
            name: "cursorPositionChanged"
            Parameter { name: "cursorPosition"; type: "int" }
        }
        Signal {
            name: "selectionStartChanged"
            Parameter { name: "selectionStart"; type: "int" }
        }
        Signal {
            name: "selectionEndChanged"
            Parameter { name: "selectionEnd"; type: "int" }
        }
        Method {
            name: "insertPlainText"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setSelection"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::TextField"
        prototype: "bb::cascades::AbstractTextControl"
        exports: [
            "bb.cascades/TextField 1.0",
            "bb.cascades/TextField 1.2"
        ]
        exportMetaObjectRevisions: [
            0,
            2
        ]
        Property { name: "hintText"; type: "string" }
        Property { name: "inputMode"; type: "bb::cascades::TextFieldInputMode::Type" }
        Property { name: "backgroundVisible"; type: "bool" }
        Property { name: "clearButtonVisible"; type: "bool" }
        Property { name: "focusHighlightEnabled"; type: "bool" }
        Property {
            name: "input"
            type: "bb::cascades::TextInputProperties"
            isReadonly: true
            isPointer: true
        }
        Property { name: "editor"; type: "bb::cascades::TextEditor"; isReadonly: true; isPointer: true }
        Property { name: "autoFit"; type: "bb::cascades::TextAutoFit::Type" }
        Property { name: "validator"; type: "bb::cascades::Validator"; isPointer: true }
        Property { name: "maximumLength"; revision: 2; type: "int" }
        Property {
            name: "textFit"
            revision: 2
            type: "bb::cascades::TextFieldTextFitProperties"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "textChanging"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "clearButtonVisibleChanged"
            Parameter { name: "clearButtonVisible"; type: "bool" }
        }
        Signal {
            name: "backgroundVisibleChanged"
            Parameter { name: "backgroundVisible"; type: "bool" }
        }
        Signal {
            name: "focusHighlightEnabledChanged"
            Parameter { name: "focusHighlightEnabled"; type: "bool" }
        }
        Signal {
            name: "hintTextChanged"
            Parameter { name: "hintText"; type: "string" }
        }
        Signal {
            name: "inputModeChanged"
            Parameter { name: "newInputMode"; type: "bb::cascades::TextFieldInputMode::Type" }
        }
        Signal {
            name: "autoFitChanged"
            Parameter { name: "newAutoFit"; type: "bb::cascades::TextAutoFit::Type" }
        }
        Signal {
            name: "validatorChanged"
            Parameter { name: "validator"; type: "bb::cascades::Validator"; isPointer: true }
        }
        Signal {
            name: "maximumLengthChanged"
            revision: 2
            Parameter { name: "maximumLength"; type: "int" }
        }
        Method {
            name: "setHintText"
            Parameter { name: "hintText"; type: "string" }
        }
        Method { name: "resetHintText" }
        Method {
            name: "setInputMode"
            Parameter { name: "inputMode"; type: "bb::cascades::TextFieldInputMode::Type" }
        }
        Method { name: "resetInputMode" }
        Method {
            name: "setBackgroundVisible"
            Parameter { name: "backgroundVisible"; type: "bool" }
        }
        Method { name: "resetBackgroundVisible" }
        Method {
            name: "setClearButtonVisible"
            Parameter { name: "clearButtonVisible"; type: "bool" }
        }
        Method { name: "resetClearButtonVisible" }
        Method {
            name: "setFocusHighlightEnabled"
            Parameter { name: "focusHighlightEnabled"; type: "bool" }
        }
        Method { name: "resetFocusHighlightEnabled" }
        Method {
            name: "setAutoFit"
            Parameter { name: "autoFit"; type: "bb::cascades::TextAutoFit::Type" }
        }
        Method {
            name: "setValidator"
            Parameter { name: "validator"; type: "bb::cascades::Validator"; isPointer: true }
        }
        Method { name: "resetValidator" }
        Method {
            name: "setMaximumLength"
            revision: 2
            Parameter { name: "maximumLength"; type: "int" }
        }
        Method { name: "resetMaximumLength"; revision: 2 }
        Method { name: "resetAutoFit" }
    }
    Component {
        name: "bb::cascades::TextFieldInputMode"
        exports: [
            "bb.cascades/TextFieldInputMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Text": 1,
                "EmailAddress": 2,
                "Password": 3,
                "Chat": 4,
                "Url": 5,
                "PhoneNumber": 6,
                "NumbersAndPunctuation": 7,
                "NumericPassword": 8,
                "Pin": 9,
                "Custom": 10
            }
        }
    }
    Component {
        name: "bb::cascades::TextFieldTextFitProperties"
        prototype: "bb::cascades::TextFitProperties"
        exports: [
            "bb.cascades/TextFieldTextFitProperties 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::TextFieldTitleBarKindProperties"
        prototype: "bb::cascades::AbstractTitleBarKindProperties"
        exports: [
            "bb.cascades/TextFieldTitleBarKindProperties 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "textField"; type: "bb::cascades::TextField"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "bb::cascades::TextFitProperties"
        prototype: "bb::cascades::BaseObject"
        Property { name: "minFontSizeValue"; type: "float" }
        Property { name: "maxFontSizeValue"; type: "float" }
        Signal {
            name: "minFontSizeValueChanged"
            Parameter { name: "minFontSizeValue"; type: "float" }
        }
        Signal {
            name: "maxFontSizeValueChanged"
            Parameter { name: "maxFontSizeValue"; type: "float" }
        }
        Method {
            name: "setMinFontSizeValue"
            Parameter { name: "minFontSizeValue"; type: "float" }
        }
        Method { name: "resetMinFontSizeValue" }
        Method {
            name: "setMaxFontSizeValue"
            Parameter { name: "maxFontSizeValue"; type: "float" }
        }
        Method { name: "resetMaxFontSizeValue" }
    }
    Component {
        name: "bb::cascades::TextFormat"
        exports: [
            "bb.cascades/TextFormat 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Plain": 1,
                "Html": 2,
                "Auto": 3
            }
        }
    }
    Component {
        name: "bb::cascades::TextInputActionItem"
        prototype: "bb::cascades::AbstractActionItem"
        exports: [
            "bb.cascades/TextInputActionItem 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "text"; type: "string" }
        Property { name: "hintText"; type: "string" }
        Property { name: "status"; type: "string" }
        Property {
            name: "input"
            type: "bb::cascades::TextInputProperties"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "content"
            type: "bb::cascades::TextContentProperties"
            isReadonly: true
            isPointer: true
        }
        Property { name: "editor"; type: "bb::cascades::TextEditor"; isReadonly: true; isPointer: true }
        Property { name: "maximumLength"; type: "int" }
        Property { name: "textFormat"; type: "bb::cascades::TextFormat::Type" }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "textChanging"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "hintTextChanged"
            Parameter { name: "hintText"; type: "string" }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "statusText"; type: "string" }
        }
        Signal {
            name: "textFormatChanged"
            Parameter { name: "newTextFormat"; type: "bb::cascades::TextFormat::Type" }
        }
        Signal {
            name: "maximumLengthChanged"
            Parameter { name: "maximumLength"; type: "int" }
        }
        Method {
            name: "setText"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "resetText" }
        Method {
            name: "setHintText"
            Parameter { name: "hintText"; type: "string" }
        }
        Method {
            name: "setStatus"
            Parameter { name: "statusText"; type: "string" }
        }
        Method { name: "resetHintText" }
        Method { name: "resetStatus" }
        Method {
            name: "setMaximumLength"
            Parameter { name: "maximumLength"; type: "int" }
        }
        Method { name: "resetMaximumLength" }
        Method {
            name: "setTextFormat"
            Parameter { name: "textFormat"; type: "bb::cascades::TextFormat::Type" }
        }
        Method { name: "resetTextFormat" }
        Method { name: "requestFocus" }
        Method { name: "loseFocus" }
    }
    Component {
        name: "bb::cascades::TextInputFlag"
        exports: [
            "bb.cascades/TextInputFlag 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "SpellCheck": 1,
                "SpellCheckOff": 2,
                "Prediction": 4,
                "PredictionOff": 8,
                "AutoCorrection": 16,
                "AutoCorrectionOff": 32,
                "AutoCapitalization": 64,
                "AutoCapitalizationOff": 128,
                "AutoPeriod": 256,
                "AutoPeriodOff": 512,
                "WordSubstitution": 1024,
                "WordSubstitutionOff": 2048,
                "VirtualKeyboard": 4096,
                "VirtualKeyboardOff": 8192,
                "LatinOnly": 16384,
                "LatinOnlyOff": 32768,
                "KeyboardUsageHints": 65536,
                "KeyboardUsageHintsOff": 131072
            }
        }
        Enum {
            name: "Types"
            values: {
                "Default": 0,
                "SpellCheck": 1,
                "SpellCheckOff": 2,
                "Prediction": 4,
                "PredictionOff": 8,
                "AutoCorrection": 16,
                "AutoCorrectionOff": 32,
                "AutoCapitalization": 64,
                "AutoCapitalizationOff": 128,
                "AutoPeriod": 256,
                "AutoPeriodOff": 512,
                "WordSubstitution": 1024,
                "WordSubstitutionOff": 2048,
                "VirtualKeyboard": 4096,
                "VirtualKeyboardOff": 8192,
                "LatinOnly": 16384,
                "LatinOnlyOff": 32768,
                "KeyboardUsageHints": 65536,
                "KeyboardUsageHintsOff": 131072
            }
        }
    }
    Component {
        name: "bb::cascades::TextInputMasking"
        exports: [
            "bb.cascades/TextInputMasking 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Masked": 1,
                "NotMasked": 2,
                "MaskedNotTogglable": 3,
                "NotMaskedNotTogglable": 4
            }
        }
    }
    Component {
        name: "bb::cascades::TextInputProperties"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/TextInputProperties 1.0",
            "bb.cascades/TextInputProperties 1.2",
            "bb.cascades/TextInputProperties 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            2,
            3
        ]
        isCreatable: false
        Property { name: "submitKey"; type: "bb::cascades::SubmitKey::Type" }
        Property { name: "flags"; type: "bb::cascades::TextInputFlag::Types" }
        Property {
            name: "submitKeyFocusBehavior"
            type: "bb::cascades::SubmitKeyFocusBehavior::Type"
        }
        Property { name: "masking"; type: "bb::cascades::TextInputMasking::Type" }
        Property { name: "keyLayout"; revision: 3; type: "bb::cascades::KeyLayout::Type" }
        Signal {
            name: "submitted"
            Parameter { name: "submitter"; type: "bb::cascades::AbstractTextControl"; isPointer: true }
        }
        Signal {
            name: "submitKeyChanged"
            Parameter { name: "submitKey"; type: "bb::cascades::SubmitKey::Type" }
        }
        Signal {
            name: "flagsChanged"
            Parameter { name: "newFlags"; type: "bb::cascades::TextInputFlag::Types" }
        }
        Signal {
            name: "submitKeyFocusBehaviorChanged"
            Parameter {
                name: "newSubmitKeyFocusBehavior"
                type: "bb::cascades::SubmitKeyFocusBehavior::Type"
            }
        }
        Signal {
            name: "maskingChanged"
            Parameter { name: "newMasking"; type: "bb::cascades::TextInputMasking::Type" }
        }
        Signal {
            name: "keyLayoutChanged"
            revision: 3
            Parameter { name: "newKeyLayout"; type: "bb::cascades::KeyLayout::Type" }
        }
        Method { name: "resetSubmitKeyFocusBehavior" }
        Method { name: "resetSubmitKey" }
        Method { name: "resetMasking" }
        Method { name: "resetFlags" }
        Method {
            name: "setKeyLayout"
            revision: 3
            Parameter { name: "keyLayout"; type: "bb::cascades::KeyLayout::Type" }
        }
        Method { name: "resetKeyLayout"; revision: 3 }
    }
    Component {
        name: "bb::cascades::TextStyleDefinition"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/TextStyleDefinition 1.0",
            "bb.cascades/TextStyleDefinition 1.2"
        ]
        exportMetaObjectRevisions: [
            0,
            2
        ]
        Property { name: "base"; type: "QVariant" }
        Property { name: "style"; type: "QVariant"; isReadonly: true }
        Property { name: "fontFamily"; type: "string" }
        Property { name: "fontStyle"; type: "bb::cascades::FontStyle::Type" }
        Property { name: "fontWeight"; type: "bb::cascades::FontWeight::Type" }
        Property { name: "color"; type: "QVariant" }
        Property { name: "lineHeight"; type: "float" }
        Property { name: "fontSizeValue"; type: "float" }
        Property { name: "fontSize"; type: "bb::cascades::FontSize::Type" }
        Property { name: "textAlign"; type: "bb::cascades::TextAlign::Type" }
        Property {
            name: "rules"
            revision: 2
            type: "bb::cascades::AbstractTextStyleRule"
            isList: true
            isReadonly: true
        }
        Signal { name: "styleChanged" }
        Signal {
            name: "baseChanged"
            Parameter { name: "textStyle"; type: "bb::cascades::TextStyle" }
        }
        Signal {
            name: "baseChanged"
            Parameter { name: "textStyle"; type: "QVariant" }
        }
        Signal {
            name: "fontFamilyChanged"
            Parameter { name: "fontFamily"; type: "string" }
        }
        Signal {
            name: "fontStyleChanged"
            Parameter { name: "newFontStyle"; type: "bb::cascades::FontStyle::Type" }
        }
        Signal {
            name: "fontWeightChanged"
            Parameter { name: "newFontWeight"; type: "bb::cascades::FontWeight::Type" }
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "bb::cascades::ColorPaint" }
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QVariant" }
        }
        Signal {
            name: "lineHeightChanged"
            Parameter { name: "lineHeight"; type: "float" }
        }
        Signal {
            name: "fontSizeValueChanged"
            Parameter { name: "fontSizeValue"; type: "float" }
        }
        Signal {
            name: "fontSizeChanged"
            Parameter { name: "newFontSize"; type: "bb::cascades::FontSize::Type" }
        }
        Signal {
            name: "textAlignChanged"
            Parameter { name: "newAlignment"; type: "bb::cascades::TextAlign::Type" }
        }
        Method {
            name: "setFontFamily"
            Parameter { name: "fontFamily"; type: "string" }
        }
        Method {
            name: "setFontStyle"
            Parameter { name: "fontStyle"; type: "bb::cascades::FontStyle::Type" }
        }
        Method {
            name: "setFontWeight"
            Parameter { name: "fontWeight"; type: "bb::cascades::FontWeight::Type" }
        }
        Method {
            name: "setColor"
            Parameter { name: "color"; type: "bb::cascades::ColorPaint" }
        }
        Method {
            name: "setColor"
            Parameter { name: "color"; type: "QVariant" }
        }
        Method {
            name: "setLineHeight"
            Parameter { name: "lineHeight"; type: "float" }
        }
        Method {
            name: "setFontSizeValue"
            Parameter { name: "size"; type: "float" }
        }
        Method {
            name: "setFontSize"
            Parameter { name: "size"; type: "bb::cascades::FontSize::Type" }
        }
        Method {
            name: "setTextAlign"
            Parameter { name: "alignment"; type: "bb::cascades::TextAlign::Type" }
        }
        Method { name: "resetBase" }
        Method { name: "resetFontFamily" }
        Method { name: "resetFontStyle" }
        Method { name: "resetFontWeight" }
        Method { name: "resetColor" }
        Method { name: "resetLineHeight" }
        Method { name: "resetFontSizeValue" }
        Method { name: "resetFontSize" }
        Method { name: "resetTextAlign" }
    }
    Component {
        name: "bb::cascades::Theme"
        prototype: "QObject"
        exports: [
            "bb.cascades/Theme 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property {
            name: "colorTheme"
            type: "bb::cascades::ColorTheme"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "bb::cascades::ThemeSupport"
        prototype: "QObject"
        exports: [
            "bb.cascades/ThemeSupport 1.0",
            "bb.cascades/ThemeSupport 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        isCreatable: false
        Property { name: "theme"; type: "bb::cascades::Theme"; isReadonly: true; isPointer: true }
        Signal {
            name: "themeChanged"
            Parameter { name: "theme"; type: "const bb::cascades::Theme"; isPointer: true }
        }
        Method {
            name: "setVisualStyleAndPrimaryColor"
            revision: 3
            Parameter { name: "visualStyle"; type: "bb::cascades::VisualStyle::Type" }
            Parameter { name: "primary"; type: "bb::cascades::Color" }
            Parameter { name: "primaryBase"; type: "bb::cascades::Color" }
        }
        Method {
            name: "setVisualStyleAndPrimaryColor"
            revision: 3
            Parameter { name: "visualStyle"; type: "bb::cascades::VisualStyle::Type" }
            Parameter { name: "primary"; type: "bb::cascades::Color" }
        }
        Method {
            name: "setVisualStyle"
            revision: 3
            Parameter { name: "visualStyle"; type: "bb::cascades::VisualStyle::Type" }
        }
        Method {
            name: "setPrimaryColor"
            revision: 3
            Parameter { name: "primary"; type: "bb::cascades::Color" }
            Parameter { name: "primaryBase"; type: "bb::cascades::Color" }
        }
        Method {
            name: "setPrimaryColor"
            revision: 3
            Parameter { name: "primary"; type: "bb::cascades::Color" }
        }
        Method {
            name: "setVisualStyleAndPrimaryColor"
            revision: 3
            Parameter { name: "visualStyle"; type: "int" }
            Parameter { name: "primary"; type: "QVariant" }
            Parameter { name: "primaryBase"; type: "QVariant" }
        }
        Method {
            name: "setVisualStyleAndPrimaryColor"
            revision: 3
            Parameter { name: "visualStyle"; type: "int" }
            Parameter { name: "primary"; type: "QVariant" }
        }
        Method {
            name: "setVisualStyleAndPrimaryColor"
            revision: 3
            Parameter { name: "visualStyle"; type: "int" }
        }
        Method {
            name: "setVisualStyle"
            revision: 3
            Parameter { name: "visualStyle"; type: "int" }
        }
        Method {
            name: "setPrimaryColor"
            revision: 3
            Parameter { name: "primary"; type: "QVariant" }
            Parameter { name: "primaryBase"; type: "QVariant" }
        }
        Method {
            name: "setPrimaryColor"
            revision: 3
            Parameter { name: "primary"; type: "QVariant" }
        }
    }
    Component {
        name: "bb::cascades::TitleBar"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/TitleBar 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "kind"; type: "bb::cascades::TitleBarKind::Type" }
        Property { name: "visibility"; type: "bb::cascades::ChromeVisibility::Type" }
        Property { name: "title"; type: "string" }
        Property { name: "branded"; type: "bb::cascades::TriBool::Type" }
        Property { name: "appearance"; type: "bb::cascades::TitleBarAppearance::Type" }
        Property { name: "acceptAction"; type: "bb::cascades::ActionItem"; isPointer: true }
        Property { name: "dismissAction"; type: "bb::cascades::ActionItem"; isPointer: true }
        Property { name: "selectedIndex"; type: "int" }
        Property { name: "selectedOption"; type: "bb::cascades::Option"; isPointer: true }
        Property { name: "selectedOptionSet"; type: "bool"; isReadonly: true }
        Property { name: "selectedValue"; type: "QVariant"; isReadonly: true }
        Property { name: "options"; type: "bb::cascades::Option"; isList: true; isReadonly: true }
        Property {
            name: "kindProperties"
            type: "bb::cascades::AbstractTitleBarKindProperties"
            isPointer: true
        }
        Property { name: "scrollBehavior"; type: "bb::cascades::TitleBarScrollBehavior::Type" }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "newVisibility"; type: "bb::cascades::ChromeVisibility::Type" }
        }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "brandedChanged"
            Parameter { name: "newBrand"; type: "bb::cascades::TriBool::Type" }
        }
        Signal {
            name: "appearanceChanged"
            Parameter { name: "newAppearance"; type: "bb::cascades::TitleBarAppearance::Type" }
        }
        Signal {
            name: "acceptActionChanged"
            Parameter { name: "acceptAction"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Signal {
            name: "dismissActionChanged"
            Parameter { name: "dismissAction"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Signal {
            name: "selectedIndexChanged"
            Parameter { name: "selectedIndex"; type: "int" }
        }
        Signal {
            name: "selectedOptionChanged"
            Parameter { name: "selectedOption"; type: "bb::cascades::Option"; isPointer: true }
        }
        Signal {
            name: "selectedOptionSetChanged"
            Parameter { name: "selectedOptionSet"; type: "bool" }
        }
        Signal {
            name: "selectedValueChanged"
            Parameter { name: "selectedValue"; type: "QVariant" }
        }
        Signal {
            name: "optionAdded"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Signal {
            name: "optionRemoved"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Signal {
            name: "kindPropertiesChanged"
            Parameter {
                name: "kindProperties"
                type: "bb::cascades::AbstractTitleBarKindProperties"
                isPointer: true
            }
        }
        Method {
            name: "setVisibility"
            Parameter { name: "visibility"; type: "bb::cascades::ChromeVisibility::Type" }
        }
        Method { name: "resetVisibility" }
        Method {
            name: "setTitle"
            Parameter { name: "title"; type: "string" }
        }
        Method { name: "resetTitle" }
        Method {
            name: "setBranded"
            Parameter { name: "branded"; type: "bb::cascades::TriBool::Type" }
        }
        Method { name: "resetBranded" }
        Method {
            name: "setAppearance"
            Parameter { name: "appearance"; type: "bb::cascades::TitleBarAppearance::Type" }
        }
        Method { name: "resetAppearance" }
        Method {
            name: "setAcceptAction"
            Parameter { name: "acceptAction"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Method { name: "resetAcceptAction" }
        Method {
            name: "setDismissAction"
            Parameter { name: "dismissAction"; type: "bb::cascades::ActionItem"; isPointer: true }
        }
        Method { name: "resetDismissAction" }
        Method {
            name: "setSelectedIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "resetSelectedIndex" }
        Method {
            name: "setSelectedOption"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "resetSelectedOption" }
        Method {
            name: "setKindProperties"
            Parameter {
                name: "kindProperties"
                type: "bb::cascades::AbstractTitleBarKindProperties"
                isPointer: true
            }
        }
        Method { name: "resetKindProperties" }
        Method {
            name: "addOption"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "insertOption"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method {
            name: "removeOption"
            type: "bool"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "removeAllOptions" }
        Method {
            name: "optionAt"
            type: "bb::cascades::Option*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOfOption"
            type: "int"
            Parameter { name: "option"; type: "bb::cascades::Option"; isPointer: true }
        }
        Method { name: "optionCount"; type: "int" }
    }
    Component {
        name: "bb::cascades::TitleBarAppearance"
        exports: [
            "bb.cascades/TitleBarAppearance 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Plain": 1,
                "Branded": 2
            }
        }
    }
    Component {
        name: "bb::cascades::TitleBarExpandableArea"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/TitleBarExpandableArea 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        Property { name: "expanded"; type: "bool" }
        Property {
            name: "indicatorVisibility"
            type: "bb::cascades::TitleBarExpandableAreaIndicatorVisibility::Type"
        }
        Property { name: "toggleArea"; type: "bb::cascades::TitleBarExpandableAreaToggleArea::Type" }
        Signal {
            name: "contentChanged"
            Parameter { name: "newContent"; type: "bb::cascades::Control"; isPointer: true }
        }
        Signal {
            name: "expandedChanged"
            Parameter { name: "expanded"; type: "bool" }
        }
        Signal {
            name: "indicatorVisibilityChanged"
            Parameter {
                name: "visibility"
                type: "bb::cascades::TitleBarExpandableAreaIndicatorVisibility::Type"
            }
        }
        Signal {
            name: "toggleAreaChanged"
            Parameter {
                name: "newToggleArea"
                type: "bb::cascades::TitleBarExpandableAreaToggleArea::Type"
            }
        }
        Method {
            name: "setContent"
            Parameter { name: "content"; type: "bb::cascades::Control"; isPointer: true }
        }
        Method { name: "resetContent" }
        Method {
            name: "setExpanded"
            Parameter { name: "expanded"; type: "bool" }
        }
        Method { name: "resetExpanded" }
        Method {
            name: "setIndicatorVisibility"
            Parameter {
                name: "visibility"
                type: "bb::cascades::TitleBarExpandableAreaIndicatorVisibility::Type"
            }
        }
        Method { name: "resetIndicatorVisibility" }
        Method {
            name: "setToggleArea"
            Parameter { name: "toggleArea"; type: "bb::cascades::TitleBarExpandableAreaToggleArea::Type" }
        }
        Method { name: "resetToggleArea" }
    }
    Component {
        name: "bb::cascades::TitleBarExpandableAreaIndicatorVisibility"
        exports: [
            "bb.cascades/TitleBarExpandableAreaIndicatorVisibility 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Visible": 1,
                "Hidden": 2
            }
        }
    }
    Component {
        name: "bb::cascades::TitleBarExpandableAreaToggleArea"
        exports: [
            "bb.cascades/TitleBarExpandableAreaToggleArea 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "EntireTitleBar": 1,
                "IndicatorOnly": 2
            }
        }
    }
    Component {
        name: "bb::cascades::TitleBarKind"
        exports: [
            "bb.cascades/TitleBarKind 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Segmented": 1,
                "FreeForm": 2,
                "TextField": 3
            }
        }
    }
    Component {
        name: "bb::cascades::TitleBarScrollBehavior"
        prototype: "QObject"
        exports: [
            "bb.cascades/TitleBarScrollBehavior 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Sticky": 1,
                "NonSticky": 2
            }
        }
    }
    Component {
        name: "bb::cascades::ToggleButton"
        prototype: "bb::cascades::AbstractToggleButton"
        exports: [
            "bb.cascades/ToggleButton 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
    }
    Component {
        name: "bb::cascades::TouchBehavior"
        defaultProperty: "eventReactions"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/TouchBehavior 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property {
            name: "eventReactions"
            type: "bb::cascades::EventReaction"
            isList: true
            isReadonly: true
        }
    }
    Component {
        name: "bb::cascades::TouchEnterEvent"
        prototype: "bb::cascades::Event"
        exports: [
            "bb.cascades/TouchEnterEvent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::TouchEvent"
        prototype: "bb::cascades::Event"
        exports: [
            "bb.cascades/TouchEvent 1.0",
            "bb.cascades/TouchEvent 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        isCreatable: false
        Property { name: "windowX"; type: "float"; isReadonly: true }
        Property { name: "windowY"; type: "float"; isReadonly: true }
        Property { name: "localX"; type: "float"; isReadonly: true }
        Property { name: "localY"; type: "float"; isReadonly: true }
        Property { name: "target"; type: "bb::cascades::VisualNode"; isReadonly: true; isPointer: true }
        Property { name: "touchType"; type: "bb::cascades::TouchType::Type"; isReadonly: true }
        Property { name: "altPressed"; revision: 3; type: "bool"; isReadonly: true }
        Property { name: "shiftPressed"; revision: 3; type: "bool"; isReadonly: true }
        Property { name: "ctrlPressed"; revision: 3; type: "bool"; isReadonly: true }
        Method { name: "isMove"; type: "bool" }
        Method { name: "isUp"; type: "bool" }
        Method { name: "isDown"; type: "bool" }
        Method { name: "isCancel"; type: "bool" }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::TouchExitEvent"
        prototype: "bb::cascades::Event"
        exports: [
            "bb.cascades/TouchExitEvent 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::TouchKeyboardEvent"
        prototype: "bb::cascades::Event"
        exports: [
            "bb.cascades/TouchKeyboardEvent 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "screenX"; type: "float"; isReadonly: true }
        Property { name: "screenY"; type: "float"; isReadonly: true }
        Property { name: "touchType"; type: "bb::cascades::TouchType::Type"; isReadonly: true }
        Property { name: "fingerId"; type: "int"; isReadonly: true }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::TouchKeyboardHandler"
        prototype: "bb::cascades::AbstractEventHandler"
        exports: [
            "bb.cascades/TouchKeyboardHandler 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "touch"
            Parameter { name: "event"; type: "bb::cascades::TouchKeyboardEvent"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::TouchPropagationMode"
        exports: [
            "bb.cascades/TouchPropagationMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Full": 0,
                "None": 1,
                "PassThrough": 2
            }
        }
    }
    Component {
        name: "bb::cascades::TouchReaction"
        prototype: "bb::cascades::EventReaction"
        exports: [
            "bb.cascades/TouchReaction 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "eventType"; type: "bb::cascades::TouchType::Type" }
        Property { name: "phase"; type: "bb::cascades::PropagationPhase::Type" }
        Property { name: "response"; type: "bb::cascades::TouchResponse::Type" }
    }
    Component {
        name: "bb::cascades::TouchResponse"
        exports: [
            "bb.cascades/TouchResponse 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "StartTracking": 0
            }
        }
    }
    Component {
        name: "bb::cascades::TouchType"
        exports: [
            "bb.cascades/TouchType 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Down": 0,
                "Move": 1,
                "Up": 2,
                "Cancel": 3
            }
        }
    }
    Component {
        name: "bb::cascades::TrackpadEvent"
        prototype: "bb::cascades::Event"
        exports: [
            "bb.cascades/TrackpadEvent 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "deltaX"; type: "float"; isReadonly: true }
        Property { name: "deltaY"; type: "float"; isReadonly: true }
        Property {
            name: "trackpadEventType"
            type: "bb::cascades::TrackpadEventType::Type"
            isReadonly: true
        }
        Property { name: "altPressed"; type: "bool"; isReadonly: true }
        Property { name: "shiftPressed"; type: "bool"; isReadonly: true }
        Property { name: "ctrlPressed"; type: "bool"; isReadonly: true }
        Method { name: "isBegin"; type: "bool" }
        Method { name: "isEnd"; type: "bool" }
        Method { name: "isMove"; type: "bool" }
        Method { name: "isPressed"; type: "bool" }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::TrackpadEventType"
        exports: [
            "bb.cascades/TrackpadEventType 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Begin": 0,
                "Move": 1,
                "End": 2,
                "Press": 3,
                "Release": 4,
                "Cancel": 5
            }
        }
    }
    Component {
        name: "bb::cascades::TrackpadHandler"
        prototype: "bb::cascades::AbstractEventHandler"
        exports: [
            "bb.cascades/TrackpadHandler 1.4"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "consumeTrackpadEvents"; type: "bb::cascades::ConsumeTrackpadEvent::Types" }
        Signal {
            name: "trackpad"
            Parameter { name: "event"; type: "bb::cascades::TrackpadEvent"; isPointer: true }
        }
        Signal {
            name: "consumeTrackpadEventsChanged"
            Parameter {
                name: "newConsumeTrackpadEvents"
                type: "bb::cascades::ConsumeTrackpadEvent::Types"
            }
        }
        Method {
            name: "setConsumeTrackpadEvents"
            Parameter { name: "consumeTrackpadEvents"; type: "bb::cascades::ConsumeTrackpadEvent::Types" }
        }
        Method { name: "resetConsumeTrackpadEvents" }
    }
    Component {
        name: "bb::cascades::TranslateTransition"
        prototype: "bb::cascades::AbstractTransition"
        exports: [
            "bb.cascades/TranslateTransition 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "toX"; type: "float" }
        Property { name: "toXSet"; type: "bool"; isReadonly: true }
        Property { name: "toY"; type: "float" }
        Property { name: "toYSet"; type: "bool"; isReadonly: true }
        Property { name: "fromX"; type: "float" }
        Property { name: "fromXSet"; type: "bool"; isReadonly: true }
        Property { name: "fromY"; type: "float" }
        Property { name: "fromYSet"; type: "bool"; isReadonly: true }
        Signal {
            name: "fromXChanged"
            Parameter { name: "fromX"; type: "float" }
        }
        Signal {
            name: "toXChanged"
            Parameter { name: "toX"; type: "float" }
        }
        Signal {
            name: "fromYChanged"
            Parameter { name: "fromY"; type: "float" }
        }
        Signal {
            name: "toYChanged"
            Parameter { name: "toY"; type: "float" }
        }
        Method {
            name: "setFromX"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetFromX" }
        Method {
            name: "setToX"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetToX" }
        Method {
            name: "setFromY"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetFromY" }
        Method {
            name: "setToY"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetToY" }
    }
    Component {
        name: "bb::cascades::TriBool"
        exports: [
            "bb.cascades/TriBool 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Undefined": 0,
                "False": 1,
                "True": 2
            }
        }
    }
    Component {
        name: "bb::cascades::UIConfig"
        prototype: "QObject"
        exports: [
            "bb.cascades/UIConfig 1.3",
            "bb.cascades/UIConfig 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        isCreatable: false
        Property { name: "palette"; type: "bb::cascades::UIPalette"; isReadonly: true; isPointer: true }
        Property { name: "compact"; type: "bool"; isReadonly: true }
        Property { name: "dduFactor"; revision: 4; type: "float"; isReadonly: true }
        Signal {
            name: "paletteChanged"
            Parameter { name: "palette"; type: "const bb::cascades::UIPalette"; isPointer: true }
        }
        Signal {
            name: "compactChanged"
            Parameter { name: "isCompact"; type: "bool" }
        }
        Signal {
            name: "dduFactorChanged"
            revision: 4
            Parameter { name: "dduFactor"; type: "float" }
        }
        Method {
            name: "du"
            type: "float"
            Parameter { name: "duValue"; type: "float" }
        }
        Method {
            name: "sdu"
            type: "float"
            Parameter { name: "sduValue"; type: "float" }
        }
        Method {
            name: "ddu"
            revision: 4
            type: "float"
            Parameter { name: "dduValue"; type: "float" }
        }
        Method {
            name: "sddu"
            revision: 4
            type: "float"
            Parameter { name: "sdduValue"; type: "float" }
        }
        Method {
            name: "px"
            type: "float"
            Parameter { name: "pxValue"; type: "float" }
        }
    }
    Component {
        name: "bb::cascades::UIObject"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/UIObject 1.0",
            "bb.cascades/UIObject 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        isCreatable: false
        Property { name: "attachedObjects"; type: "QObject"; isList: true; isReadonly: true }
        Property {
            name: "ui"
            revision: 3
            type: "bb::cascades::UIConfig"
            isReadonly: true
            isPointer: true
        }
        Method { name: "ui"; revision: 3; type: "bb::cascades::UIConfig*" }
    }
    Component {
        name: "bb::cascades::UIOrientation"
        exports: [
            "bb.cascades/UIOrientation 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Portrait": 0,
                "Landscape": 1
            }
        }
    }
    Component {
        name: "bb::cascades::UIPalette"
        prototype: "QObject"
        exports: [
            "bb.cascades/UIPalette 1.3",
            "bb.cascades/UIPalette 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            4
        ]
        isCreatable: false
        Property { name: "background"; type: "QVariant"; isReadonly: true }
        Property { name: "plain"; type: "QVariant"; isReadonly: true }
        Property { name: "plainBase"; type: "QVariant"; isReadonly: true }
        Property { name: "primary"; type: "QVariant"; isReadonly: true }
        Property { name: "primaryBase"; type: "QVariant"; isReadonly: true }
        Property { name: "primarySoft"; type: "QVariant"; isReadonly: true }
        Property { name: "text"; type: "QVariant"; isReadonly: true }
        Property { name: "textPrimary"; type: "QVariant"; isReadonly: true }
        Property { name: "textOnPlain"; type: "QVariant"; isReadonly: true }
        Property { name: "textOnPrimary"; type: "QVariant"; isReadonly: true }
        Property { name: "primaryDark"; revision: 4; type: "QVariant"; isReadonly: true }
        Property { name: "textOnPrimaryDark"; revision: 4; type: "QVariant"; isReadonly: true }
        Property { name: "secondaryTextOnPrimary"; revision: 4; type: "QVariant"; isReadonly: true }
        Property { name: "secondaryTextOnPrimaryDark"; revision: 4; type: "QVariant"; isReadonly: true }
        Property { name: "secondaryTextOnPlain"; revision: 4; type: "QVariant"; isReadonly: true }
    }
    Component {
        name: "bb::cascades::ValidationMode"
        exports: [
            "bb.cascades/ValidationMode 1.0",
            "bb.cascades/ValidationMode 1.1"
        ]
        exportMetaObjectRevisions: [
            0,
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Custom": 1,
                "FocusLost": 2,
                "Delayed": 3,
                "Immediate": 4
            }
        }
    }
    Component {
        name: "bb::cascades::ValidationState"
        exports: [
            "bb.cascades/ValidationState 1.0",
            "bb.cascades/ValidationState 1.1"
        ]
        exportMetaObjectRevisions: [
            0,
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Unknown": 0,
                "InProgress": 1,
                "Valid": 2,
                "Invalid": 3
            }
        }
    }
    Component {
        name: "bb::cascades::Validator"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/Validator 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "state"; type: "bb::cascades::ValidationState::Type" }
        Property { name: "mode"; type: "bb::cascades::ValidationMode::Type" }
        Property { name: "valid"; type: "bool" }
        Property { name: "errorMessage"; type: "string" }
        Property { name: "delay"; type: "int" }
        Property { name: "validationRequested"; type: "bool" }
        Signal {
            name: "stateChanged"
            Parameter { name: "newState"; type: "bb::cascades::ValidationState::Type" }
        }
        Signal {
            name: "modeChanged"
            Parameter { name: "newMode"; type: "bb::cascades::ValidationMode::Type" }
        }
        Signal {
            name: "validChanged"
            Parameter { name: "valid"; type: "bool" }
        }
        Signal {
            name: "errorMessageChanged"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "delayChanged"
            Parameter { name: "delay"; type: "int" }
        }
        Signal {
            name: "validationRequestedChanged"
            Parameter { name: "requested"; type: "bool" }
        }
        Signal { name: "validate" }
        Method {
            name: "setState"
            Parameter { name: "state"; type: "bb::cascades::ValidationState::Type" }
        }
        Method {
            name: "setMode"
            Parameter { name: "mode"; type: "bb::cascades::ValidationMode::Type" }
        }
        Method {
            name: "setValid"
            Parameter { name: "valid"; type: "bool" }
        }
        Method {
            name: "setErrorMessage"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Method {
            name: "setDelay"
            Parameter { name: "delay"; type: "int" }
        }
        Method { name: "showMessage" }
        Method {
            name: "setValidationRequested"
            Parameter { name: "requested"; type: "bool" }
        }
        Method { name: "requestValidation" }
        Method { name: "resetState" }
        Method { name: "resetMode" }
        Method { name: "resetValid" }
        Method { name: "resetErrorMessage" }
        Method { name: "resetDelay" }
        Method { name: "resetValidationRequested" }
    }
    Component {
        name: "bb::cascades::ValueA11ySpecialization"
        prototype: "bb::cascades::AbstractA11ySpecialization"
        exports: [
            "bb.cascades/ValueA11ySpecialization 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "value"; type: "float" }
        Property { name: "minValue"; type: "float" }
        Property { name: "maxValue"; type: "float" }
        Property { name: "valueText"; type: "string" }
        Property { name: "minValueText"; type: "string" }
        Property { name: "maxValueText"; type: "string" }
        Signal {
            name: "valueAdjustmentRequested"
            Parameter { name: "adjustType"; type: "bb::cascades::A11yValueAdjustmentType::Type" }
        }
        Signal {
            name: "valueAdjustmentRequested"
            Parameter { name: "adjustType"; type: "int" }
        }
        Signal {
            name: "valueSetRequested"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "minValueChanged"
            Parameter { name: "minValue"; type: "float" }
        }
        Signal {
            name: "maxValueChanged"
            Parameter { name: "maxValue"; type: "float" }
        }
        Signal {
            name: "valueTextChanged"
            Parameter { name: "valueText"; type: "string" }
        }
        Signal {
            name: "minValueTextChanged"
            Parameter { name: "minValueText"; type: "string" }
        }
        Signal {
            name: "maxValueTextChanged"
            Parameter { name: "maxValueText"; type: "string" }
        }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "resetValue" }
        Method {
            name: "setMinValue"
            Parameter { name: "minValue"; type: "float" }
        }
        Method { name: "resetMinValue" }
        Method {
            name: "setMaxValue"
            Parameter { name: "maxValue"; type: "float" }
        }
        Method { name: "resetMaxValue" }
        Method {
            name: "setValueText"
            Parameter { name: "valueText"; type: "string" }
        }
        Method { name: "resetValueText" }
        Method {
            name: "setMinValueText"
            Parameter { name: "minValueText"; type: "string" }
        }
        Method { name: "resetMinValueText" }
        Method {
            name: "setMaxValueText"
            Parameter { name: "maxValueText"; type: "string" }
        }
        Method { name: "resetMaxValueText" }
    }
    Component {
        name: "bb::cascades::VerticalAlignment"
        exports: [
            "bb.cascades/VerticalAlignment 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Top": 0,
                "Bottom": 1,
                "Center": 2,
                "Fill": 3
            }
        }
    }
    Component {
        name: "bb::cascades::VisualNode"
        prototype: "bb::cascades::UIObject"
        exports: [
            "bb.cascades/VisualNode 1.0",
            "bb.cascades/VisualNode 1.3",
            "bb.cascades/VisualNode 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            3,
            4
        ]
        isCreatable: false
        Property { name: "opacity"; type: "float" }
        Property { name: "visible"; type: "bool" }
        Property { name: "translationX"; type: "float" }
        Property { name: "translationY"; type: "float" }
        Property { name: "rotationZ"; type: "float" }
        Property { name: "scaleX"; type: "float" }
        Property { name: "scaleY"; type: "float" }
        Property { name: "pivotX"; type: "float" }
        Property { name: "pivotY"; type: "float" }
        Property { name: "touchPropagationMode"; type: "bb::cascades::TouchPropagationMode::Type" }
        Property { name: "overlapTouchPolicy"; type: "bb::cascades::OverlapTouchPolicy::Type" }
        Property {
            name: "touchBehaviors"
            type: "bb::cascades::TouchBehavior"
            isList: true
            isReadonly: true
        }
        Property {
            name: "gestureHandlers"
            type: "bb::cascades::GestureHandler"
            isList: true
            isReadonly: true
        }
        Property {
            name: "animations"
            type: "bb::cascades::AbstractAnimation"
            isList: true
            isReadonly: true
        }
        Property {
            name: "eventHandlers"
            revision: 3
            type: "bb::cascades::AbstractEventHandler"
            isList: true
            isReadonly: true
        }
        Property {
            name: "effects"
            revision: 4
            type: "bb::cascades::AbstractEffect"
            isList: true
            isReadonly: true
        }
        Signal {
            name: "opacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "opacityChanging"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "translationXChanged"
            Parameter { name: "translationX"; type: "float" }
        }
        Signal {
            name: "translationYChanged"
            Parameter { name: "translationY"; type: "float" }
        }
        Signal {
            name: "translationXChanging"
            Parameter { name: "translationX"; type: "float" }
        }
        Signal {
            name: "translationYChanging"
            Parameter { name: "translationY"; type: "float" }
        }
        Signal {
            name: "rotationZChanging"
            Parameter { name: "rotationZ"; type: "float" }
        }
        Signal {
            name: "rotationZChanged"
            Parameter { name: "rotationZ"; type: "float" }
        }
        Signal {
            name: "scaleXChanged"
            Parameter { name: "scaleX"; type: "float" }
        }
        Signal {
            name: "scaleYChanged"
            Parameter { name: "scaleY"; type: "float" }
        }
        Signal {
            name: "scaleXChanging"
            Parameter { name: "scaleX"; type: "float" }
        }
        Signal {
            name: "scaleYChanging"
            Parameter { name: "scaleY"; type: "float" }
        }
        Signal {
            name: "pivotXChanged"
            Parameter { name: "pivotX"; type: "float" }
        }
        Signal {
            name: "pivotYChanged"
            Parameter { name: "pivotY"; type: "float" }
        }
        Signal {
            name: "touch"
            Parameter { name: "event"; type: "bb::cascades::TouchEvent"; isPointer: true }
        }
        Signal {
            name: "touchCapture"
            Parameter { name: "event"; type: "bb::cascades::TouchEvent"; isPointer: true }
        }
        Signal {
            name: "touchEnter"
            Parameter { name: "event"; type: "bb::cascades::TouchEnterEvent"; isPointer: true }
        }
        Signal {
            name: "touchExit"
            Parameter { name: "event"; type: "bb::cascades::TouchExitEvent"; isPointer: true }
        }
        Signal {
            name: "touchPropagationModeChanged"
            Parameter { name: "newTouchPropagationMode"; type: "bb::cascades::TouchPropagationMode::Type" }
        }
        Signal {
            name: "overlapTouchPolicyChanged"
            Parameter { name: "newOverlapTouchPolicy"; type: "bb::cascades::OverlapTouchPolicy::Type" }
        }
        Method {
            name: "setOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method { name: "resetOpacity" }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "resetVisible" }
        Method {
            name: "setTranslationX"
            Parameter { name: "translationX"; type: "float" }
        }
        Method { name: "resetTranslationX" }
        Method {
            name: "setTranslationY"
            Parameter { name: "translationY"; type: "float" }
        }
        Method { name: "resetTranslationY" }
        Method {
            name: "setTranslation"
            Parameter { name: "translationX"; type: "float" }
            Parameter { name: "translationY"; type: "float" }
        }
        Method { name: "resetTranslation" }
        Method {
            name: "setRotationZ"
            Parameter { name: "rotationZ"; type: "float" }
        }
        Method { name: "resetRotationZ" }
        Method {
            name: "setScaleX"
            Parameter { name: "scaleX"; type: "float" }
        }
        Method { name: "resetScaleX" }
        Method {
            name: "setScaleY"
            Parameter { name: "scaleY"; type: "float" }
        }
        Method { name: "resetScaleY" }
        Method {
            name: "setScale"
            Parameter { name: "scaleX"; type: "float" }
            Parameter { name: "scaleY"; type: "float" }
        }
        Method {
            name: "setScale"
            Parameter { name: "scaleXY"; type: "float" }
        }
        Method { name: "resetScale" }
        Method {
            name: "setPivotX"
            Parameter { name: "pivotX"; type: "float" }
        }
        Method { name: "resetPivotX" }
        Method {
            name: "setPivotY"
            Parameter { name: "pivotY"; type: "float" }
        }
        Method { name: "resetPivotY" }
        Method {
            name: "setPivot"
            Parameter { name: "pivotX"; type: "float" }
            Parameter { name: "pivotY"; type: "float" }
        }
        Method { name: "resetPivot" }
        Method {
            name: "setTouchPropagationMode"
            Parameter { name: "mode"; type: "bb::cascades::TouchPropagationMode::Type" }
        }
        Method { name: "resetTouchPropagationMode" }
        Method {
            name: "setOverlapTouchPolicy"
            Parameter { name: "policy"; type: "bb::cascades::OverlapTouchPolicy::Type" }
        }
        Method { name: "resetOverlapTouchPolicy" }
        Method {
            name: "addEffect"
            revision: 4
            Parameter { name: "effect"; type: "bb::cascades::AbstractEffect"; isPointer: true }
        }
        Method {
            name: "removeEffect"
            revision: 4
            Parameter { name: "effect"; type: "bb::cascades::AbstractEffect"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::VisualStyle"
        exports: [
            "bb.cascades/VisualStyle 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Bright": 1,
                "Dark": 2
            }
        }
    }
    Component {
        name: "bb::cascades::WebCookieJar"
        prototype: "QObject"
        exports: [
            "bb.cascades/WebCookieJar 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Method {
            name: "cookiesForUrl"
            type: "QStringList"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "setCookiesFromUrl"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "cookies"; type: "QStringList" }
        }
    }
    Component {
        name: "bb::cascades::WebFindFlag"
        exports: [
            "bb.cascades/WebFindFlag 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Backward": 1,
                "CaseSensitive": 2,
                "WrapAroundDocument": 4,
                "HighlightAllOccurrences": 8
            }
        }
        Enum {
            name: "Types"
            values: {
                "Backward": 1,
                "CaseSensitive": 2,
                "WrapAroundDocument": 4,
                "HighlightAllOccurrences": 8
            }
        }
    }
    Component {
        name: "bb::cascades::WebInputProperties"
        prototype: "QObject"
        exports: [
            "bb.cascades/WebInputProperties 1.0",
            "bb.cascades/WebInputProperties 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        isCreatable: false
        Property { name: "flags"; revision: 3; type: "bb::cascades::TextInputFlag::Types" }
        Signal {
            name: "flagsChanged"
            revision: 3
            Parameter { name: "newFlags"; type: "bb::cascades::TextInputFlag::Types" }
        }
        Method {
            name: "setFlags"
            revision: 3
            Parameter { name: "flags"; type: "bb::cascades::TextInputFlag::Types" }
        }
        Method { name: "resetFlags"; revision: 3 }
    }
    Component {
        name: "bb::cascades::WebLoadRequest"
        prototype: "QObject"
        exports: [
            "bb.cascades/WebLoadRequest 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "url"; type: "QUrl"; isReadonly: true }
        Property { name: "status"; type: "bb::cascades::WebLoadStatus::Type"; isReadonly: true }
    }
    Component {
        name: "bb::cascades::WebLoadStatus"
        exports: [
            "bb.cascades/WebLoadStatus 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Started": 0,
                "Succeeded": 1,
                "Failed": 2
            }
        }
    }
    Component {
        name: "bb::cascades::WebNavigationRequest"
        prototype: "QObject"
        exports: [
            "bb.cascades/WebNavigationRequest 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "url"; type: "QUrl"; isReadonly: true }
        Property { name: "action"; type: "bb::cascades::WebNavigationRequestAction::Type" }
        Property {
            name: "navigationType"
            type: "bb::cascades::WebNavigationType::Type"
            isReadonly: true
        }
        Signal {
            name: "actionChanged"
            Parameter { name: "action"; type: "bb::cascades::WebNavigationRequestAction::Type" }
        }
    }
    Component {
        name: "bb::cascades::WebNavigationRequestAction"
        exports: [
            "bb.cascades/WebNavigationRequestAction 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Accept": 0,
                "Ignore": 1
            }
        }
    }
    Component {
        name: "bb::cascades::WebNavigationType"
        exports: [
            "bb.cascades/WebNavigationType 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "LinkClicked": 0,
                "FormSubmitted": 1,
                "BackForward": 2,
                "Reload": 3,
                "FormResubmitted": 4,
                "Other": 5,
                "OpenWindow": 1000
            }
        }
    }
    Component {
        name: "bb::cascades::WebNewViewRequest"
        prototype: "QObject"
        exports: [
            "bb.cascades/WebNewViewRequest 1.3"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "popup"; type: "bool"; isReadonly: true }
        Method {
            name: "openIn"
            Parameter { name: "view"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::WebSettings"
        prototype: "QObject"
        exports: [
            "bb.cascades/WebSettings 1.0",
            "bb.cascades/WebSettings 1.2",
            "bb.cascades/WebSettings 1.4"
        ]
        exportMetaObjectRevisions: [
            0,
            2,
            4
        ]
        isCreatable: false
        Property { name: "defaultFontSize"; type: "int" }
        Property { name: "defaultFontSizeFollowsSystemFontSize"; type: "bool" }
        Property { name: "javaScriptEnabled"; type: "bool" }
        Property { name: "imageDownloadingEnabled"; type: "bool" }
        Property { name: "minimumFontSize"; type: "int" }
        Property { name: "userAgent"; type: "string" }
        Property { name: "userStyleSheetLocation"; type: "QUrl" }
        Property { name: "webInspectorEnabled"; type: "bool" }
        Property { name: "zoomToFitEnabled"; type: "bool" }
        Property { name: "activeTextEnabled"; type: "bool" }
        Property { name: "viewport"; type: "QVariantMap" }
        Property { name: "background"; type: "QVariant" }
        Property { name: "binaryFontDownloadingEnabled"; type: "bool" }
        Property { name: "cookiesEnabled"; type: "bool" }
        Property { name: "customHttpHeaders"; type: "QVariantMap" }
        Property { name: "devicePixelRatio"; type: "double" }
        Property { name: "credentialAutoFillEnabled"; type: "bool" }
        Property { name: "formAutoFillEnabled"; type: "bool" }
        Property { name: "defaultTextCodecName"; type: "string" }
        Property { name: "textAutosizingEnabled"; revision: 2; type: "bool" }
        Property { name: "spatialNavigationEnabled"; revision: 4; type: "bool" }
        Signal {
            name: "defaultFontSizeChanged"
            Parameter { name: "newDefaultFontSize"; type: "int" }
        }
        Signal {
            name: "defaultFontSizeFollowsSystemFontSizeChanged"
            Parameter { name: "newDefaultFontSizeFollowsSystemFontSize"; type: "bool" }
        }
        Signal {
            name: "javaScriptEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "imageDownloadingEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "minimumFontSizeChanged"
            Parameter { name: "newMinimumFontSize"; type: "int" }
        }
        Signal {
            name: "userAgentChanged"
            Parameter { name: "newUserAgent"; type: "string" }
        }
        Signal {
            name: "userStyleSheetLocationChanged"
            Parameter { name: "newUserStyleSheetLocation"; type: "QUrl" }
        }
        Signal {
            name: "webInspectorEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "zoomToFitEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "activeTextEnabledChanged"
            type: "bool"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "viewportArgumentsChanged"
            Parameter { name: "newViewportArguments"; type: "QVariantMap" }
        }
        Signal {
            name: "backgroundChanged"
            Parameter { name: "newBackground"; type: "QVariant" }
        }
        Signal {
            name: "binaryFontDownloadingEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "cookiesEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "customHttpHeadersChanged"
            Parameter { name: "newCustomHttpHeaders"; type: "QVariantMap" }
        }
        Signal {
            name: "devicePixelRatioChanged"
            Parameter { name: "newDevicePixelRatio"; type: "double" }
        }
        Signal {
            name: "credentialAutoFillEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "formAutoFillEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "defaultTextCodecNameChanged"
            Parameter { name: "codec"; type: "string" }
        }
        Signal {
            name: "textAutosizingEnabledChanged"
            revision: 2
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "spatialNavigationEnabledChanged"
            revision: 4
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setDefaultFontSize"
            Parameter { name: "size"; type: "int" }
        }
        Method { name: "resetDefaultFontSize" }
        Method {
            name: "setDefaultFontSizeFollowsSystemFontSize"
            Parameter { name: "follows"; type: "bool" }
        }
        Method { name: "resetDefaultFontSizeFollowsSystemFontSize" }
        Method {
            name: "setJavaScriptEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetJavaScriptEnabled" }
        Method {
            name: "setImageDownloadingEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetImageDownloadingEnabled" }
        Method {
            name: "setMinimumFontSize"
            Parameter { name: "size"; type: "int" }
        }
        Method { name: "resetMinimumFontSize" }
        Method {
            name: "setUserAgent"
            Parameter { name: "userAgent"; type: "string" }
        }
        Method {
            name: "setUserStyleSheetLocation"
            Parameter { name: "location"; type: "QUrl" }
        }
        Method { name: "resetUserStyleSheetLocation" }
        Method {
            name: "setWebInspectorEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetWebInspectorEnabled" }
        Method {
            name: "setZoomToFitEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetZoomToFitEnabled" }
        Method {
            name: "setActiveTextEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetActiveTextEnabled" }
        Method {
            name: "setViewportArguments"
            Parameter { name: "arguments"; type: "QVariantMap" }
        }
        Method { name: "resetViewportArguments" }
        Method {
            name: "setBackground"
            Parameter { name: "paint"; type: "bb::cascades::Paint" }
        }
        Method { name: "resetBackground" }
        Method {
            name: "setBinaryFontDownloadingEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetBinaryFontDownloadingEnabled" }
        Method {
            name: "setCookiesEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetCookiesEnabled" }
        Method {
            name: "setCustomHttpHeaders"
            Parameter { name: "httpHeaders"; type: "QVariantMap" }
        }
        Method { name: "resetCustomHttpHeaders" }
        Method {
            name: "setDevicePixelRatio"
            Parameter { name: "ratio"; type: "double" }
        }
        Method { name: "resetDevicePixelRatio" }
        Method {
            name: "setCredentialAutoFillEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetCredentialAutoFillEnabled" }
        Method {
            name: "setFormAutoFillEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetFormAutoFillEnabled" }
        Method {
            name: "setDefaultTextCodecName"
            Parameter { name: "codec"; type: "string" }
        }
        Method { name: "resetDefaultTextCodecName" }
        Method {
            name: "setTextAutosizingEnabled"
            revision: 2
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetTextAutosizingEnabled"; revision: 2 }
        Method {
            name: "setSpatialNavigationEnabled"
            revision: 4
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetSpatialNavigationEnabled"; revision: 4 }
    }
    Component {
        name: "bb::cascades::WebStorage"
        prototype: "QObject"
        exports: [
            "bb.cascades/WebStorage 1.0",
            "bb.cascades/WebStorage 1.3"
        ]
        exportMetaObjectRevisions: [
            0,
            3
        ]
        isCreatable: false
        Property {
            name: "cookieJar"
            type: "bb::cascades::WebCookieJar"
            isReadonly: true
            isPointer: true
        }
        Method { name: "clear" }
        Method { name: "clearAutofillData" }
        Method { name: "clearCache" }
        Method { name: "clearCookies" }
        Method { name: "clearCredentials" }
        Method { name: "clearDatabases" }
        Method { name: "clearLocalStorage" }
        Method { name: "clearWebFileSystem" }
        Method { name: "clearSslSiteExceptions"; revision: 3 }
        Method { name: "clearGeolocationPermissions"; revision: 3 }
    }
    Component {
        name: "bb::cascades::WebView"
        prototype: "bb::cascades::Control"
        exports: [
            "bb.cascades/WebView 1.3",
            "bb.cascades/WebView 1.4"
        ]
        exportMetaObjectRevisions: [
            3,
            4
        ]
        Property {
            name: "settings"
            type: "bb::cascades::WebSettings"
            isReadonly: true
            isPointer: true
        }
        Property { name: "storage"; type: "bb::cascades::WebStorage"; isReadonly: true; isPointer: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "url"; type: "QUrl" }
        Property { name: "icon"; type: "QUrl"; isReadonly: true }
        Property { name: "canGoBack"; type: "bool"; isReadonly: true }
        Property { name: "canGoForward"; type: "bool"; isReadonly: true }
        Property { name: "html"; type: "string" }
        Property { name: "loading"; type: "bool"; isReadonly: true }
        Property { name: "loadProgress"; type: "int"; isReadonly: true }
        Property { name: "maxContentScale"; type: "float"; isReadonly: true }
        Property { name: "minContentScale"; type: "float"; isReadonly: true }
        Property {
            name: "copyLinkAction"
            revision: 3
            type: "bb::cascades::AbstractActionItem"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "openLinkInNewTabAction"
            revision: 3
            type: "bb::cascades::AbstractActionItem"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "shareLinkAction"
            revision: 3
            type: "bb::cascades::AbstractActionItem"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "saveImageAction"
            revision: 3
            type: "bb::cascades::AbstractActionItem"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "shareImageAction"
            revision: 3
            type: "bb::cascades::AbstractActionItem"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "shareTextAction"
            revision: 4
            type: "bb::cascades::AbstractActionItem"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "input"
            revision: 3
            type: "bb::cascades::WebInputProperties"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "loadingChanged"
            Parameter { name: "loadRequest"; type: "bb::cascades::WebLoadRequest"; isPointer: true }
        }
        Signal {
            name: "loadProgressChanged"
            Parameter { name: "loadProgress"; type: "int" }
        }
        Signal {
            name: "titleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal { name: "navigationHistoryChanged" }
        Signal {
            name: "urlChanged"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal {
            name: "iconChanged"
            Parameter { name: "icon"; type: "QUrl" }
        }
        Signal {
            name: "navigationRequested"
            Parameter { name: "request"; type: "bb::cascades::WebNavigationRequest"; isPointer: true }
        }
        Signal {
            name: "javaScriptResult"
            Parameter { name: "resultId"; type: "int" }
            Parameter { name: "result"; type: "QVariant" }
        }
        Signal { name: "javaScriptInterrupted" }
        Signal {
            name: "messageReceived"
            Parameter { name: "message"; type: "QVariantMap" }
        }
        Signal { name: "microFocusChanged" }
        Signal {
            name: "minContentScaleChanged"
            Parameter { name: "minContentScale"; type: "float" }
        }
        Signal {
            name: "maxContentScaleChanged"
            Parameter { name: "maxContentScale"; type: "float" }
        }
        Signal {
            name: "newViewRequested"
            revision: 3
            Parameter { name: "request"; type: "bb::cascades::WebNewViewRequest"; isPointer: true }
        }
        Signal { name: "closeRequested"; revision: 3 }
        Method {
            name: "loadHtml"
            Parameter { name: "html"; type: "string" }
            Parameter { name: "baseUrl"; type: "QUrl" }
        }
        Method {
            name: "loadHtml"
            Parameter { name: "html"; type: "string" }
        }
        Method {
            name: "loadData"
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "mimeType"; type: "string" }
            Parameter { name: "baseUrl"; type: "QUrl" }
        }
        Method {
            name: "loadData"
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "mimeType"; type: "string" }
        }
        Method {
            name: "loadData"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "loadFile"
            Parameter { name: "absoluteFilePath"; type: "string" }
            Parameter { name: "mimeType"; type: "string" }
        }
        Method {
            name: "loadFile"
            Parameter { name: "absoluteFilePath"; type: "string" }
        }
        Method { name: "goBack" }
        Method { name: "goForward" }
        Method { name: "stop" }
        Method { name: "reload" }
        Method {
            name: "postMessage"
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "evaluateJavaScript"
            type: "int"
            Parameter { name: "script"; type: "string" }
            Parameter { name: "world"; type: "bb::cascades::JavaScriptWorld::Type" }
        }
        Method {
            name: "evaluateJavaScript"
            type: "int"
            Parameter { name: "script"; type: "string" }
        }
        Method {
            name: "findText"
            Parameter { name: "subString"; type: "string" }
            Parameter { name: "options"; type: "WebFindFlag::Types" }
        }
        Method {
            name: "findText"
            Parameter { name: "subString"; type: "string" }
        }
    }
    Component {
        name: "bb::cascades::Window"
        prototype: "bb::cascades::BaseObject"
        exports: [
            "bb.cascades/Window 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Property { name: "handle"; type: "QVariant"; isReadonly: true }
        Property { name: "groupId"; type: "string"; isReadonly: true }
        Property { name: "state"; type: "bb::cascades::WindowState::Type"; isReadonly: true }
        Property { name: "screenIdleMode"; type: "bb::cascades::ScreenIdleMode::Type" }
        Signal { name: "posted" }
        Signal {
            name: "stateChanged"
            Parameter { name: "newState"; type: "bb::cascades::WindowState::Type" }
        }
        Signal {
            name: "screenIdleModeChanged"
            Parameter { name: "newScreenIdleMode"; type: "bb::cascades::ScreenIdleMode::Type" }
        }
        Method {
            name: "setScreenIdleMode"
            Parameter { name: "newScreenIdleMode"; type: "bb::cascades::ScreenIdleMode::Type" }
        }
    }
    Component {
        name: "bb::cascades::WindowProperty"
        exports: [
            "bb.cascades/WindowProperty 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Position": 1,
                "Size": 2,
                "SourceSize": 4,
                "Visible": 8
            }
        }
        Enum {
            name: "Types"
            values: {
                "None": 0,
                "Position": 1,
                "Size": 2,
                "SourceSize": 4,
                "Visible": 8
            }
        }
    }
    Component {
        name: "bb::cascades::WindowState"
        exports: [
            "bb.cascades/WindowState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Created": 0,
                "Posted": 1
            }
        }
    }
    Component {
        name: "bb::cascades::XmlDataModel"
        prototype: "bb::cascades::DataModel"
        exports: [
            "bb.cascades/XmlDataModel 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "source"; type: "QUrl" }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setSource"
            Parameter { name: "newSource"; type: "QUrl" }
        }
    }
    Component {
        name: "bb::system::FileTransferMode"
        exports: [
            "bb.system/FileTransferMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Unspecified": 0,
                "Preserve": 1,
                "CopyReadOnly": 2,
                "CopyReadWrite": 3,
                "Link": 4
            }
        }
    }
    Component {
        name: "bb::system::SecurityPerimeter"
        exports: [
            "bb.system/SecurityPerimeter 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Default": 0,
                "Enterprise": 1,
                "Personal": 2
            }
        }
    }
}
