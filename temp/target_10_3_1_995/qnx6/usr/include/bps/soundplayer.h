/*
 * Copyright (C) 2011-2014 BlackBerry Limited. All rights reserved.
 */

/**
 * @file soundplayer.h
 * 
 * @brief Functions to play system sounds
 *
 * This file defines the Sound Player service, which provides functions for
 * playing system sounds.
 * 
 * You can play system sounds by calling @c soundplayer_play_sound().  For
 * increased performance, you can call @c soundplayer_prepare_sound() before
 * calling the @c soundplayer_play_sound() function.  Calling the @c
 * soundplayer_prepare_sound() function can improve the response time of the @c
 * soundplayer_play_sound() function.
 * 
 * Currently, the following system sounds are available, and you can pass these
 * values to @c soundplayer_prepare_sound() and @c soundplayer_play_sound():
 * 
 *    - @c input_keypress
 *    - @c notification_general
 *    - @c notification_sapphire
 *    - @c alarm_battery
 *    - @c event_browser_start
 *    - @c event_camera_shutter
 *    - @c event_recording_start
 *    - @c event_recording_stop
 *    - @c event_device_lock
 *    - @c event_device_unlock
 *    - @c event_device_tether
 *    - @c event_device_untether
 *    - @c event_video_call
 *    - @c event_video_call_outgoing
 *    - @c system_master_volume_reference
 *
 * @since BlackBerry 10.0.0
 */

#ifndef _BPS_SOUNDPLAYER_H_INCLUDED
#define _BPS_SOUNDPLAYER_H_INCLUDED

#include <sys/platform.h>

#include "bps/bps.h"

__BEGIN_DECLS

/**
 * @brief Possible Sound Player events
 *
 * This enumeration defines the possible Sound Player events.  Currently,
 * there is only one event.
 *
 * @anonenum bps_soundplayer_events Sound Player events
 *
 * @since BlackBerry 10.2.0
 */
enum {
    /**
     * The Sound Player info event, which contains all of the information
     * about changes to the device's sound player.
     *
     * @since BlackBerry 10.2.0
     */
    SOUNDPLAYER_INFO        = 0x01
};

/**
 * @brief Possible Sound Player errors
 *
 * This enumeration defines the possible errors generated by the sound player
 * service.
 *
 * @since BlackBerry 10.2.0
 */
typedef enum {
    /**
     * No error.
     *
     * @since BlackBerry 10.2.0
     */
    SOUNDPLAYER_ERROR_OK                           = 0,
    /**
     * Bad parameter.
     *
     * @since BlackBerry 10.2.0
     */
    SOUNDPLAYER_ERROR_BAD_PARAMETER                = 1,
    /**
     * Not enabled.
     *
     * @since BlackBerry 10.2.0
     */
    SOUNDPLAYER_ERROR_NOT_ENABLED                  = 2,
    /**
     * Receive queue full.
     *
     * @since BlackBerry 10.2.0
     */
    SOUNDPLAYER_ERROR_RECEIVE_QUEUE_FULL           = 3,
    /**
     * Receive queue full for clase.
     *
     * @since BlackBerry 10.2.0
     */
    SOUNDPLAYER_ERROR_RECEIVE_QUEUE_FULL_FOR_CLASS = 4,
    /**
     * Unknown class.
     *
     * @since BlackBerry 10.2.0
     */
    SOUNDPLAYER_ERROR_UNKNOWN_CLASS                = 5,
    /**
     * Unknown sound.
     *
     * @since BlackBerry 10.2.0
     */
    SOUNDPLAYER_ERROR_UNKNOWN_SOUND                = 6,
    /**
     * Unknown file.
     *
     * @since BlackBerry 10.2.0
     */
    SOUNDPLAYER_ERROR_UNKNOWN_FILE                 = 7,
} soundplayer_error_t;

/**
 * @brief Start receiving Sound Player events
 *
 * The @c soundplayer_request_events() function starts to deliver Sound Player
 * events to the application using BPS.  Events will be posted to the currently
 * active channel.
 *
 * @param flags The types of events to deliver.  A value of zero indicates that
 *              all events are requested. The meaning of non-zero values is
 *              reserved for future use.
 *
 * @return @c BPS_SUCCESS upon success, @c BPS_FAILURE with @c errno set
 *         otherwise.
 *
 * @since BlackBerry 10.2.0
 */
BPS_API int soundplayer_request_events(int flags);

/**
 * @brief Stop receiving Sound Player events
 *
 * The @c soundplayer_stop_events() function stops Sound Player events from
 * being delivered to the application using BPS.
 *
 * @param flags The types of events to stop. A value of zero indicates that all
 *              events are stopped. The meaning of non-zero values is reserved
 *              for future use.
 *
 * @return @c BPS_SUCCESS upon success, @c BPS_FAILURE with @c errno set
 *         otherwise.
 *
 * @since BlackBerry 10.2.0
 */
BPS_API int soundplayer_stop_events(int flags);

/**
 * @brief Get the unique domain ID for the Sound Player service
 *
 * The @c soundplayer_get_domain() function gets the unique domain ID for the
 * Sound Player service.  You can use this function in your application to test
 * whether an event that you retrieve using @c bps_get_event() is a Sound Player
 * event, and respond accordingly.
 *
 * @return The domain ID for the Sound Player service.
 *
 * @since BlackBerry 10.2.0
 */
BPS_API int soundplayer_get_domain();

/**
 * @brief Prepare a system sound to be played
 * 
 * The @c soundplayer_prepare_sound() function prepares the specified system
 * sound to be played.
 * 
 * Calling this function is optional, but may greatly improve the response time
 * of @c soundplayer_play_sound().
 *
 * @param name The name of the system sound to be prepared.
 *
 * @return @c BPS_SUCCESS upon success, @c BPS_FAILURE with @c errno set
 * otherwise.
 *
 * @since BlackBerry 10.0.0
 */
BPS_API int soundplayer_prepare_sound(const char *name);

/**
 * @brief Play a system sound
 * 
 * The @c soundplayer_play_sound() function plays the specified system sound.
 * This function may return before the sound finishes playing.
 *
 * @param name The name of the system sound.
 *
 * @return @c BPS_SUCCESS upon success, @c BPS_FAILURE with @c errno set
 * otherwise.
 *
 * @since BlackBerry 10.0.0
 */
BPS_API int soundplayer_play_sound(const char *name);

/**
 * @brief Play a system sound and wait for completion
 *
 * The @c soundplayer_play_sound_blocking() function plays the specified system
 * sound and returns after the sound finishes playing.
 *
 * @param name The name of the system sound.
 *
 * @return @c BPS_SUCCESS upon success, @c BPS_FAILURE with @c errno set
 * otherwise.
 *
 * @since BlackBerry 10.0.0
 */
BPS_API int soundplayer_play_sound_blocking(const char *name);

/**
 * @brief Play a system sound and do not wait for completion
 *
 * The @c soundplayer_play_sound_async() function plays the specified system
 * sound and returns immediately.  A @c #SOUNDPLAYER_INFO event will be
 * delivered when the sound is finished playing.
 *
 * @param name The name of the system sound.
 *
 * @param id If not @c NULL, the ID used in the play sound request will be
 *           returned in @c id.  The caller must free this buffer using @c
 *           bps_free().  This same ID will be delivered in the corresponding @c
 *           #SOUNDPLAYER_INFO event.
 *
 * @return @c BPS_SUCCESS upon success, @c BPS_FAILURE with @c errno set
 * otherwise.
 *
 * @since BlackBerry 10.2.0
 */
BPS_API int soundplayer_play_sound_async(const char *name, char **id);

/**
 * @brief Retrieve the ID from the @c SOUNDPLAYER_INFO event
 *
 * The @c soundplayer_event_get_id() function extracts the ID from the specified
 * @c #SOUNDPLAYER_INFO event.
 *
 * @param event The @c #SOUNDPLAYER_INFO event to extract the ID from.
 * 
 * @return The ID of the @c #SOUNDPLAYER_INFO event.
 *
 * @since BlackBerry 10.2.0
 */
BPS_API const char * soundplayer_event_get_id(bps_event_t *event);

/**
 * @brief Retrieve the error from the @c SOUNDPLAYER_INFO event
 *
 * The @c soundplayer_event_get_error() function extracts the error from the
 * specified @c #SOUNDPLAYER_INFO event.
 *
 * @param event The @c #SOUNDPLAYER_INFO event to extract the error from.
 *
 * @return The error, one of the values of the @c #soundplayer_error_t
 *         enumeration, or @c BPS_FAILURE with @c errno value set on error.
 *
 * @since BlackBerry 10.2.0
 */
BPS_API int soundplayer_event_get_error(bps_event_t *event);

/**
 * @brief Retrieve the errno from the @c SOUNDPLAYER_INFO event
 *
 * The @c soundplayer_event_get_error() function extracts the error number from
 * the specified @c #SOUNDPLAYER_INFO event.  This is the POSIX standard error
 * number that corresponds to the Sound Player-specific error in the event.
 * This is the same value that the functions @c soundplayer_prepare_sound(), @c
 * soundplayer_play_sound(), and @c soundplayer_play_sound_blocking() would set
 * @c errno to under the same conditions.
 *
 * @param event The @c #SOUNDPLAYER_INFO event to extract the errno from.
 *
 * @return The errno, one of the POSIX standard error numbers, or @c BPS_FAILURE
 *         with @c errno value set on error.
 *
 * @since BlackBerry 10.2.0
 */
BPS_API int soundplayer_event_get_errno(bps_event_t *event);

__END_DECLS

#endif // include guard
