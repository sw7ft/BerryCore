/*!
 * @copyright
 * Copyright Research In Motion Limited, 2013-2013
 * Research In Motion Limited. All rights reserved.
 */

#ifndef BB_SYSTEM_SCREENSHOT_HPP
#define BB_SYSTEM_SCREENSHOT_HPP

#include <bb/system/ScreenshotError>
#include <bb/system/ScreenshotFormat>
#include <bb/system/Global>

#include <QObject>
#include <QScopedPointer>
#include <QUrl>

typedef struct _screen_window *screen_window_t;

namespace bb
{
namespace system
{
class ScreenshotPrivate;

/*!
 * @headerfile Screenshot.hpp <bb/system/Screenshot>
 *
 * @brief Allows an application to capture the contents of the display or the application window and save it to a file.
 *
 * @details When capturing the display, the image is saved to the camera roll (a sequentially numbered image available in
 * the Pictures application, just like taking a picture with the camera) in any one of the formats specified by @c ScreenshotFormat.
 *
 * @xmlonly
 * <apigrouping group="Platform/Utility"/>
 * <library name="bbsystem"/>
 * @endxmlonly 
 *
 * @since BlackBerry 10.2.0
 */
class BB_SYSTEM_EXPORT Screenshot : public QObject
{
    Q_OBJECT
public:

    /*!
     * @brief Creates a new @c Screenshot object.
     *
     * @details Allows applications to capture the display or an application window to a file.
     *
     * @param parent If not 0, the supplied parent will be responsible for deleting this instance.
     *
     * @since BlackBerry 10.2.0
     */
    explicit Screenshot(QObject *parent = 0);
    
    /*!
     * @brief Destroys this @c Screenshot object.
     *
     * @since BlackBerry 10.2.0
     */
    virtual ~Screenshot();

    /*!
     * @brief Gets the result for the last @c captureDisplay or @c captureWindow request.
     *
     * @return The result of the last @c captureDisplay or @c captureWindow request. See
     * @c bb::system::ScreenshotError for a list of possible results.
     *
     * @since BlackBerry 10.2.0
     */
#ifndef Q_MOC_RUN
    Q_INVOKABLE bb::system::ScreenshotError::Type error() const;
#else
    /*! 
     * @cond PRIVATE
     * This conditional directive is set up to make it appear that the error() method returning the enumerator is available from QML
     * which it normally is not.  Since an int and the enum are compatible with loose typing you can call this method from QML
     * and compare it to the enum and it works.
     * @endcond
     */
    Q_INVOKABLE int error() const;
#endif
    
    /*!
     * @brief Captures the display to the camera roll.
     *
     * @details Captures the display to a file with an autogenerated name in PNG format.
     *
     * @return The absolute path to the file containing the image that was captured.  If an error occurs, the
     * method returns an empty string and the @c error method must be called to determine the reason for the failure.
     *
     * Capturing screenshot in C++:
     * @snippet libbbsystem/Screenshot_captureDisplay.cpp All
     *
     * Capturing screenshot in QML:
     * @snippet libbbsystem/Screenshot_captureDisplay.qml All
     *
     * @permissions The application must have the @c use_camera_desktop and @c access_shared permissions to use this feature.
     *
     * @since BlackBerry 10.2.0
     */
    Q_INVOKABLE QString captureDisplay();

    /*!
     * @brief Captures the display to the camera roll.
     *
     * @details Captures the display to a file with the supplied name.  The format of the image is inferred from
     * the filename.  The @c filePath can be supplied as an absolute filename, or using a schema, such as "file:data/screenshot.png".
     *
     * @param filePath The target filename to which the captured image will be written.  The extension of this filename
     * will determine the image format of the screen capture.
     *
     * @return The absolute path to the file containing the image that was captured.  If an error occurs, the
     * method returns an empty string and the @c error method must be called to determine the reason for the failure.
     *
     * Capturing screenshot in C++:
     * @snippet libbbsystem/Screenshot_captureDisplay_filename.cpp All
     *
     * Capturing screenshot in QML:
     * @snippet libbbsystem/Screenshot_captureDisplay_filename.qml All
     *
     * @permissions The application must have the @c use_camera_desktop and @c access_shared permissions to use this feature.
     *
     * @since BlackBerry 10.2.0
     */
    Q_INVOKABLE QString captureDisplay( const QUrl &filePath );

    /*!
     * @brief Captures the display to the camera roll in the supplied format.
     *
     * @details Captures the display to a file with an autogenerated name in the supplied image format.
     * See @c bb::system::ScreenshotFormat for the list of supported formats.
     *
     * @param format The format of the resulting file, such as PNG or JPEG.  One of @c bb::system::ScreenshotFormat.
     *
     * @return The absolute path to the file containing the image that was captured.  If an error occurs, the
     * method returns an empty string and the @c error method must be called to determine the reason for the failure.
     *
     * Capturing screenshot in C++:
     * @snippet libbbsystem/Screenshot_captureDisplay_format.cpp All
     *
     * Capturing screenshot in QML:
     * @snippet libbbsystem/Screenshot_captureDisplay_format.qml All
     *
     * @permissions The application must have the @c use_camera_desktop and @c access_shared permissions to use this feature.
     *
     * @since BlackBerry 10.2.0
     */
    Q_INVOKABLE QString captureDisplay( bb::system::ScreenshotFormat::Type format );


    /*!
     * @brief Captures the application window to the supplied filename.
     *
     * @details The captured image will be written in the format specified by the filename.  (For example, if the filename
     * was "file:data/screenshot.png" the file would be written as a PNG format image.)
     *
     * @param filename The path to which the file will be captured.
     * @param window The handle of the application window to be captured.
     *
     * @return The absolute path to the file containing the image that was captured.  If an error occurs, the
     * method returns an empty string and the @c error method must be called to determine the reason for the failure.
     *
     * Capturing screenshot in C++:
     * @snippet libbbsystem/Screenshot_captureWindow.cpp All
     *
     * Capturing screenshot in QML:
     * @snippet libbbsystem/Screenshot_captureWindow.qml All
     *
     * @since BlackBerry 10.2.0
     */
    Q_INVOKABLE QString captureWindow( const QUrl &filename, screen_window_t window );

protected:
//!@cond PRIVATE
    Q_INVOKABLE QString captureDisplay( int format );
//!@endcond

private:
//!@cond PRIVATE
    QScopedPointer<ScreenshotPrivate> d_ptr;
    Q_DECLARE_PRIVATE(Screenshot)
    Q_DISABLE_COPY(Screenshot)
//!@endcond
};

} // namespace system
} // namespace bb

#endif // BB_SYSTEM_SCREENSHOT_HPP
