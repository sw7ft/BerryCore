import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.

Module {
    Component {
        name: "bb::cascades::BaseObject"
        prototype: "QObject"
        Property { name: "objectName"; type: "string" }
        Property { name: "parent"; type: "QObject"; isReadonly: true; isPointer: true }
        Signal { name: "creationCompleted" }
        Signal {
            name: "objectNameChanged"
            Parameter { name: "objectName"; type: "string" }
        }
        Method { name: "toDebugString"; type: "string" }
    }
    Component {
        name: "bb::cascades::Control"
        prototype: "bb::cascades::VisualNode"
        Property { name: "horizontalAlignment"; type: "bb::cascades::HorizontalAlignment::Type" }
        Property { name: "verticalAlignment"; type: "bb::cascades::VerticalAlignment::Type" }
        Property { name: "preferredWidth"; type: "float" }
        Property { name: "preferredWidthSet"; type: "bool"; isReadonly: true }
        Property { name: "preferredHeight"; type: "float" }
        Property { name: "preferredHeightSet"; type: "bool"; isReadonly: true }
        Property { name: "leftPadding"; type: "float" }
        Property { name: "rightPadding"; type: "float" }
        Property { name: "topPadding"; type: "float" }
        Property { name: "bottomPadding"; type: "float" }
        Property { name: "enabled"; type: "bool" }
        Property {
            name: "focusRetentionPolicyFlags"
            type: "bb::cascades::FocusRetentionPolicy::Types"
        }
        Property { name: "focused"; type: "bool"; isReadonly: true }
        Property { name: "focusPolicy"; type: "bb::cascades::FocusPolicy::Type" }
        Property { name: "focusAutoShow"; type: "bb::cascades::FocusAutoShow::Type" }
        Property { name: "locallyFocused"; revision: 4; type: "bool" }
        Property {
            name: "inputRoute"
            type: "bb::cascades::InputRouteProperties"
            isReadonly: true
            isPointer: true
        }
        Property { name: "layoutProperties"; type: "bb::cascades::LayoutProperties"; isPointer: true }
        Property {
            name: "margin"
            revision: 3
            type: "bb::cascades::Spacings"
            isReadonly: true
            isPointer: true
        }
        Property { name: "accessibilityMode"; revision: 2; type: "bb::cascades::A11yMode::Type" }
        Property {
            name: "accessibility"
            revision: 2
            type: "bb::cascades::AbstractA11yObject"
            isReadonly: true
            isPointer: true
        }
        Property { name: "leftMargin"; type: "float" }
        Property { name: "leftMarginSet"; type: "bool"; isReadonly: true }
        Property { name: "rightMargin"; type: "float" }
        Property { name: "rightMarginSet"; type: "bool"; isReadonly: true }
        Property { name: "topMargin"; type: "float" }
        Property { name: "topMarginSet"; type: "bool"; isReadonly: true }
        Property { name: "bottomMargin"; type: "float" }
        Property { name: "bottomMarginSet"; type: "bool"; isReadonly: true }
        Property { name: "minWidth"; type: "float" }
        Property { name: "maxWidth"; type: "float" }
        Property { name: "minHeight"; type: "float" }
        Property { name: "maxHeight"; type: "float" }
        Property {
            name: "contextActions"
            type: "bb::cascades::ActionSet"
            isList: true
            isReadonly: true
        }
        Property {
            name: "contextMenuHandler"
            type: "bb::cascades::ContextMenuHandler"
            isPointer: true
        }
        Property { name: "implicitLayoutAnimationsEnabled"; type: "bool" }
        Property {
            name: "shortcuts"
            type: "bb::cascades::AbstractShortcut"
            isList: true
            isReadonly: true
        }
        Property {
            name: "keyListeners"
            type: "bb::cascades::KeyListener"
            isList: true
            isReadonly: true
        }
        Property { name: "builtInShortcutsEnabled"; revision: 2; type: "bool" }
        Property {
            name: "navigation"
            revision: 4
            type: "bb::cascades::Navigation"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "newHorizontalAlignment"; type: "bb::cascades::HorizontalAlignment::Type" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "newVerticalAlignment"; type: "bb::cascades::VerticalAlignment::Type" }
        }
        Signal {
            name: "preferredWidthChanged"
            Parameter { name: "preferredWidth"; type: "float" }
        }
        Signal {
            name: "preferredWidthSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "preferredHeightChanged"
            Parameter { name: "preferredHeight"; type: "float" }
        }
        Signal {
            name: "preferredHeightSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "leftPaddingChanged"
            Parameter { name: "leftPadding"; type: "float" }
        }
        Signal {
            name: "rightPaddingChanged"
            Parameter { name: "rightPadding"; type: "float" }
        }
        Signal {
            name: "topPaddingChanged"
            Parameter { name: "topPadding"; type: "float" }
        }
        Signal {
            name: "bottomPaddingChanged"
            Parameter { name: "bottomPadding"; type: "float" }
        }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "focusedChanged"
            Parameter { name: "focused"; type: "bool" }
        }
        Signal {
            name: "focusPolicyChanged"
            Parameter { name: "newFocusPolicy"; type: "bb::cascades::FocusPolicy::Type" }
        }
        Signal {
            name: "focusAutoShowChanged"
            Parameter { name: "newFocusAutoShow"; type: "bb::cascades::FocusAutoShow::Type" }
        }
        Signal {
            name: "locallyFocusedChanged"
            revision: 4
            Parameter { name: "newLocallyFocused"; type: "bool" }
        }
        Signal {
            name: "layoutPropertiesChanged"
            Parameter { name: "layoutProperties"; type: "bb::cascades::LayoutProperties"; isPointer: true }
        }
        Signal {
            name: "leftMarginChanged"
            Parameter { name: "leftMargin"; type: "float" }
        }
        Signal {
            name: "leftMarginSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "topMarginChanged"
            Parameter { name: "topMargin"; type: "float" }
        }
        Signal {
            name: "topMarginSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "bottomMarginChanged"
            Parameter { name: "bottomMargin"; type: "float" }
        }
        Signal {
            name: "bottomMarginSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "rightMarginChanged"
            Parameter { name: "rightMargin"; type: "float" }
        }
        Signal {
            name: "rightMarginSetChanged"
            Parameter { name: "isSet"; type: "bool" }
        }
        Signal {
            name: "minWidthChanged"
            Parameter { name: "minWidth"; type: "float" }
        }
        Signal {
            name: "maxWidthChanged"
            Parameter { name: "maxWidth"; type: "float" }
        }
        Signal {
            name: "minHeightChanged"
            Parameter { name: "minHeight"; type: "float" }
        }
        Signal {
            name: "maxHeightChanged"
            Parameter { name: "maxHeight"; type: "float" }
        }
        Signal {
            name: "actionSetAdded"
            Parameter { name: "actionSet"; type: "bb::cascades::ActionSet"; isPointer: true }
        }
        Signal {
            name: "actionSetRemoved"
            Parameter { name: "actionSet"; type: "bb::cascades::ActionSet"; isPointer: true }
        }
        Signal {
            name: "contextMenuHandlerChanged"
            Parameter {
                name: "contextMenuHandler"
                type: "bb::cascades::ContextMenuHandler"
                isPointer: true
            }
        }
        Signal {
            name: "focusRetentionPolicyFlagsChanged"
            Parameter { name: "policy"; type: "bb::cascades::FocusRetentionPolicy::Types" }
        }
        Signal {
            name: "implicitLayoutAnimationsEnabledChanged"
            Parameter { name: "implicitLayoutAnimationsEnabled"; type: "bool" }
        }
        Signal {
            name: "builtInShortcutsEnabledChanged"
            revision: 2
            Parameter { name: "builtInShortcutsEnabled"; type: "bool" }
        }
        Signal {
            name: "accessibilityModeChanged"
            revision: 2
            Parameter { name: "newAccessibilityMode"; type: "bb::cascades::A11yMode::Type" }
        }
        Method {
            name: "setBuiltInShortcutsEnabled"
            revision: 2
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setHorizontalAlignment"
            Parameter { name: "horizontalAlignment"; type: "bb::cascades::HorizontalAlignment::Type" }
        }
        Method { name: "resetHorizontalAlignment" }
        Method {
            name: "setVerticalAlignment"
            Parameter { name: "verticalAlignment"; type: "bb::cascades::VerticalAlignment::Type" }
        }
        Method { name: "resetVerticalAlignment" }
        Method {
            name: "setPreferredWidth"
            Parameter { name: "preferredWidth"; type: "float" }
        }
        Method { name: "resetPreferredWidth" }
        Method {
            name: "setFocusRetentionPolicyFlags"
            Parameter { name: "policy"; type: "bb::cascades::FocusRetentionPolicy::Types" }
        }
        Method { name: "resetFocusRetentionPolicyFlags" }
        Method {
            name: "setPreferredHeight"
            Parameter { name: "preferredHeight"; type: "float" }
        }
        Method { name: "resetPreferredHeight" }
        Method {
            name: "setPreferredSize"
            Parameter { name: "preferredWidth"; type: "float" }
            Parameter { name: "preferredHeight"; type: "float" }
        }
        Method { name: "resetPreferredSize" }
        Method {
            name: "setLeftPadding"
            Parameter { name: "leftPadding"; type: "float" }
        }
        Method { name: "resetLeftPadding" }
        Method {
            name: "setRightPadding"
            Parameter { name: "rightPadding"; type: "float" }
        }
        Method { name: "resetRightPadding" }
        Method {
            name: "setTopPadding"
            Parameter { name: "topPadding"; type: "float" }
        }
        Method { name: "resetTopPadding" }
        Method {
            name: "setBottomPadding"
            Parameter { name: "bottomPadding"; type: "float" }
        }
        Method { name: "resetBottomPadding" }
        Method {
            name: "setFocusPolicy"
            Parameter { name: "focusPolicy"; type: "bb::cascades::FocusPolicy::Type" }
        }
        Method { name: "resetFocusPolicy" }
        Method {
            name: "setFocusAutoShow"
            Parameter { name: "focusAutoShow"; type: "bb::cascades::FocusAutoShow::Type" }
        }
        Method { name: "resetFocusAutoShow" }
        Method {
            name: "setLocallyFocused"
            revision: 4
            Parameter { name: "locallyFocused"; type: "bool" }
        }
        Method { name: "resetLocallyFocused"; revision: 4 }
        Method {
            name: "setEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method { name: "resetEnabled" }
        Method {
            name: "setLayoutProperties"
            Parameter { name: "layoutProperties"; type: "bb::cascades::LayoutProperties"; isPointer: true }
        }
        Method { name: "resetLayoutProperties" }
        Method {
            name: "setLeftMargin"
            Parameter { name: "leftMargin"; type: "float" }
        }
        Method { name: "resetLeftMargin" }
        Method {
            name: "setRightMargin"
            Parameter { name: "rightMargin"; type: "float" }
        }
        Method { name: "resetRightMargin" }
        Method {
            name: "setTopMargin"
            Parameter { name: "topMargin"; type: "float" }
        }
        Method { name: "resetTopMargin" }
        Method {
            name: "setBottomMargin"
            Parameter { name: "bottomMargin"; type: "float" }
        }
        Method { name: "resetBottomMargin" }
        Method {
            name: "setMinWidth"
            Parameter { name: "minWidth"; type: "float" }
        }
        Method { name: "resetMinWidth" }
        Method {
            name: "setMaxWidth"
            Parameter { name: "maxWidth"; type: "float" }
        }
        Method { name: "resetMaxWidth" }
        Method {
            name: "setMinHeight"
            Parameter { name: "minHeight"; type: "float" }
        }
        Method { name: "resetMinHeight" }
        Method {
            name: "setMaxHeight"
            Parameter { name: "maxHeight"; type: "float" }
        }
        Method { name: "resetMaxHeight" }
        Method { name: "requestFocus" }
        Method { name: "loseFocus" }
        Method { name: "resetContextMenuHandler" }
        Method {
            name: "setImplicitLayoutAnimationsEnabled"
            Parameter { name: "enable"; type: "bool" }
        }
        Method { name: "resetImplicitLayoutAnimationsEnabled" }
        Method {
            name: "setAccessibilityMode"
            revision: 2
            Parameter { name: "accessibilityMode"; type: "bb::cascades::A11yMode::Type" }
        }
        Method { name: "resetAccessibilityMode"; revision: 2 }
        Method {
            name: "addShortcut"
            Parameter { name: "shortcut"; type: "bb::cascades::AbstractShortcut"; isPointer: true }
        }
        Method {
            name: "removeShortcut"
            type: "bool"
            Parameter { name: "shortcut"; type: "bb::cascades::AbstractShortcut"; isPointer: true }
        }
        Method { name: "removeAllShortcuts" }
        Method { name: "shortcutCount"; type: "int" }
        Method {
            name: "shortcutAt"
            type: "bb::cascades::AbstractShortcut*"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "enableAllShortcuts" }
        Method { name: "disableAllShortcuts" }
        Method { name: "builtInShortcutsEnabled"; revision: 2; type: "bool" }
        Method { name: "resetBuiltInShortcutsEnabled"; revision: 2 }
        Method {
            name: "setBuiltInShortcutEnabled"
            revision: 2
            Parameter { name: "type"; type: "bb::cascades::SystemShortcuts::Type" }
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "addKeyListener"
            Parameter { name: "keyListener"; type: "bb::cascades::KeyListener"; isPointer: true }
        }
        Method {
            name: "removeKeyListener"
            type: "bool"
            Parameter { name: "keyListener"; type: "bb::cascades::KeyListener"; isPointer: true }
        }
        Method { name: "removeAllKeyListeners" }
        Method { name: "keyListenerCount"; type: "int" }
        Method {
            name: "keyListenerAt"
            type: "bb::cascades::KeyListener*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setBuiltInShortcutEnabled"
            revision: 2
            Parameter { name: "type"; type: "int" }
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component { name: "bb::cascades::CustomControl"; prototype: "bb::cascades::Control" }
    Component {
        name: "bb::cascades::UIObject"
        prototype: "bb::cascades::BaseObject"
        Property { name: "attachedObjects"; type: "QObject"; isList: true; isReadonly: true }
        Property {
            name: "ui"
            revision: 3
            type: "bb::cascades::UIConfig"
            isReadonly: true
            isPointer: true
        }
        Method { name: "ui"; revision: 3; type: "bb::cascades::UIConfig*" }
    }
    Component {
        name: "bb::cascades::VisualNode"
        prototype: "bb::cascades::UIObject"
        Property { name: "opacity"; type: "float" }
        Property { name: "visible"; type: "bool" }
        Property { name: "translationX"; type: "float" }
        Property { name: "translationY"; type: "float" }
        Property { name: "rotationZ"; type: "float" }
        Property { name: "scaleX"; type: "float" }
        Property { name: "scaleY"; type: "float" }
        Property { name: "pivotX"; type: "float" }
        Property { name: "pivotY"; type: "float" }
        Property { name: "touchPropagationMode"; type: "bb::cascades::TouchPropagationMode::Type" }
        Property { name: "overlapTouchPolicy"; type: "bb::cascades::OverlapTouchPolicy::Type" }
        Property {
            name: "touchBehaviors"
            type: "bb::cascades::TouchBehavior"
            isList: true
            isReadonly: true
        }
        Property {
            name: "gestureHandlers"
            type: "bb::cascades::GestureHandler"
            isList: true
            isReadonly: true
        }
        Property {
            name: "animations"
            type: "bb::cascades::AbstractAnimation"
            isList: true
            isReadonly: true
        }
        Property {
            name: "eventHandlers"
            revision: 3
            type: "bb::cascades::AbstractEventHandler"
            isList: true
            isReadonly: true
        }
        Property {
            name: "effects"
            revision: 4
            type: "bb::cascades::AbstractEffect"
            isList: true
            isReadonly: true
        }
        Signal {
            name: "opacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "opacityChanging"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "translationXChanged"
            Parameter { name: "translationX"; type: "float" }
        }
        Signal {
            name: "translationYChanged"
            Parameter { name: "translationY"; type: "float" }
        }
        Signal {
            name: "translationXChanging"
            Parameter { name: "translationX"; type: "float" }
        }
        Signal {
            name: "translationYChanging"
            Parameter { name: "translationY"; type: "float" }
        }
        Signal {
            name: "rotationZChanging"
            Parameter { name: "rotationZ"; type: "float" }
        }
        Signal {
            name: "rotationZChanged"
            Parameter { name: "rotationZ"; type: "float" }
        }
        Signal {
            name: "scaleXChanged"
            Parameter { name: "scaleX"; type: "float" }
        }
        Signal {
            name: "scaleYChanged"
            Parameter { name: "scaleY"; type: "float" }
        }
        Signal {
            name: "scaleXChanging"
            Parameter { name: "scaleX"; type: "float" }
        }
        Signal {
            name: "scaleYChanging"
            Parameter { name: "scaleY"; type: "float" }
        }
        Signal {
            name: "pivotXChanged"
            Parameter { name: "pivotX"; type: "float" }
        }
        Signal {
            name: "pivotYChanged"
            Parameter { name: "pivotY"; type: "float" }
        }
        Signal {
            name: "touch"
            Parameter { name: "event"; type: "bb::cascades::TouchEvent"; isPointer: true }
        }
        Signal {
            name: "touchCapture"
            Parameter { name: "event"; type: "bb::cascades::TouchEvent"; isPointer: true }
        }
        Signal {
            name: "touchEnter"
            Parameter { name: "event"; type: "bb::cascades::TouchEnterEvent"; isPointer: true }
        }
        Signal {
            name: "touchExit"
            Parameter { name: "event"; type: "bb::cascades::TouchExitEvent"; isPointer: true }
        }
        Signal {
            name: "touchPropagationModeChanged"
            Parameter { name: "newTouchPropagationMode"; type: "bb::cascades::TouchPropagationMode::Type" }
        }
        Signal {
            name: "overlapTouchPolicyChanged"
            Parameter { name: "newOverlapTouchPolicy"; type: "bb::cascades::OverlapTouchPolicy::Type" }
        }
        Method {
            name: "setOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method { name: "resetOpacity" }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "resetVisible" }
        Method {
            name: "setTranslationX"
            Parameter { name: "translationX"; type: "float" }
        }
        Method { name: "resetTranslationX" }
        Method {
            name: "setTranslationY"
            Parameter { name: "translationY"; type: "float" }
        }
        Method { name: "resetTranslationY" }
        Method {
            name: "setTranslation"
            Parameter { name: "translationX"; type: "float" }
            Parameter { name: "translationY"; type: "float" }
        }
        Method { name: "resetTranslation" }
        Method {
            name: "setRotationZ"
            Parameter { name: "rotationZ"; type: "float" }
        }
        Method { name: "resetRotationZ" }
        Method {
            name: "setScaleX"
            Parameter { name: "scaleX"; type: "float" }
        }
        Method { name: "resetScaleX" }
        Method {
            name: "setScaleY"
            Parameter { name: "scaleY"; type: "float" }
        }
        Method { name: "resetScaleY" }
        Method {
            name: "setScale"
            Parameter { name: "scaleX"; type: "float" }
            Parameter { name: "scaleY"; type: "float" }
        }
        Method {
            name: "setScale"
            Parameter { name: "scaleXY"; type: "float" }
        }
        Method { name: "resetScale" }
        Method {
            name: "setPivotX"
            Parameter { name: "pivotX"; type: "float" }
        }
        Method { name: "resetPivotX" }
        Method {
            name: "setPivotY"
            Parameter { name: "pivotY"; type: "float" }
        }
        Method { name: "resetPivotY" }
        Method {
            name: "setPivot"
            Parameter { name: "pivotX"; type: "float" }
            Parameter { name: "pivotY"; type: "float" }
        }
        Method { name: "resetPivot" }
        Method {
            name: "setTouchPropagationMode"
            Parameter { name: "mode"; type: "bb::cascades::TouchPropagationMode::Type" }
        }
        Method { name: "resetTouchPropagationMode" }
        Method {
            name: "setOverlapTouchPolicy"
            Parameter { name: "policy"; type: "bb::cascades::OverlapTouchPolicy::Type" }
        }
        Method { name: "resetOverlapTouchPolicy" }
        Method {
            name: "addEffect"
            revision: 4
            Parameter { name: "effect"; type: "bb::cascades::AbstractEffect"; isPointer: true }
        }
        Method {
            name: "removeEffect"
            revision: 4
            Parameter { name: "effect"; type: "bb::cascades::AbstractEffect"; isPointer: true }
        }
    }
    Component {
        name: "bb::cascades::multimedia::BarcodeDetector"
        prototype: "QObject"
        exports: [
            "bb.cascades.multimedia/BarcodeDetector 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "camera"; type: "bb::cascades::multimedia::Camera"; isPointer: true }
        Property { name: "formats"; type: "bb::cascades::multimedia::BarcodeFormat::Types" }
        Signal {
            name: "barcodeDetected"
            Parameter { name: "data"; type: "string" }
            Parameter { name: "format"; type: "BarcodeFormat::Type" }
        }
        Signal {
            name: "detected"
            Parameter { name: "data"; type: "string" }
            Parameter { name: "format"; type: "bb::cascades::multimedia::BarcodeFormat::Type" }
        }
        Signal {
            name: "cameraChanged"
            Parameter { name: "camera"; type: "bb::cascades::multimedia::Camera"; isPointer: true }
        }
        Signal {
            name: "formatsChanged"
            Parameter { name: "newFormats"; type: "bb::cascades::multimedia::BarcodeFormat::Types" }
        }
        Signal {
            name: "potentialRegistrationMarkDetected"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal {
            name: "registrationMarksDetected"
            Parameter { name: "positions"; type: "QList<QPoint>" }
        }
        Signal { name: "scanStarted" }
        Signal { name: "scanCompleted" }
        Signal {
            name: "potentialRegistrationMarkDetected"
            Parameter { name: "position"; type: "QVariant" }
        }
        Signal {
            name: "registrationMarksDetected"
            Parameter { name: "positions"; type: "QVariant" }
        }
        Signal {
            name: "detected"
            Parameter { name: "data"; type: "string" }
            Parameter { name: "format"; type: "int" }
        }
        Signal {
            name: "formatsChanged"
            Parameter { name: "newFormats"; type: "int" }
        }
        Method {
            name: "setCamera"
            Parameter { name: "camera"; type: "bb::cascades::multimedia::Camera"; isPointer: true }
        }
        Method {
            name: "setFormats"
            Parameter { name: "formats"; type: "bb::cascades::multimedia::BarcodeFormat::Types" }
        }
    }
    Component {
        name: "bb::cascades::multimedia::BarcodeDetectorVisuals"
        prototype: "bb::cascades::CustomControl"
        exports: [
            "bb.cascades.multimedia/BarcodeDetectorVisuals 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property {
            name: "barcodeDetector"
            type: "bb::cascades::multimedia::BarcodeDetector"
            isPointer: true
        }
        Signal {
            name: "detected"
            Parameter { name: "data"; type: "string" }
            Parameter { name: "format"; type: "bb::cascades::multimedia::BarcodeFormat::Type" }
        }
        Signal {
            name: "detected"
            Parameter { name: "data"; type: "string" }
            Parameter { name: "format"; type: "int" }
        }
        Method {
            name: "setBarcodeDetector"
            Parameter {
                name: "barcodeDetector"
                type: "bb::cascades::multimedia::BarcodeDetector"
                isPointer: true
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::BarcodeFormat"
        exports: [
            "bb.cascades.multimedia/BarcodeFormat 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "QrCode": 1,
                "DataMatrix": 2,
                "UpcE": 4,
                "UpcA": 8,
                "Ean8": 16,
                "Ean13": 32,
                "Code128": 64,
                "Code39": 128,
                "Itf": 256,
                "Aztec": 512,
                "Any": 65535
            }
        }
        Enum {
            name: "Types"
            values: {
                "QrCode": 1,
                "DataMatrix": 2,
                "UpcE": 4,
                "UpcA": 8,
                "Ean8": 16,
                "Ean13": 32,
                "Code128": 64,
                "Code39": 128,
                "Itf": 256,
                "Aztec": 512,
                "Any": 65535
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::BarcodeGenerator"
        prototype: "QObject"
        exports: [
            "bb.cascades.multimedia/BarcodeGenerator 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Method { name: "error"; type: "int" }
        Method {
            name: "generate"
            type: "string"
            Parameter { name: "filename"; type: "QUrl" }
            Parameter { name: "format"; type: "bb::cascades::multimedia::BarcodeGeneratorFormat::Type" }
            Parameter { name: "data"; type: "string" }
        }
        Method {
            name: "generate"
            type: "string"
            Parameter { name: "filename"; type: "QUrl" }
            Parameter { name: "format"; type: "bb::cascades::multimedia::BarcodeGeneratorFormat::Type" }
            Parameter { name: "data"; type: "string" }
            Parameter { name: "scale"; type: "float" }
        }
        Method {
            name: "generate"
            type: "bb::ImageData"
            Parameter { name: "format"; type: "bb::cascades::multimedia::BarcodeGeneratorFormat::Type" }
            Parameter { name: "data"; type: "string" }
        }
        Method {
            name: "generate"
            type: "bb::ImageData"
            Parameter { name: "format"; type: "bb::cascades::multimedia::BarcodeGeneratorFormat::Type" }
            Parameter { name: "data"; type: "string" }
            Parameter { name: "scale"; type: "float" }
        }
    }
    Component {
        name: "bb::cascades::multimedia::BarcodeGeneratorError"
        exports: [
            "bb.cascades.multimedia/BarcodeGeneratorError 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Internal": 1,
                "DataTooLong": 2,
                "InvalidData": 3,
                "FileAccess": 4,
                "InvalidCheckDigit": 5
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::BarcodeGeneratorFormat"
        exports: [
            "bb.cascades.multimedia/BarcodeGeneratorFormat 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "QrCode": 1,
                "Pdf417": 2,
                "Aztec": 3,
                "Ean": 4,
                "UpcA": 5,
                "UpcE": 6,
                "IsbnX": 7,
                "Codabar": 8,
                "Code128": 9,
                "DataMatrix": 10,
                "Itf14": 11,
                "Maxicode": 12,
                "Code39": 13
            }
        }
        Method {
            name: "fromBarcodeFormat"
            type: "int"
            Parameter { name: "barcodeFormat"; type: "int" }
        }
    }
    Component {
        name: "bb::cascades::multimedia::BarcodeView"
        prototype: "bb::cascades::CustomControl"
        exports: [
            "bb.cascades.multimedia/BarcodeView 1.2"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "format"; type: "bb::cascades::multimedia::BarcodeGeneratorFormat::Type" }
        Property { name: "data"; type: "string" }
        Signal {
            name: "formatChanged"
            Parameter { name: "format"; type: "bb::cascades::multimedia::BarcodeGeneratorFormat::Type" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "data"; type: "string" }
        }
        Signal {
            name: "finished"
            Parameter { name: "error"; type: "bb::cascades::multimedia::BarcodeGeneratorError::Type" }
        }
        Signal {
            name: "formatChanged"
            Parameter { name: "format"; type: "int" }
        }
        Signal {
            name: "finished"
            Parameter { name: "error"; type: "int" }
        }
        Method { name: "error"; type: "int" }
    }
    Component {
        name: "bb::cascades::multimedia::Camera"
        prototype: "bb::cascades::CustomControl"
        Property {
            name: "cameraUnit"
            type: "bb::cascades::multimedia::CameraUnit::Type"
            isReadonly: true
        }
        Property { name: "supportedCameras"; type: "QVariantList"; isReadonly: true }
        Property { name: "maxZoomLevel"; type: "uint"; isReadonly: true }
        Property { name: "allCamerasAccessible"; type: "bool"; isReadonly: true }
        Property { name: "previewBufferSize"; type: "quint64"; isReadonly: true }
        Property { name: "devicePreviewFrameDirection"; type: "quint64"; isReadonly: true }
        Signal {
            name: "cameraUnitChanged"
            Parameter { name: "unit"; type: "bb::cascades::multimedia::CameraUnit::Type" }
        }
        Signal { name: "cameraOpened" }
        Signal {
            name: "cameraOpenFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Signal { name: "cameraClosed" }
        Signal {
            name: "cameraCloseFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Signal { name: "viewfinderStarted" }
        Signal {
            name: "viewfinderStartFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Signal { name: "viewfinderStopped" }
        Signal {
            name: "viewfinderStopFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Signal { name: "shutterFired" }
        Signal { name: "photoCaptured" }
        Signal {
            name: "photoCaptureFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Signal {
            name: "photoSaved"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "length"; type: "quint64" }
        }
        Signal {
            name: "photoSaveFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Signal {
            name: "previewFrameAvailable"
            Parameter { name: "previewBuffer"; type: "bb::cascades::multimedia::SharedUCharPointer" }
            Parameter { name: "size"; type: "quint64" }
            Parameter { name: "width"; type: "uint" }
            Parameter { name: "height"; type: "uint" }
            Parameter { name: "stride"; type: "uint" }
        }
        Signal {
            name: "reviewImageReady"
            Parameter { name: "imgSize"; type: "QSize" }
            Parameter { name: "imgData"; type: "QByteArray" }
        }
        Signal { name: "videoCaptureStarted" }
        Signal {
            name: "videoCaptureFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Signal {
            name: "videoCaptureStopped"
            Parameter { name: "fileName"; type: "string" }
        }
        Signal { name: "cameraResourceReleased" }
        Signal { name: "cameraResourceAvailable" }
        Signal {
            name: "focusStateChanged"
            Parameter { name: "state"; type: "bb::cascades::multimedia::CameraFocusState::Type" }
        }
        Method {
            name: "open"
            Parameter { name: "unit"; type: "bb::cascades::multimedia::CameraUnit::Type" }
        }
        Method { name: "open" }
        Method { name: "close" }
        Method { name: "startViewfinder" }
        Method { name: "stopViewfinder" }
        Method { name: "capturePhoto" }
        Method { name: "startVideoCapture" }
        Method { name: "stopVideoCapture" }
        Method {
            name: "applySettings"
            type: "bool"
            Parameter { name: "settings"; type: "CameraSettings"; isPointer: true }
        }
        Method {
            name: "isCameraAccessible"
            type: "bool"
            Parameter { name: "unit"; type: "bb::cascades::multimedia::CameraUnit::Type" }
        }
        Method { name: "isCameraAccessible"; type: "bool" }
        Method {
            name: "getSettings"
            Parameter { name: "settings"; type: "CameraSettings"; isPointer: true }
        }
        Method {
            name: "supportedCaptureResolutions"
            type: "QVariantList"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraMode::Type" }
        }
        Method {
            name: "addPreviewBuffer"
            Parameter { name: "previewBuffer"; type: "QSharedPointer<unsigned char>" }
            Parameter { name: "previewBufferSize"; type: "quint64" }
        }
    }
    Component {
        name: "bb::cascades::multimedia::CameraError"
        exports: [
            "bb.cascades.multimedia/CameraError 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "General": 0,
                "BadPointer": 1,
                "APIFailure": 2,
                "InvalidArgument": 3,
                "InvalidState": 4,
                "RecordingSpaceFull": 5,
                "CameraInUse": 6,
                "MicInUse": 7
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::CameraFlashMode"
        exports: [
            "bb.cascades.multimedia/CameraFlashMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Off": 0,
                "On": 1,
                "Auto": 2,
                "Light": 3
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::CameraFocusMode"
        exports: [
            "bb.cascades.multimedia/CameraFocusMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Off": 0,
                "Manual": 1,
                "Auto": 2,
                "Macro": 3,
                "ContinuousAuto": 4,
                "ContinuousMacro": 5
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::CameraFocusState"
        exports: [
            "bb.cascades.multimedia/CameraFocusState 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Waiting": 1,
                "Searching": 2,
                "Failed": 3,
                "Locked": 4
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::CameraMode"
        exports: [
            "bb.cascades.multimedia/CameraMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Photo": 0,
                "Video": 1
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::CameraSceneMode"
        exports: [
            "bb.cascades.multimedia/CameraSceneMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Auto": 0,
                "Action": 1,
                "Whiteboard": 2,
                "Night": 3,
                "BeachAndSnow": 4
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::CameraSettings"
        prototype: "QObject"
        Property { name: "cameraMode"; type: "bb::cascades::multimedia::CameraMode::Type" }
        Property { name: "shootingMode"; type: "bb::cascades::multimedia::CameraShootingMode::Type" }
        Property { name: "sceneMode"; type: "bb::cascades::multimedia::CameraSceneMode::Type" }
        Property { name: "flashMode"; type: "bb::cascades::multimedia::CameraFlashMode::Type" }
        Property { name: "focusMode"; type: "bb::cascades::multimedia::CameraFocusMode::Type" }
        Property { name: "focusRegion"; type: "QRect" }
        Property { name: "captureResolution"; type: "QSize" }
        Property { name: "zoomLevel"; type: "uint" }
        Property { name: "cameraRollPath"; type: "string" }
        Property { name: "visible"; type: "bool" }
        Signal {
            name: "cameraModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraMode::Type" }
        }
        Signal {
            name: "shootingModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraShootingMode::Type" }
        }
        Signal {
            name: "sceneModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraSceneMode::Type" }
        }
        Signal {
            name: "flashModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraFlashMode::Type" }
        }
        Signal {
            name: "focusModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraFocusMode::Type" }
        }
        Signal {
            name: "focusRegionChanged"
            Parameter { name: "focusRegion"; type: "QRect" }
        }
        Signal {
            name: "captureResolutionChanged"
            Parameter { name: "resolution"; type: "QSize" }
        }
        Signal {
            name: "zoomLevelChanged"
            Parameter { name: "level"; type: "uint" }
        }
        Signal {
            name: "cameraRollPathChanged"
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "visible"; type: "bool" }
        }
    }
    Component {
        name: "bb::cascades::multimedia::CameraShootingMode"
        exports: [
            "bb.cascades.multimedia/CameraShootingMode 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Normal": 0,
                "Stabilization": 1
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::CameraUnit"
        exports: [
            "bb.cascades.multimedia/CameraUnit 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "None": 0,
                "Front": 1,
                "Rear": 2
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::QmlCamera"
        prototype: "bb::cascades::multimedia::Camera"
        exports: [
            "bb.cascades.multimedia/Camera 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "cameraUnitChanged"
            Parameter { name: "unit"; type: "int" }
        }
        Signal {
            name: "cameraOpenFailed"
            Parameter { name: "error"; type: "int" }
        }
        Signal {
            name: "cameraCloseFailed"
            Parameter { name: "error"; type: "int" }
        }
        Signal {
            name: "viewfinderStartFailed"
            Parameter { name: "error"; type: "int" }
        }
        Signal {
            name: "viewfinderStopFailed"
            Parameter { name: "error"; type: "int" }
        }
        Signal {
            name: "photoCaptureFailed"
            Parameter { name: "error"; type: "int" }
        }
        Signal {
            name: "photoSaveFailed"
            Parameter { name: "error"; type: "int" }
        }
        Signal {
            name: "videoCaptureFailed"
            Parameter { name: "error"; type: "int" }
        }
        Signal {
            name: "focusStateChanged"
            Parameter { name: "state"; type: "int" }
        }
        Method {
            name: "open"
            Parameter { name: "unit"; type: "int" }
        }
        Method { name: "open" }
        Method {
            name: "applySettings"
            type: "bool"
            Parameter { name: "settings"; type: "QVariant" }
        }
        Method {
            name: "onCameraUnitChanged"
            Parameter { name: "unit"; type: "bb::cascades::multimedia::CameraUnit::Type" }
        }
        Method {
            name: "onCameraOpenFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Method {
            name: "onCameraCloseFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Method {
            name: "onViewfinderStartFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Method {
            name: "onViewfinderStopFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Method {
            name: "onPhotoCaptureFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Method {
            name: "onPhotoSaveFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Method {
            name: "onVideoCaptureFailed"
            Parameter { name: "error"; type: "bb::cascades::multimedia::CameraError::Type" }
        }
        Method {
            name: "onFocusStateChanged"
            Parameter { name: "state"; type: "bb::cascades::multimedia::CameraFocusState::Type" }
        }
        Method {
            name: "isCameraAccessible"
            type: "bool"
            Parameter { name: "unit"; type: "int" }
        }
        Method { name: "isCameraAccessible"; type: "bool" }
        Method {
            name: "supportedCaptureResolutions"
            type: "QVariantList"
            Parameter { name: "cameraMode"; type: "int" }
        }
        Method {
            name: "getSettings"
            Parameter { name: "settings"; type: "QVariant" }
        }
    }
    Component {
        name: "bb::cascades::multimedia::QmlCameraSettings"
        prototype: "bb::cascades::multimedia::CameraSettings"
        exports: [
            "bb.cascades.multimedia/CameraSettings 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Signal {
            name: "cameraModeChanged"
            Parameter { name: "mode"; type: "int" }
        }
        Signal {
            name: "shootingModeChanged"
            Parameter { name: "mode"; type: "int" }
        }
        Signal {
            name: "sceneModeChanged"
            Parameter { name: "mode"; type: "int" }
        }
        Signal {
            name: "flashModeChanged"
            Parameter { name: "mode"; type: "int" }
        }
        Signal {
            name: "focusModeChanged"
            Parameter { name: "mode"; type: "int" }
        }
        Method {
            name: "onCameraModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraMode::Type" }
        }
        Method {
            name: "onShootingModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraShootingMode::Type" }
        }
        Method {
            name: "onSceneModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraSceneMode::Type" }
        }
        Method {
            name: "onFlashModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraFlashMode::Type" }
        }
        Method {
            name: "onFocusModeChanged"
            Parameter { name: "mode"; type: "bb::cascades::multimedia::CameraFocusMode::Type" }
        }
    }
    Component {
        name: "bb::cascades::multimedia::QrCodeErrorCorrection"
        exports: [
            "bb.cascades.multimedia/QrCodeErrorCorrection 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        isCreatable: false
        Enum {
            name: "Type"
            values: {
                "Low": 1,
                "Medium": 2,
                "Quality": 3,
                "High": 4
            }
        }
    }
    Component {
        name: "bb::cascades::multimedia::QrCodeView"
        prototype: "bb::cascades::CustomControl"
        exports: [
            "bb.cascades.multimedia/QrCodeView 1.0"
        ]
        exportMetaObjectRevisions: [
            0
        ]
        Property { name: "data"; type: "string" }
        Property {
            name: "errorCorrection"
            type: "bb::cascades::multimedia::QrCodeErrorCorrection::Type"
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "data"; type: "string" }
        }
        Signal {
            name: "errorCorrectionChanged"
            Parameter {
                name: "errorCorrection"
                type: "bb::cascades::multimedia::QrCodeErrorCorrection::Type"
            }
        }
        Signal {
            name: "renderResult"
            Parameter { name: "result"; type: "bb::cascades::multimedia::QrCodeRenderResult::Type" }
        }
        Signal {
            name: "errorCorrectionChanged"
            Parameter { name: "errorCorrection"; type: "int" }
        }
        Signal {
            name: "renderResult"
            Parameter { name: "result"; type: "int" }
        }
    }
}
